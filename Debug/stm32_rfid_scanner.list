
stm32_rfid_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001499c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000059dc  08014b4c  08014b4c  00024b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a528  0801a528  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801a528  0801a528  0002a528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a530  0801a530  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a530  0801a530  0002a530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a534  0801a534  0002a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801a538  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          0000cb20  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000cbb0  2000cbb0  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000248a3  00000000  00000000  00030103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006e6e  00000000  00000000  000549a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c30  00000000  00000000  0005b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000161c  00000000  00000000  0005d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000342fa  00000000  00000000  0005ea64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f026  00000000  00000000  00092d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f811f  00000000  00000000  000c1d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000079b4  00000000  00000000  001b9ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001c1858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014b34 	.word	0x08014b34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08014b34 	.word	0x08014b34

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
char * SubString(const char * source, int i, int j);
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000ac 	.word	0x200000ac
 80005bc:	20000100 	.word	0x20000100

080005c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	SEGGER_RTT_printf(0, "1\r\n");
 80005c8:	491a      	ldr	r1, [pc, #104]	; (8000634 <StartDefaultTask+0x74>)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f013 fa88 	bl	8013ae0 <SEGGER_RTT_printf>
  MX_LWIP_Init();
 80005d0:	f002 ff22 	bl	8003418 <MX_LWIP_Init>
  SEGGER_RTT_printf(0, "2\r\n");
 80005d4:	4918      	ldr	r1, [pc, #96]	; (8000638 <StartDefaultTask+0x78>)
 80005d6:	2000      	movs	r0, #0
 80005d8:	f013 fa82 	bl	8013ae0 <SEGGER_RTT_printf>
  extern struct netif gnetif;
  SEGGER_RTT_printf(0, "3\r\n");
 80005dc:	4917      	ldr	r1, [pc, #92]	; (800063c <StartDefaultTask+0x7c>)
 80005de:	2000      	movs	r0, #0
 80005e0:	f013 fa7e 	bl	8013ae0 <SEGGER_RTT_printf>
  while(ip4_addr_isany_val(*netif_ip4_addr(&gnetif)))
 80005e4:	e006      	b.n	80005f4 <StartDefaultTask+0x34>
  {
	  SEGGER_RTT_printf(0, "4\r\n");
 80005e6:	4916      	ldr	r1, [pc, #88]	; (8000640 <StartDefaultTask+0x80>)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f013 fa79 	bl	8013ae0 <SEGGER_RTT_printf>
  	osDelay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f003 fcc8 	bl	8003f84 <osDelay>
  while(ip4_addr_isany_val(*netif_ip4_addr(&gnetif)))
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <StartDefaultTask+0x84>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f4      	beq.n	80005e6 <StartDefaultTask+0x26>
  }
  /* definition and creation of lwipTask */
  SEGGER_RTT_printf(0, "5\r\n");
 80005fc:	4912      	ldr	r1, [pc, #72]	; (8000648 <StartDefaultTask+0x88>)
 80005fe:	2000      	movs	r0, #0
 8000600:	f013 fa6e 	bl	8013ae0 <SEGGER_RTT_printf>
  osThreadDef(lwipTask, handleClientTask, osPriorityNormal, 0, 4096);
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <StartDefaultTask+0x8c>)
 8000606:	f107 040c 	add.w	r4, r7, #12
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lwipTaskHandle = osThreadCreate(osThread(lwipTask), NULL);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fc64 	bl	8003eec <osThreadCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <StartDefaultTask+0x90>)
 8000628:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f003 fcaa 	bl	8003f84 <osDelay>
 8000630:	e7fb      	b.n	800062a <StartDefaultTask+0x6a>
 8000632:	bf00      	nop
 8000634:	08017350 	.word	0x08017350
 8000638:	08017354 	.word	0x08017354
 800063c:	08017358 	.word	0x08017358
 8000640:	0801735c 	.word	0x0801735c
 8000644:	20000324 	.word	0x20000324
 8000648:	08017360 	.word	0x08017360
 800064c:	08017370 	.word	0x08017370
 8000650:	20000300 	.word	0x20000300

08000654 <handleClientTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_handleClientTask */
void handleClientTask(void const * argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	SEGGER_RTT_printf(0, "6\r\n");
 800065c:	4903      	ldr	r1, [pc, #12]	; (800066c <handleClientTask+0x18>)
 800065e:	2000      	movs	r0, #0
 8000660:	f013 fa3e 	bl	8013ae0 <SEGGER_RTT_printf>
	  		  break;
	  }
	  osDelay(1);
	}
#endif
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	0801738c 	.word	0x0801738c

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SEGGER_RTT_printf(0, "Application start\r\n");
 8000676:	4918      	ldr	r1, [pc, #96]	; (80006d8 <main+0x68>)
 8000678:	2000      	movs	r0, #0
 800067a:	f013 fa31 	bl	8013ae0 <SEGGER_RTT_printf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fc8f 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f837 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f8b3 	bl	80007f0 <MX_GPIO_Init>
  MX_RNG_Init();
 800068a:	f000 f89d 	bl	80007c8 <MX_RNG_Init>
  SEGGER_RTT_printf(0, "q\r\n");
 800068e:	4913      	ldr	r1, [pc, #76]	; (80006dc <main+0x6c>)
 8000690:	2000      	movs	r0, #0
 8000692:	f013 fa25 	bl	8013ae0 <SEGGER_RTT_printf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <main+0x70>)
 8000698:	1d3c      	adds	r4, r7, #4
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SEGGER_RTT_printf(0, "b\r\n");
 80006a8:	490e      	ldr	r1, [pc, #56]	; (80006e4 <main+0x74>)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f013 fa18 	bl	8013ae0 <SEGGER_RTT_printf>
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fc19 	bl	8003eec <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <main+0x78>)
 80006be:	6013      	str	r3, [r2, #0]
  SEGGER_RTT_printf(0, "a\r\n");
 80006c0:	490a      	ldr	r1, [pc, #40]	; (80006ec <main+0x7c>)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f013 fa0c 	bl	8013ae0 <SEGGER_RTT_printf>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c8:	f003 fbf9 	bl	8003ebe <osKernelStart>
  SEGGER_RTT_printf(0, "c\r\n");
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <main+0x80>)
 80006ce:	2000      	movs	r0, #0
 80006d0:	f013 fa06 	bl	8013ae0 <SEGGER_RTT_printf>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x64>
 80006d6:	bf00      	nop
 80006d8:	08017390 	.word	0x08017390
 80006dc:	080173a4 	.word	0x080173a4
 80006e0:	080173c0 	.word	0x080173c0
 80006e4:	080173a8 	.word	0x080173a8
 80006e8:	20000314 	.word	0x20000314
 80006ec:	080173ac 	.word	0x080173ac
 80006f0:	080173b0 	.word	0x080173b0

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f013 fc1d 	bl	8013f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000740:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <SystemClock_Config+0xd0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000768:	2310      	movs	r3, #16
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800076c:	23c0      	movs	r3, #192	; 0xc0
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f002 f9f1 	bl	8002b64 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000788:	f000 f91a 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fc54 	bl	8003054 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 f905 	bl	80009c0 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_RNG_Init+0x20>)
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <MX_RNG_Init+0x24>)
 80007d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_RNG_Init+0x20>)
 80007d4:	f002 fdf6 	bl	80033c4 <HAL_RNG_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007de:	f000 f8ef 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000304 	.word	0x20000304
 80007ec:	50060800 	.word	0x50060800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b67      	ldr	r3, [pc, #412]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a66      	ldr	r2, [pc, #408]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b60      	ldr	r3, [pc, #384]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a5f      	ldr	r2, [pc, #380]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b5d      	ldr	r3, [pc, #372]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a58      	ldr	r2, [pc, #352]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b56      	ldr	r3, [pc, #344]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a51      	ldr	r2, [pc, #324]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b4f      	ldr	r3, [pc, #316]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a4a      	ldr	r2, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a43      	ldr	r2, [pc, #268]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b4:	483d      	ldr	r0, [pc, #244]	; (80009ac <MX_GPIO_Init+0x1bc>)
 80008b6:	f002 f917 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	483c      	ldr	r0, [pc, #240]	; (80009b0 <MX_GPIO_Init+0x1c0>)
 80008c0:	f002 f912 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4836      	ldr	r0, [pc, #216]	; (80009b4 <MX_GPIO_Init+0x1c4>)
 80008dc:	f001 ff58 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	482c      	ldr	r0, [pc, #176]	; (80009ac <MX_GPIO_Init+0x1bc>)
 80008fa:	f001 ff49 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000910:	2307      	movs	r3, #7
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4827      	ldr	r0, [pc, #156]	; (80009b8 <MX_GPIO_Init+0x1c8>)
 800091c:	f001 ff38 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481e      	ldr	r0, [pc, #120]	; (80009b0 <MX_GPIO_Init+0x1c0>)
 8000938:	f001 ff2a 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_GPIO_Init+0x1c0>)
 8000950:	f001 ff1e 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000954:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0x1cc>)
 8000972:	f001 ff0d 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_GPIO_Init+0x1cc>)
 800098c:	f001 ff00 	bl	8002790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2105      	movs	r1, #5
 8000994:	2028      	movs	r0, #40	; 0x28
 8000996:	f000 fc74 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099a:	2028      	movs	r0, #40	; 0x28
 800099c:	f000 fc8d 	bl	80012ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a0:	bf00      	nop
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40021800 	.word	0x40021800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40020000 	.word	0x40020000

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_MspInit+0x54>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_MspInit+0x54>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x54>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_MspInit+0x54>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_MspInit+0x54>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_MspInit+0x54>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	f06f 0001 	mvn.w	r0, #1
 8000a12:	f000 fc36 	bl	8001282 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_RNG_MspInit+0x3c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10d      	bne.n	8000a52 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_RNG_MspInit+0x40>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <HAL_RNG_MspInit+0x40>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6353      	str	r3, [r2, #52]	; 0x34
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_RNG_MspInit+0x40>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	50060800 	.word	0x50060800
 8000a64:	40023800 	.word	0x40023800

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 fad4 	bl	8001044 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a9c:	f005 fa5e 	bl	8005f5c <xTaskGetSchedulerState>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d001      	beq.n	8000aaa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aa6:	f005 fe37 	bl	8006718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}

08000aae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ab2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab6:	f002 f831 	bl	8002b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <ETH_IRQHandler+0x10>)
 8000ac6:	f000 ff8d 	bl	80019e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20004e38 	.word	0x20004e38

08000ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return 1;
 8000ad8:	2301      	movs	r3, #1
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_kill>:

int _kill(int pid, int sig)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <_kill+0x20>)
 8000af0:	2216      	movs	r2, #22
 8000af2:	601a      	str	r2, [r3, #0]
  return -1;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	2000c5a8 	.word	0x2000c5a8

08000b08 <_exit>:

void _exit (int status)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ffe5 	bl	8000ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b1a:	e7fe      	b.n	8000b1a <_exit+0x12>

08000b1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2e:	f3af 8000 	nop.w
 8000b32:	4601      	mov	r1, r0
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <_read+0x12>
  }

  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e009      	b.n	8000b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf1      	blt.n	8000b68 <_write+0x12>
  }
  return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d205      	bcs.n	8000c34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <_sbrk+0x6c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	20030000 	.word	0x20030000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000318 	.word	0x20000318
 8000c60:	2000cbb0 	.word	0x2000cbb0
 8000c64:	2000c5a8 	.word	0x2000c5a8

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f013 f9a1 	bl	8014000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fcd7 	bl	8000670 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cd0:	0801a538 	.word	0x0801a538
  ldr r2, =_sbss
 8000cd4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cd8:	2000cbb0 	.word	0x2000cbb0

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>

08000cde <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <LAN8742_RegisterBusIO+0x28>
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <LAN8742_RegisterBusIO+0x28>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <LAN8742_RegisterBusIO+0x28>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e014      	b.n	8000d36 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d17c      	bne.n	8000e5c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2220      	movs	r2, #32
 8000d74:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e01c      	b.n	8000db6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	f107 0208 	add.w	r2, r7, #8
 8000d84:	2112      	movs	r1, #18
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	4798      	blx	r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	da03      	bge.n	8000d98 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d90:	f06f 0304 	mvn.w	r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d96:	e00b      	b.n	8000db0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d105      	bne.n	8000db0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
         break;
 8000dae:	e005      	b.n	8000dbc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b1f      	cmp	r3, #31
 8000dba:	d9df      	bls.n	8000d7c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b1f      	cmp	r3, #31
 8000dc2:	d902      	bls.n	8000dca <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dc4:	f06f 0302 	mvn.w	r3, #2
 8000dc8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d145      	bne.n	8000e5c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6810      	ldr	r0, [r2, #0]
 8000dd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4798      	blx	r3
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db37      	blt.n	8000e56 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6810      	ldr	r0, [r2, #0]
 8000dee:	f107 0208 	add.w	r2, r7, #8
 8000df2:	2100      	movs	r1, #0
 8000df4:	4798      	blx	r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db28      	blt.n	8000e4e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4798      	blx	r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e06:	e01c      	b.n	8000e42 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4798      	blx	r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e1a:	d80e      	bhi.n	8000e3a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6810      	ldr	r0, [r2, #0]
 8000e24:	f107 0208 	add.w	r2, r7, #8
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4798      	blx	r3
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da07      	bge.n	8000e42 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e32:	f06f 0304 	mvn.w	r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
                 break;
 8000e38:	e010      	b.n	8000e5c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e3a:	f06f 0301 	mvn.w	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
               break;
 8000e40:	e00c      	b.n	8000e5c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1dd      	bne.n	8000e08 <LAN8742_Init+0xc6>
 8000e4c:	e006      	b.n	8000e5c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e4e:	f06f 0304 	mvn.w	r3, #4
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	e002      	b.n	8000e5c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e56:	f06f 0303 	mvn.w	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d112      	bne.n	8000e88 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4798      	blx	r3
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e6c:	bf00      	nop
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4798      	blx	r3
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e80:	d9f5      	bls.n	8000e6e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e88:	693b      	ldr	r3, [r7, #16]
 }
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6810      	ldr	r0, [r2, #0]
 8000ea6:	f107 020c 	add.w	r2, r7, #12
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4798      	blx	r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da02      	bge.n	8000eba <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eb4:	f06f 0304 	mvn.w	r3, #4
 8000eb8:	e06e      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6810      	ldr	r0, [r2, #0]
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4798      	blx	r3
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da02      	bge.n	8000ed6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ed0:	f06f 0304 	mvn.w	r3, #4
 8000ed4:	e060      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e059      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6810      	ldr	r0, [r2, #0]
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4798      	blx	r3
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da02      	bge.n	8000f00 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000efa:	f06f 0304 	mvn.w	r3, #4
 8000efe:	e04b      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d11b      	bne.n	8000f42 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <LAN8742_GetLinkState+0x90>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e03a      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e033      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e02c      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e02a      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6810      	ldr	r0, [r2, #0]
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	211f      	movs	r1, #31
 8000f50:	4798      	blx	r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da02      	bge.n	8000f5e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f58:	f06f 0304 	mvn.w	r3, #4
 8000f5c:	e01c      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	e015      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 031c 	and.w	r3, r3, #28
 8000f72:	2b18      	cmp	r3, #24
 8000f74:	d101      	bne.n	8000f7a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f76:	2302      	movs	r3, #2
 8000f78:	e00e      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f003 031c 	and.w	r3, r3, #28
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d101      	bne.n	8000f88 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e007      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 031c 	and.w	r3, r3, #28
 8000f8e:	2b14      	cmp	r3, #20
 8000f90:	d101      	bne.n	8000f96 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f92:	2304      	movs	r3, #4
 8000f94:	e000      	b.n	8000f98 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f96:	2305      	movs	r3, #5
    }				
  }
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f94f 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fcfa 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f967 	bl	80012d6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f92f 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000031c 	.word	0x2000031c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000031c 	.word	0x2000031c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e06c      	b.n	80013dc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2223      	movs	r2, #35	; 0x23
 8001310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f002 fb83 	bl	8003a20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <HAL_ETH_Init+0xf4>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <HAL_ETH_Init+0xf4>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_ETH_Init+0xf4>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_ETH_Init+0xf8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <HAL_ETH_Init+0xf8>)
 800133c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001340:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_ETH_Init+0xf8>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <HAL_ETH_Init+0xf8>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_ETH_Init+0xf8>)
 8001352:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800136a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff fe7e 	bl	800106c <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001372:	e011      	b.n	8001398 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001374:	f7ff fe7a 	bl	800106c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001382:	d909      	bls.n	8001398 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2204      	movs	r2, #4
 8001388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	22e0      	movs	r2, #224	; 0xe0
 8001390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e021      	b.n	80013dc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1e4      	bne.n	8001374 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 ff4a 	bl	8002244 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fff1 	bl	8002398 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 f847 	bl	800244a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	461a      	mov	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 ffaf 	bl	8002328 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2210      	movs	r2, #16
 80013d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40013800 	.word	0x40013800

080013ec <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d17f      	bne.n	80014fe <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2223      	movs	r2, #35	; 0x23
 8001402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001430:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001444:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f9f8 	bl	8001844 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fe09 	bl	8001084 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0204 	orr.w	r2, r2, #4
 8001488:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fdf6 	bl	8001084 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fd70 	bl	8001f86 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014bc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014d4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80014e8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80014ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2223      	movs	r2, #35	; 0x23
 80014f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
  }
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001516:	2b23      	cmp	r3, #35	; 0x23
 8001518:	d170      	bne.n	80015fc <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2223      	movs	r2, #35	; 0x23
 800151e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001534:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001538:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800153c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001554:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0204 	bic.w	r2, r2, #4
 800157c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fd7c 	bl	8001084 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fcf6 	bl	8001f86 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0208 	bic.w	r2, r2, #8
 80015a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fd66 	bl	8001084 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00e      	b.n	80015e4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	3212      	adds	r2, #18
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d9ed      	bls.n	80015c6 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2210      	movs	r2, #16
 80015f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
  }
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e045      	b.n	80016b6 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001630:	2b23      	cmp	r3, #35	; 0x23
 8001632:	d13f      	bne.n	80016b4 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800163c:	2201      	movs	r2, #1
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 ff6f 	bl	8002524 <ETH_Prepare_Tx_Descriptors>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e02a      	b.n	80016b6 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001660:	f3bf 8f4f 	dsb	sy
}
 8001664:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b03      	cmp	r3, #3
 8001676:	d904      	bls.n	8001682 <HAL_ETH_Transmit_IT+0x7c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	1f1a      	subs	r2, r3, #4
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00d      	beq.n	80016b0 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	461a      	mov	r2, r3
 800169e:	2304      	movs	r3, #4
 80016a0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016aa:	461a      	mov	r2, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
  }
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b088      	sub	sp, #32
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0a8      	b.n	800183c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f0:	2b23      	cmp	r3, #35	; 0x23
 80016f2:	d001      	beq.n	80016f8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0a1      	b.n	800183c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	3212      	adds	r2, #18
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800170e:	f1c3 0304 	rsb	r3, r3, #4
 8001712:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001714:	e06a      	b.n	80017ec <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_ETH_ReadData+0x88>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d040      	beq.n	80017c8 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00c      	beq.n	800178a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800177a:	3b04      	subs	r3, #4
 800177c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017a2:	461a      	mov	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f002 fb14 	bl	8003dd4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	441a      	add	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d902      	bls.n	80017da <HAL_ETH_ReadData+0x11c>
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3b04      	subs	r3, #4
 80017d8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	3212      	adds	r2, #18
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db06      	blt.n	8001802 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d202      	bcs.n	8001802 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d089      	beq.n	8001716 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f814 	bl	8001844 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001850:	2301      	movs	r3, #1
 8001852:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001858:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	3212      	adds	r2, #18
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800186a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800186c:	e040      	b.n	80018f0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d112      	bne.n	800189c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fa7a 	bl	8003d74 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	74fb      	strb	r3, [r7, #19]
 800188a:	e007      	b.n	800189c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	461a      	mov	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	461a      	mov	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d026      	beq.n	80018f0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <ETH_UpdateDescriptor+0xe4>)
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	e003      	b.n	80018ba <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80018b8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018ba:	f3bf 8f5f 	dmb	sy
}
 80018be:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d902      	bls.n	80018de <ETH_UpdateDescriptor+0x9a>
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3b04      	subs	r3, #4
 80018dc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	3212      	adds	r2, #18
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	617b      	str	r3, [r7, #20]
      desccount--;
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <ETH_UpdateDescriptor+0xb8>
 80018f6:	7cfb      	ldrb	r3, [r7, #19]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1b8      	bne.n	800186e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	429a      	cmp	r2, r3
 8001904:	d00c      	beq.n	8001920 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	461a      	mov	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	80004600 	.word	0x80004600

0800192c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3318      	adds	r3, #24
 8001938:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800194a:	e03f      	b.n	80019cc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800194c:	2301      	movs	r3, #1
 800194e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3b01      	subs	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3304      	adds	r3, #4
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3301      	adds	r3, #1
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d028      	beq.n	80019cc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db1b      	blt.n	80019c8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	3304      	adds	r3, #4
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fa59 	bl	8003e54 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	3304      	adds	r3, #4
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	3301      	adds	r3, #1
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c6:	e001      	b.n	80019cc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_ETH_ReleaseTxPacket+0xac>
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1b9      	bne.n	800194c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	2b40      	cmp	r3, #64	; 0x40
 80019fc:	d112      	bne.n	8001a24 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d109      	bne.n	8001a24 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_ETH_IRQHandler+0x178>)
 8001a1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f001 fd62 	bl	80034e8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d113      	bne.n	8001a5e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d10a      	bne.n	8001a5e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a50:	461a      	mov	r2, r3
 8001a52:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001a56:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f001 fd55 	bl	8003508 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a70:	d14c      	bne.n	8001b0c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a84:	d142      	bne.n	8001b0c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8c:	f043 0208 	orr.w	r2, r3, #8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_ETH_IRQHandler+0x17c>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ad4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	22e0      	movs	r2, #224	; 0xe0
 8001ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ade:	e012      	b.n	8001b06 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	f248 6380 	movw	r3, #34432	; 0x8680
 8001aee:	4013      	ands	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afe:	461a      	mov	r2, r3
 8001b00:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b04:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f001 fd0e 	bl	8003528 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d10e      	bne.n	8001b38 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f81c 	bl	8001b68 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_ETH_IRQHandler+0x180>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_ETH_IRQHandler+0x180>)
 8001b46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b4a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f815 	bl	8001b7c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	00010040 	.word	0x00010040
 8001b60:	007e2000 	.word	0x007e2000
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 031c 	and.w	r3, r3, #28
 8001bac:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	02db      	lsls	r3, r3, #11
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	019b      	lsls	r3, r3, #6
 8001bbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f023 0302 	bic.w	r3, r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001be0:	f7ff fa44 	bl	800106c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001be6:	e00d      	b.n	8001c04 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001be8:	f7ff fa40 	bl	800106c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d301      	bcc.n	8001bfc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e010      	b.n	8001c1e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ec      	bne.n	8001be8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 031c 	and.w	r3, r3, #28
 8001c42:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	02db      	lsls	r3, r3, #11
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c80:	f7ff f9f4 	bl	800106c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c86:	e00d      	b.n	8001ca4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c88:	f7ff f9f0 	bl	800106c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c96:	d301      	bcc.n	8001c9c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e009      	b.n	8001cb0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ec      	bne.n	8001c88 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0d9      	b.n	8001e80 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bf0c      	ite	eq
 8001d8a:	2301      	moveq	r3, #1
 8001d8c:	2300      	movne	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	0c1b      	lsrs	r3, r3, #16
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e00b      	b.n	8001eb8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001eaa:	6839      	ldr	r1, [r7, #0]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f88f 	bl	8001fd0 <ETH_SetMACConfig>

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 031c 	bic.w	r3, r3, #28
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ed8:	f001 fa68 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 8001edc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d908      	bls.n	8001ef8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d804      	bhi.n	8001ef8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e027      	b.n	8001f48 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d908      	bls.n	8001f12 <HAL_ETH_SetMDIOClockRange+0x52>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d204      	bcs.n	8001f12 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f043 030c 	orr.w	r3, r3, #12
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e01a      	b.n	8001f48 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d303      	bcc.n	8001f22 <HAL_ETH_SetMDIOClockRange+0x62>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d911      	bls.n	8001f46 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d908      	bls.n	8001f3c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d804      	bhi.n	8001f3c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e005      	b.n	8001f48 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f043 0310 	orr.w	r3, r3, #16
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e000      	b.n	8001f48 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f46:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	01312cff 	.word	0x01312cff
 8001f5c:	02160ebf 	.word	0x02160ebf
 8001f60:	03938700 	.word	0x03938700
 8001f64:	05f5e0ff 	.word	0x05f5e0ff
 8001f68:	08f0d17f 	.word	0x08f0d17f

08001f6c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7ff f864 	bl	8001084 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc6:	6193      	str	r3, [r2, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4b51      	ldr	r3, [pc, #324]	; (800212c <ETH_SetMACConfig+0x15c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7c1b      	ldrb	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <ETH_SetMACConfig+0x28>
 8001ff2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ff6:	e000      	b.n	8001ffa <ETH_SetMACConfig+0x2a>
 8001ff8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	7c5b      	ldrb	r3, [r3, #17]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetMACConfig+0x38>
 8002002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002006:	e000      	b.n	800200a <ETH_SetMACConfig+0x3a>
 8002008:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800200a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002010:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7fdb      	ldrb	r3, [r3, #31]
 8002016:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002018:	431a      	orrs	r2, r3
                        macconf->Speed |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800201e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	7f92      	ldrb	r2, [r2, #30]
 8002024:	2a00      	cmp	r2, #0
 8002026:	d102      	bne.n	800202e <ETH_SetMACConfig+0x5e>
 8002028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202c:	e000      	b.n	8002030 <ETH_SetMACConfig+0x60>
 800202e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002030:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7f1b      	ldrb	r3, [r3, #28]
 8002036:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002038:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800203e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	791b      	ldrb	r3, [r3, #4]
 8002044:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800204e:	2a00      	cmp	r2, #0
 8002050:	d102      	bne.n	8002058 <ETH_SetMACConfig+0x88>
 8002052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002056:	e000      	b.n	800205a <ETH_SetMACConfig+0x8a>
 8002058:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800205a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	7bdb      	ldrb	r3, [r3, #15]
 8002060:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002062:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002068:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002070:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002072:	4313      	orrs	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800208a:	2001      	movs	r0, #1
 800208c:	f7fe fffa 	bl	8001084 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020b6:	2a00      	cmp	r2, #0
 80020b8:	d101      	bne.n	80020be <ETH_SetMACConfig+0xee>
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	e000      	b.n	80020c0 <ETH_SetMACConfig+0xf0>
 80020be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d101      	bne.n	80020d6 <ETH_SetMACConfig+0x106>
 80020d2:	2208      	movs	r2, #8
 80020d4:	e000      	b.n	80020d8 <ETH_SetMACConfig+0x108>
 80020d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020e0:	2a01      	cmp	r2, #1
 80020e2:	d101      	bne.n	80020e8 <ETH_SetMACConfig+0x118>
 80020e4:	2204      	movs	r2, #4
 80020e6:	e000      	b.n	80020ea <ETH_SetMACConfig+0x11a>
 80020e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d101      	bne.n	80020fa <ETH_SetMACConfig+0x12a>
 80020f6:	2202      	movs	r2, #2
 80020f8:	e000      	b.n	80020fc <ETH_SetMACConfig+0x12c>
 80020fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020fc:	4313      	orrs	r3, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002114:	2001      	movs	r0, #1
 8002116:	f7fe ffb5 	bl	8001084 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	619a      	str	r2, [r3, #24]
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	ff20810f 	.word	0xff20810f

08002130 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <ETH_SetDMAConfig+0x110>)
 800214a:	4013      	ands	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	7b1b      	ldrb	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <ETH_SetDMAConfig+0x2c>
 8002156:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800215a:	e000      	b.n	800215e <ETH_SetDMAConfig+0x2e>
 800215c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7b5b      	ldrb	r3, [r3, #13]
 8002162:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002164:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	7f52      	ldrb	r2, [r2, #29]
 800216a:	2a00      	cmp	r2, #0
 800216c:	d102      	bne.n	8002174 <ETH_SetDMAConfig+0x44>
 800216e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002172:	e000      	b.n	8002176 <ETH_SetDMAConfig+0x46>
 8002174:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002176:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	7b9b      	ldrb	r3, [r3, #14]
 800217c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800217e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002184:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
 800218a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800218c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	7f9b      	ldrb	r3, [r3, #30]
 8002192:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002194:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800219a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021a4:	4313      	orrs	r3, r2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b4:	461a      	mov	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7fe ff5c 	bl	8001084 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002202:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002208:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002216:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe ff2d 	bl	8001084 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	f8de3f23 	.word	0xf8de3f23

08002244 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0a6      	sub	sp, #152	; 0x98
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002280:	2300      	movs	r3, #0
 8002282:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800228a:	2300      	movs	r3, #0
 800228c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fe86 	bl	8001fd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002304:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff08 	bl	8002130 <ETH_SetDMAConfig>
}
 8002320:	bf00      	nop
 8002322:	3798      	adds	r7, #152	; 0x98
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3305      	adds	r3, #5
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	3204      	adds	r2, #4
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <ETH_MACAddressConfig+0x68>)
 800234a:	4413      	add	r3, r2
 800234c:	461a      	mov	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3303      	adds	r3, #3
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	061a      	lsls	r2, r3, #24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3302      	adds	r3, #2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	4313      	orrs	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <ETH_MACAddressConfig+0x6c>)
 800237a:	4413      	add	r3, r2
 800237c:	461a      	mov	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	6013      	str	r3, [r2, #0]
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40028040 	.word	0x40028040
 8002394:	40028044 	.word	0x40028044

08002398 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e03e      	b.n	8002424 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	3206      	adds	r2, #6
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d80c      	bhi.n	8002408 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68d9      	ldr	r1, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	e004      	b.n	8002412 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	461a      	mov	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d9bd      	bls.n	80023a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	611a      	str	r2, [r3, #16]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e046      	b.n	80024e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6919      	ldr	r1, [r3, #16]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002494:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800249c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	3212      	adds	r2, #18
 80024b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d80c      	bhi.n	80024d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6919      	ldr	r1, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	e004      	b.n	80024e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d9b5      	bls.n	8002458 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002516:	60da      	str	r2, [r3, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002524:	b480      	push	{r7}
 8002526:	b08d      	sub	sp, #52	; 0x34
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3318      	adds	r3, #24
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002566:	d007      	beq.n	8002578 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	3304      	adds	r3, #4
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002578:	2302      	movs	r3, #2
 800257a:	e103      	b.n	8002784 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3301      	adds	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002594:	f023 031f 	bic.w	r3, r3, #31
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	6852      	ldr	r2, [r2, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002602:	f3bf 8f5f 	dmb	sy
}
 8002606:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002614:	e084      	b.n	8002720 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e005      	b.n	8002642 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	3301      	adds	r3, #1
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	2b03      	cmp	r3, #3
 800264c:	d902      	bls.n	8002654 <ETH_Prepare_Tx_Descriptors+0x130>
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	3b04      	subs	r3, #4
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002676:	d007      	beq.n	8002688 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	3304      	adds	r3, #4
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d029      	beq.n	80026dc <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002696:	2300      	movs	r3, #0
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
 800269a:	e019      	b.n	80026d0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800269c:	f3bf 8f5f 	dmb	sy
}
 80026a0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	3301      	adds	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d902      	bls.n	80026c0 <ETH_Prepare_Tx_Descriptors+0x19c>
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	3b04      	subs	r3, #4
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	3301      	adds	r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3e1      	bcc.n	800269c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	e053      	b.n	8002784 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3301      	adds	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026fa:	f023 031f 	bic.w	r3, r3, #31
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	6852      	ldr	r2, [r2, #4]
 8002702:	431a      	orrs	r2, r3
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	3301      	adds	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800270e:	f3bf 8f5f 	dmb	sy
}
 8002712:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f47f af76 	bne.w	8002616 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e005      	b.n	800274a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	3304      	adds	r3, #4
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800276c:	b672      	cpsid	i
}
 800276e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800277e:	b662      	cpsie	i
}
 8002780:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3734      	adds	r7, #52	; 0x34
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e177      	b.n	8002a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8166 	bne.w	8002a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80c0 	beq.w	8002a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a61      	ldr	r2, [pc, #388]	; (8002ab8 <HAL_GPIO_Init+0x328>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_GPIO_Init+0x32c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d037      	beq.n	80029ce <HAL_GPIO_Init+0x23e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <HAL_GPIO_Init+0x330>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_GPIO_Init+0x23a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a56      	ldr	r2, [pc, #344]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02b      	beq.n	80029c6 <HAL_GPIO_Init+0x236>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a55      	ldr	r2, [pc, #340]	; (8002ac8 <HAL_GPIO_Init+0x338>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x232>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_GPIO_Init+0x33c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x22e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a53      	ldr	r2, [pc, #332]	; (8002ad0 <HAL_GPIO_Init+0x340>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x22a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_GPIO_Init+0x344>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <HAL_GPIO_Init+0x348>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a50      	ldr	r2, [pc, #320]	; (8002adc <HAL_GPIO_Init+0x34c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4f      	ldr	r2, [pc, #316]	; (8002ae0 <HAL_GPIO_Init+0x350>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x21a>
 80029a6:	2309      	movs	r3, #9
 80029a8:	e012      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029aa:	230a      	movs	r3, #10
 80029ac:	e010      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ae:	2308      	movs	r3, #8
 80029b0:	e00e      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00c      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029b6:	2306      	movs	r3, #6
 80029b8:	e00a      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ba:	2305      	movs	r3, #5
 80029bc:	e008      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029be:	2304      	movs	r3, #4
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029c2:	2303      	movs	r3, #3
 80029c4:	e004      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ce:	2300      	movs	r3, #0
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f002 0203 	and.w	r2, r2, #3
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4093      	lsls	r3, r2
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e0:	4935      	ldr	r1, [pc, #212]	; (8002ab8 <HAL_GPIO_Init+0x328>)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a42:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	f67f ae84 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40021c00 	.word	0x40021c00
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022400 	.word	0x40022400
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f806 	bl	8002b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa26 	bl	800106c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa22 	bl	800106c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fa12 	bl	800106c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fa0e 	bl	800106c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe f9c7 	bl	800106c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe f9c3 	bl	800106c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f9a6 	bl	800106c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe f9a2 	bl	800106c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f986 	bl	800106c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe f982 	bl	800106c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f96f 	bl	800106c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe f96b 	bl	800106c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe f92b 	bl	800106c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe f927 	bl	800106c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f8ec 	bl	800106c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe f8e8 	bl	800106c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe f8d6 	bl	800106c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fe f8d2 	bl	800106c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f8a6 	bl	800106c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe f8a2 	bl	800106c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fe f87b 	bl	800106c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe f877 	bl	800106c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f864 	bl	800106c <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f860 	bl	800106c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fd ff92 	bl	800106c <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd ff8e 	bl	800106c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fef2 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	0801a2c8 	.word	0x0801a2c8
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b090      	sub	sp, #64	; 0x40
 8003226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003230:	2300      	movs	r3, #0
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d00d      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 8003244:	2b08      	cmp	r3, #8
 8003246:	f200 80a1 	bhi.w	800338c <HAL_RCC_GetSysClockFreq+0x16c>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x3a>
 8003252:	e09b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003258:	e09b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325a:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800325e:	e098      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	2200      	movs	r2, #0
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	627a      	str	r2, [r7, #36]	; 0x24
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003288:	2100      	movs	r1, #0
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	fb03 f201 	mul.w	r2, r3, r1
 8003290:	2300      	movs	r3, #0
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	4413      	add	r3, r2
 8003298:	4a43      	ldr	r2, [pc, #268]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329a:	fba0 1202 	umull	r1, r2, r0, r2
 800329e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a0:	460a      	mov	r2, r1
 80032a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	2200      	movs	r2, #0
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	61fa      	str	r2, [r7, #28]
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ba:	f7fc ffe9 	bl	8000290 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4613      	mov	r3, r2
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c6:	e053      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	617a      	str	r2, [r7, #20]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032da:	f04f 0b00 	mov.w	fp, #0
 80032de:	4652      	mov	r2, sl
 80032e0:	465b      	mov	r3, fp
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ebb2 080a 	subs.w	r8, r2, sl
 80032fa:	eb63 090b 	sbc.w	r9, r3, fp
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800330a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800330e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003312:	ebb2 0408 	subs.w	r4, r2, r8
 8003316:	eb63 0509 	sbc.w	r5, r3, r9
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	00eb      	lsls	r3, r5, #3
 8003324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	4614      	mov	r4, r2
 800332c:	461d      	mov	r5, r3
 800332e:	eb14 030a 	adds.w	r3, r4, sl
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	eb45 030b 	adc.w	r3, r5, fp
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003346:	4629      	mov	r1, r5
 8003348:	028b      	lsls	r3, r1, #10
 800334a:	4621      	mov	r1, r4
 800334c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003350:	4621      	mov	r1, r4
 8003352:	028a      	lsls	r2, r1, #10
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	2200      	movs	r2, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	60fa      	str	r2, [r7, #12]
 8003360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003364:	f7fc ff94 	bl	8000290 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003394:	4618      	mov	r0, r3
 8003396:	3740      	adds	r7, #64	; 0x40
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01c      	b.n	8003410 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	795b      	ldrb	r3, [r3, #5]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fb1c 	bl	8000a24 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0204 	orr.w	r2, r2, #4
 8003400:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
	SEGGER_RTT_printf(0, "open MX_LWIP_Init\r\n");
 800341e:	4924      	ldr	r1, [pc, #144]	; (80034b0 <MX_LWIP_Init+0x98>)
 8003420:	2000      	movs	r0, #0
 8003422:	f010 fb5d 	bl	8013ae0 <SEGGER_RTT_printf>
  tcpip_init( NULL, NULL );
 8003426:	2100      	movs	r1, #0
 8003428:	2000      	movs	r0, #0
 800342a:	f003 fd47 	bl	8006ebc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800342e:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <MX_LWIP_Init+0x9c>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <MX_LWIP_Init+0xa0>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <MX_LWIP_Init+0xa4>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
    IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
    IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif
  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <MX_LWIP_Init+0xa8>)
 8003442:	9302      	str	r3, [sp, #8]
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <MX_LWIP_Init+0xac>)
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2300      	movs	r3, #0
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <MX_LWIP_Init+0xa4>)
 800344e:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <MX_LWIP_Init+0xa0>)
 8003450:	4918      	ldr	r1, [pc, #96]	; (80034b4 <MX_LWIP_Init+0x9c>)
 8003452:	481d      	ldr	r0, [pc, #116]	; (80034c8 <MX_LWIP_Init+0xb0>)
 8003454:	f004 fafc 	bl	8007a50 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003458:	481b      	ldr	r0, [pc, #108]	; (80034c8 <MX_LWIP_Init+0xb0>)
 800345a:	f004 fcb3 	bl	8007dc4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <MX_LWIP_Init+0xb0>)
 8003460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <MX_LWIP_Init+0x60>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003470:	4815      	ldr	r0, [pc, #84]	; (80034c8 <MX_LWIP_Init+0xb0>)
 8003472:	f004 fcb7 	bl	8007de4 <netif_set_up>
 8003476:	e002      	b.n	800347e <MX_LWIP_Init+0x66>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003478:	4813      	ldr	r0, [pc, #76]	; (80034c8 <MX_LWIP_Init+0xb0>)
 800347a:	f004 fd1f 	bl	8007ebc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800347e:	4913      	ldr	r1, [pc, #76]	; (80034cc <MX_LWIP_Init+0xb4>)
 8003480:	4811      	ldr	r0, [pc, #68]	; (80034c8 <MX_LWIP_Init+0xb0>)
 8003482:	f004 fdb5 	bl	8007ff0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <MX_LWIP_Init+0xb8>)
 8003488:	1d3c      	adds	r4, r7, #4
 800348a:	461d      	mov	r5, r3
 800348c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003490:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	490b      	ldr	r1, [pc, #44]	; (80034c8 <MX_LWIP_Init+0xb0>)
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd25 	bl	8003eec <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Start DHCP negotiation for a network interface (IPv4) */
#if LWIP_DHCP
  dhcp_start(&gnetif);
 80034a2:	4809      	ldr	r0, [pc, #36]	; (80034c8 <MX_LWIP_Init+0xb0>)
 80034a4:	f00b ff0a 	bl	800f2bc <dhcp_start>
#endif
/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80034a8:	bf00      	nop
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bdb0      	pop	{r4, r5, r7, pc}
 80034b0:	080173dc 	.word	0x080173dc
 80034b4:	20000358 	.word	0x20000358
 80034b8:	2000035c 	.word	0x2000035c
 80034bc:	20000360 	.word	0x20000360
 80034c0:	08006df9 	.word	0x08006df9
 80034c4:	08003975 	.word	0x08003975
 80034c8:	20000320 	.word	0x20000320
 80034cc:	080034d5 	.word	0x080034d5
 80034d0:	080173f8 	.word	0x080173f8

080034d4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_ETH_RxCpltCallback+0x1c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fe43 	bl	8004180 <osSemaphoreRelease>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20004e30 	.word	0x20004e30

08003508 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_ETH_TxCpltCallback+0x1c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fe33 	bl	8004180 <osSemaphoreRelease>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20004e34 	.word	0x20004e34

08003528 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fd1b 	bl	8001f6c <HAL_ETH_GetDMAError>
 8003536:	4603      	mov	r3, r0
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d104      	bne.n	800354a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_ETH_ErrorCallback+0x2c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fe1b 	bl	8004180 <osSemaphoreRelease>
  }
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20004e30 	.word	0x20004e30

08003558 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b0a8      	sub	sp, #160	; 0xa0
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8003572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003576:	2264      	movs	r2, #100	; 0x64
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f010 fce1 	bl	8013f42 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003580:	4b85      	ldr	r3, [pc, #532]	; (8003798 <low_level_init+0x240>)
 8003582:	4a86      	ldr	r2, [pc, #536]	; (800379c <low_level_init+0x244>)
 8003584:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8003592:	23e1      	movs	r3, #225	; 0xe1
 8003594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80035aa:	4a7b      	ldr	r2, [pc, #492]	; (8003798 <low_level_init+0x240>)
 80035ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80035b2:	4b79      	ldr	r3, [pc, #484]	; (8003798 <low_level_init+0x240>)
 80035b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035b8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80035ba:	4b77      	ldr	r3, [pc, #476]	; (8003798 <low_level_init+0x240>)
 80035bc:	4a78      	ldr	r2, [pc, #480]	; (80037a0 <low_level_init+0x248>)
 80035be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80035c0:	4b75      	ldr	r3, [pc, #468]	; (8003798 <low_level_init+0x240>)
 80035c2:	4a78      	ldr	r2, [pc, #480]	; (80037a4 <low_level_init+0x24c>)
 80035c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80035c6:	4b74      	ldr	r3, [pc, #464]	; (8003798 <low_level_init+0x240>)
 80035c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80035cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80035ce:	4872      	ldr	r0, [pc, #456]	; (8003798 <low_level_init+0x240>)
 80035d0:	f7fd fe8e 	bl	80012f0 <HAL_ETH_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80035da:	2238      	movs	r2, #56	; 0x38
 80035dc:	2100      	movs	r1, #0
 80035de:	4872      	ldr	r0, [pc, #456]	; (80037a8 <low_level_init+0x250>)
 80035e0:	f010 fcaf 	bl	8013f42 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80035e4:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <low_level_init+0x250>)
 80035e6:	2221      	movs	r2, #33	; 0x21
 80035e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80035ea:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <low_level_init+0x250>)
 80035ec:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80035f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80035f2:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <low_level_init+0x250>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80035f8:	486c      	ldr	r0, [pc, #432]	; (80037ac <low_level_init+0x254>)
 80035fa:	f004 f8e3 	bl	80077c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2206      	movs	r2, #6
 8003602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003606:	4b64      	ldr	r3, [pc, #400]	; (8003798 <low_level_init+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003612:	4b61      	ldr	r3, [pc, #388]	; (8003798 <low_level_init+0x240>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	785a      	ldrb	r2, [r3, #1]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800361e:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <low_level_init+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	789a      	ldrb	r2, [r3, #2]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <low_level_init+0x240>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	78da      	ldrb	r2, [r3, #3]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003636:	4b58      	ldr	r3, [pc, #352]	; (8003798 <low_level_init+0x240>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	791a      	ldrb	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003642:	4b55      	ldr	r3, [pc, #340]	; (8003798 <low_level_init+0x240>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	795a      	ldrb	r2, [r3, #5]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800365c:	f043 030a 	orr.w	r3, r3, #10
 8003660:	b2da      	uxtb	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8003668:	2203      	movs	r2, #3
 800366a:	2100      	movs	r1, #0
 800366c:	2001      	movs	r0, #1
 800366e:	f001 f82d 	bl	80046cc <xQueueGenericCreate>
 8003672:	4603      	mov	r3, r0
 8003674:	4a4e      	ldr	r2, [pc, #312]	; (80037b0 <low_level_init+0x258>)
 8003676:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8003678:	2203      	movs	r2, #3
 800367a:	2100      	movs	r1, #0
 800367c:	2001      	movs	r0, #1
 800367e:	f001 f825 	bl	80046cc <xQueueGenericCreate>
 8003682:	4603      	mov	r3, r0
 8003684:	4a4b      	ldr	r2, [pc, #300]	; (80037b4 <low_level_init+0x25c>)
 8003686:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003688:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <low_level_init+0x260>)
 800368a:	f107 0408 	add.w	r4, r7, #8
 800368e:	461d      	mov	r5, r3
 8003690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800369c:	f107 0308 	add.w	r3, r7, #8
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fc22 	bl	8003eec <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80036a8:	4944      	ldr	r1, [pc, #272]	; (80037bc <low_level_init+0x264>)
 80036aa:	4845      	ldr	r0, [pc, #276]	; (80037c0 <low_level_init+0x268>)
 80036ac:	f7fd fb17 	bl	8000cde <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80036b0:	4843      	ldr	r0, [pc, #268]	; (80037c0 <low_level_init+0x268>)
 80036b2:	f7fd fb46 	bl	8000d42 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80036b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d165      	bne.n	800378a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80036be:	4840      	ldr	r0, [pc, #256]	; (80037c0 <low_level_init+0x268>)
 80036c0:	f7fd fbe7 	bl	8000e92 <LAN8742_GetLinkState>
 80036c4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80036c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	dc06      	bgt.n	80036de <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f004 fc5d 	bl	8007f90 <netif_set_link_down>
      netif_set_down(netif);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f004 fbf0 	bl	8007ebc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80036dc:	e057      	b.n	800378e <low_level_init+0x236>
      switch (PHYLinkState)
 80036de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036e2:	3b02      	subs	r3, #2
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d82b      	bhi.n	8003740 <low_level_init+0x1e8>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <low_level_init+0x198>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003713 	.word	0x08003713
 80036f8:	08003723 	.word	0x08003723
 80036fc:	08003733 	.word	0x08003733
        duplex = ETH_FULLDUPLEX_MODE;
 8003700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8003708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800370c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003710:	e01f      	b.n	8003752 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8003718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800371c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003720:	e017      	b.n	8003752 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003730:	e00f      	b.n	8003752 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800373e:	e008      	b.n	8003752 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8003748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800374c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003750:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003756:	4619      	mov	r1, r3
 8003758:	480f      	ldr	r0, [pc, #60]	; (8003798 <low_level_init+0x240>)
 800375a:	f7fe faad 	bl	8001cb8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800375e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003762:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8003764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003768:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800376a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800376e:	4619      	mov	r1, r3
 8003770:	4809      	ldr	r0, [pc, #36]	; (8003798 <low_level_init+0x240>)
 8003772:	f7fe fb8b 	bl	8001e8c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003776:	4808      	ldr	r0, [pc, #32]	; (8003798 <low_level_init+0x240>)
 8003778:	f7fd fe38 	bl	80013ec <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f004 fb31 	bl	8007de4 <netif_set_up>
    netif_set_link_up(netif);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f004 fbcc 	bl	8007f20 <netif_set_link_up>
}
 8003788:	e001      	b.n	800378e <low_level_init+0x236>
    Error_Handler();
 800378a:	f7fd f919 	bl	80009c0 <Error_Handler>
}
 800378e:	bf00      	nop
 8003790:	37a0      	adds	r7, #160	; 0xa0
 8003792:	46bd      	mov	sp, r7
 8003794:	bdb0      	pop	{r4, r5, r7, pc}
 8003796:	bf00      	nop
 8003798:	20004e38 	.word	0x20004e38
 800379c:	40028000 	.word	0x40028000
 80037a0:	20004d90 	.word	0x20004d90
 80037a4:	20004cf0 	.word	0x20004cf0
 80037a8:	20004ee8 	.word	0x20004ee8
 80037ac:	0801a2d8 	.word	0x0801a2d8
 80037b0:	20004e30 	.word	0x20004e30
 80037b4:	20004e34 	.word	0x20004e34
 80037b8:	0801741c 	.word	0x0801741c
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	20004f20 	.word	0x20004f20

080037c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b092      	sub	sp, #72	; 0x48
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	2230      	movs	r2, #48	; 0x30
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f010 fbac 	bl	8013f42 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	2230      	movs	r2, #48	; 0x30
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f010 fba5 	bl	8013f42 <memset>

  for(q = p; q != NULL; q = q->next)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
 80037fc:	e045      	b.n	800388a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80037fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003800:	2b03      	cmp	r3, #3
 8003802:	d902      	bls.n	800380a <low_level_output+0x46>
      return ERR_IF;
 8003804:	f06f 030b 	mvn.w	r3, #11
 8003808:	e065      	b.n	80038d6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800380a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3348      	adds	r3, #72	; 0x48
 800381a:	443b      	add	r3, r7
 800381c:	3b3c      	subs	r3, #60	; 0x3c
 800381e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003822:	895b      	ldrh	r3, [r3, #10]
 8003824:	4619      	mov	r1, r3
 8003826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3348      	adds	r3, #72	; 0x48
 8003832:	443b      	add	r3, r7
 8003834:	3b38      	subs	r3, #56	; 0x38
 8003836:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800383e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	f107 000c 	add.w	r0, r7, #12
 8003846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	18c1      	adds	r1, r0, r3
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	3348      	adds	r3, #72	; 0x48
 800385c:	443b      	add	r3, r7
 800385e:	3b34      	subs	r3, #52	; 0x34
 8003860:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800386a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	3348      	adds	r3, #72	; 0x48
 8003876:	443b      	add	r3, r7
 8003878:	3b34      	subs	r3, #52	; 0x34
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003880:	3301      	adds	r3, #1
 8003882:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	643b      	str	r3, [r7, #64]	; 0x40
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1b6      	bne.n	80037fe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	891b      	ldrh	r3, [r3, #8]
 8003894:	461a      	mov	r2, r3
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <low_level_output+0x11c>)
 8003898:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800389a:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <low_level_output+0x11c>)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80038a2:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <low_level_output+0x11c>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f004 fff5 	bl	8008898 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80038ae:	490c      	ldr	r1, [pc, #48]	; (80038e0 <low_level_output+0x11c>)
 80038b0:	480c      	ldr	r0, [pc, #48]	; (80038e4 <low_level_output+0x120>)
 80038b2:	f7fd fea8 	bl	8001606 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80038b6:	bf00      	nop
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <low_level_output+0x124>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fc0f 	bl	80040e4 <osSemaphoreWait>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f5      	bne.n	80038b8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80038cc:	4805      	ldr	r0, [pc, #20]	; (80038e4 <low_level_output+0x120>)
 80038ce:	f7fe f82d 	bl	800192c <HAL_ETH_ReleaseTxPacket>

  return errval;
 80038d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3748      	adds	r7, #72	; 0x48
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20004ee8 	.word	0x20004ee8
 80038e4:	20004e38 	.word	0x20004e38
 80038e8:	20004e34 	.word	0x20004e34

080038ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <low_level_input+0x2c>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	4619      	mov	r1, r3
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <low_level_input+0x30>)
 8003908:	f7fd fed9 	bl	80016be <HAL_ETH_ReadData>
  }

  return p;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20004cec 	.word	0x20004cec
 800391c:	20004e38 	.word	0x20004e38

08003920 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <ethernetif_input+0x50>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fbd3 	bl	80040e4 <osSemaphoreWait>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f5      	bne.n	8003930 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8003944:	68b8      	ldr	r0, [r7, #8]
 8003946:	f7ff ffd1 	bl	80038ec <low_level_input>
 800394a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	4798      	blx	r3
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f004 fef2 	bl	800874c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ea      	bne.n	8003944 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800396e:	e7df      	b.n	8003930 <ethernetif_input+0x10>
 8003970:	20004e30 	.word	0x20004e30

08003974 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <ethernetif_init+0x1c>
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <ethernetif_init+0x48>)
 8003984:	f240 12df 	movw	r2, #479	; 0x1df
 8003988:	490d      	ldr	r1, [pc, #52]	; (80039c0 <ethernetif_init+0x4c>)
 800398a:	480e      	ldr	r0, [pc, #56]	; (80039c4 <ethernetif_init+0x50>)
 800398c:	f010 fa74 	bl	8013e78 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2273      	movs	r2, #115	; 0x73
 8003994:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2274      	movs	r2, #116	; 0x74
 800399c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <ethernetif_init+0x54>)
 80039a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <ethernetif_init+0x58>)
 80039aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fdd3 	bl	8003558 <low_level_init>

  return ERR_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08017438 	.word	0x08017438
 80039c0:	08017454 	.word	0x08017454
 80039c4:	08017464 	.word	0x08017464
 80039c8:	08011189 	.word	0x08011189
 80039cc:	080037c5 	.word	0x080037c5

080039d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	4809      	ldr	r0, [pc, #36]	; (8003a04 <pbuf_free_custom+0x34>)
 80039e0:	f003 ffe0 	bl	80079a4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <pbuf_free_custom+0x38>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <pbuf_free_custom+0x38>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <pbuf_free_custom+0x3c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fbc2 	bl	8004180 <osSemaphoreRelease>
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0801a2d8 	.word	0x0801a2d8
 8003a08:	20004cec 	.word	0x20004cec
 8003a0c:	20004e30 	.word	0x20004e30

08003a10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003a14:	f7fd fb2a 	bl	800106c <HAL_GetTick>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08e      	sub	sp, #56	; 0x38
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a59      	ldr	r2, [pc, #356]	; (8003ba4 <HAL_ETH_MspInit+0x184>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	f040 80ac 	bne.w	8003b9c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a52:	6313      	str	r3, [r2, #48]	; 0x30
 8003a54:	4b54      	ldr	r3, [pc, #336]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4a4f      	ldr	r2, [pc, #316]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a70:	4b4d      	ldr	r3, [pc, #308]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4a48      	ldr	r2, [pc, #288]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8c:	4b46      	ldr	r3, [pc, #280]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4a41      	ldr	r2, [pc, #260]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4a33      	ldr	r2, [pc, #204]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003ada:	f043 0302 	orr.w	r3, r3, #2
 8003ade:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	6313      	str	r3, [r2, #48]	; 0x30
 8003afc:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_ETH_MspInit+0x188>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003b08:	2332      	movs	r3, #50	; 0x32
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b14:	2303      	movs	r3, #3
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b18:	230b      	movs	r3, #11
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b20:	4619      	mov	r1, r3
 8003b22:	4822      	ldr	r0, [pc, #136]	; (8003bac <HAL_ETH_MspInit+0x18c>)
 8003b24:	f7fe fe34 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003b28:	2386      	movs	r3, #134	; 0x86
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b34:	2303      	movs	r3, #3
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b38:	230b      	movs	r3, #11
 8003b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b40:	4619      	mov	r1, r3
 8003b42:	481b      	ldr	r0, [pc, #108]	; (8003bb0 <HAL_ETH_MspInit+0x190>)
 8003b44:	f7fe fe24 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	2303      	movs	r3, #3
 8003b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b5a:	230b      	movs	r3, #11
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b62:	4619      	mov	r1, r3
 8003b64:	4813      	ldr	r0, [pc, #76]	; (8003bb4 <HAL_ETH_MspInit+0x194>)
 8003b66:	f7fe fe13 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003b6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	2302      	movs	r3, #2
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b7c:	230b      	movs	r3, #11
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b84:	4619      	mov	r1, r3
 8003b86:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <HAL_ETH_MspInit+0x198>)
 8003b88:	f7fe fe02 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2105      	movs	r1, #5
 8003b90:	203d      	movs	r0, #61	; 0x3d
 8003b92:	f7fd fb76 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003b96:	203d      	movs	r0, #61	; 0x3d
 8003b98:	f7fd fb8f 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3738      	adds	r7, #56	; 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40028000 	.word	0x40028000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020800 	.word	0x40020800
 8003bb0:	40020000 	.word	0x40020000
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	40021800 	.word	0x40021800

08003bbc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <ETH_PHY_IO_Init+0x10>)
 8003bc2:	f7fe f97d 	bl	8001ec0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20004e38 	.word	0x20004e38

08003bd0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return 0;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	4807      	ldr	r0, [pc, #28]	; (8003c10 <ETH_PHY_IO_ReadReg+0x30>)
 8003bf4:	f7fd ffcc 	bl	8001b90 <HAL_ETH_ReadPHYRegister>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	e000      	b.n	8003c06 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20004e38 	.word	0x20004e38

08003c14 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	4807      	ldr	r0, [pc, #28]	; (8003c44 <ETH_PHY_IO_WriteReg+0x30>)
 8003c28:	f7fd fffd 	bl	8001c26 <HAL_ETH_WritePHYRegister>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e000      	b.n	8003c3a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20004e38 	.word	0x20004e38

08003c48 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003c4c:	f7fd fa0e 	bl	800106c <HAL_GetTick>
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b0a0      	sub	sp, #128	; 0x80
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	2264      	movs	r2, #100	; 0x64
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f010 f96a 	bl	8013f42 <memset>
  int32_t PHYLinkState = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c76:	2300      	movs	r3, #0
 8003c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003c82:	483a      	ldr	r0, [pc, #232]	; (8003d6c <ethernet_link_thread+0x114>)
 8003c84:	f7fd f905 	bl	8000e92 <LAN8742_GetLinkState>
 8003c88:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <ethernet_link_thread+0x5e>
 8003c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	dc09      	bgt.n	8003cb6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8003ca2:	4833      	ldr	r0, [pc, #204]	; (8003d70 <ethernet_link_thread+0x118>)
 8003ca4:	f7fd fc30 	bl	8001508 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003ca8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003caa:	f004 f907 	bl	8007ebc <netif_set_down>
    netif_set_link_down(netif);
 8003cae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003cb0:	f004 f96e 	bl	8007f90 <netif_set_link_down>
 8003cb4:	e055      	b.n	8003d62 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d14e      	bne.n	8003d62 <ethernet_link_thread+0x10a>
 8003cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	dd4b      	ble.n	8003d62 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8003cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ccc:	3b02      	subs	r3, #2
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d82a      	bhi.n	8003d28 <ethernet_link_thread+0xd0>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <ethernet_link_thread+0x80>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cfb 	.word	0x08003cfb
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8003ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003cee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cf2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003cf8:	e017      	b.n	8003d2a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d02:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003d04:	2301      	movs	r3, #1
 8003d06:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003d08:	e00f      	b.n	8003d2a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8003d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d0e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003d10:	2300      	movs	r3, #0
 8003d12:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003d14:	2301      	movs	r3, #1
 8003d16:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003d18:	e007      	b.n	8003d2a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003d26:	e000      	b.n	8003d2a <ethernet_link_thread+0xd2>
    default:
      break;
 8003d28:	bf00      	nop
    }

    if(linkchanged)
 8003d2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d018      	beq.n	8003d62 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003d30:	f107 0308 	add.w	r3, r7, #8
 8003d34:	4619      	mov	r1, r3
 8003d36:	480e      	ldr	r0, [pc, #56]	; (8003d70 <ethernet_link_thread+0x118>)
 8003d38:	f7fd ffbe 	bl	8001cb8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8003d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d42:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003d44:	f107 0308 	add.w	r3, r7, #8
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4809      	ldr	r0, [pc, #36]	; (8003d70 <ethernet_link_thread+0x118>)
 8003d4c:	f7fe f89e 	bl	8001e8c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8003d50:	4807      	ldr	r0, [pc, #28]	; (8003d70 <ethernet_link_thread+0x118>)
 8003d52:	f7fd fb4b 	bl	80013ec <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8003d56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d58:	f004 f844 	bl	8007de4 <netif_set_up>
      netif_set_link_up(netif);
 8003d5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d5e:	f004 f8df 	bl	8007f20 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8003d62:	2064      	movs	r0, #100	; 0x64
 8003d64:	f000 f90e 	bl	8003f84 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003d68:	e78b      	b.n	8003c82 <ethernet_link_thread+0x2a>
 8003d6a:	bf00      	nop
 8003d6c:	20004f20 	.word	0x20004f20
 8003d70:	20004e38 	.word	0x20004e38

08003d74 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003d7c:	4812      	ldr	r0, [pc, #72]	; (8003dc8 <HAL_ETH_RxAllocateCallback+0x54>)
 8003d7e:	f003 fd9d 	bl	80078bc <memp_malloc_pool>
 8003d82:	60f8      	str	r0, [r7, #12]
  if (p)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f103 0220 	add.w	r2, r3, #32
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <HAL_ETH_RxAllocateCallback+0x58>)
 8003d98:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003da2:	9201      	str	r2, [sp, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2241      	movs	r2, #65	; 0x41
 8003daa:	2100      	movs	r1, #0
 8003dac:	2000      	movs	r0, #0
 8003dae:	f004 fb13 	bl	80083d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003db2:	e005      	b.n	8003dc0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	0801a2d8 	.word	0x0801a2d8
 8003dcc:	080039d1 	.word	0x080039d1
 8003dd0:	20004cec 	.word	0x20004cec

08003dd4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3b20      	subs	r3, #32
 8003df2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e003      	b.n	8003e1e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e009      	b.n	8003e40 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	891a      	ldrh	r2, [r3, #8]
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	4413      	add	r3, r2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f2      	bne.n	8003e2c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	3724      	adds	r7, #36	; 0x24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f004 fc75 	bl	800874c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e7c:	2b84      	cmp	r3, #132	; 0x84
 8003e7e:	d005      	beq.n	8003e8c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	3303      	adds	r3, #3
 8003e8a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea0:	f3ef 8305 	mrs	r3, IPSR
 8003ea4:	607b      	str	r3, [r7, #4]
  return(result);
 8003ea6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ec2:	f001 fc2b 	bl	800571c <vTaskStartScheduler>

  return osOK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003ed0:	f7ff ffe3 	bl	8003e9a <inHandlerMode>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003eda:	f001 fd39 	bl	8005950 <xTaskGetTickCountFromISR>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	e002      	b.n	8003ee8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003ee2:	f001 fd25 	bl	8005930 <xTaskGetTickCount>
 8003ee6:	4603      	mov	r3, r0
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}

08003eec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af04      	add	r7, sp, #16
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d020      	beq.n	8003f40 <osThreadCreate+0x54>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685c      	ldr	r4, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691e      	ldr	r6, [r3, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ffa6 	bl	8003e6a <makeFreeRtosPriority>
 8003f1e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f28:	9202      	str	r2, [sp, #8]
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	9100      	str	r1, [sp, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4632      	mov	r2, r6
 8003f32:	4629      	mov	r1, r5
 8003f34:	4620      	mov	r0, r4
 8003f36:	f001 fa29 	bl	800538c <xTaskCreateStatic>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e01c      	b.n	8003f7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685c      	ldr	r4, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f4c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff88 	bl	8003e6a <makeFreeRtosPriority>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	9200      	str	r2, [sp, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4632      	mov	r2, r6
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f001 fa6b 	bl	8005446 <xTaskCreate>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <osDelay+0x16>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	e000      	b.n	8003f9c <osDelay+0x18>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fb89 	bl	80056b4 <vTaskDelay>
  
  return osOK;
 8003fa2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f000 fc0d 	bl	80047e2 <xQueueCreateMutexStatic>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	e003      	b.n	8003fd4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f000 fbf0 	bl	80047b2 <xQueueCreateMutex>
 8003fd2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <osMutexWait+0x18>
    return osErrorParameter;
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	e03a      	b.n	800406a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d103      	bne.n	8004008 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e009      	b.n	800401c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <osMutexWait+0x40>
      ticks = 1;
 8004018:	2301      	movs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800401c:	f7ff ff3d 	bl	8003e9a <inHandlerMode>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004026:	f107 0308 	add.w	r3, r7, #8
 800402a:	461a      	mov	r2, r3
 800402c:	2100      	movs	r1, #0
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 f804 	bl	800503c <xQueueReceiveFromISR>
 8004034:	4603      	mov	r3, r0
 8004036:	2b01      	cmp	r3, #1
 8004038:	d001      	beq.n	800403e <osMutexWait+0x62>
      return osErrorOS;
 800403a:	23ff      	movs	r3, #255	; 0xff
 800403c:	e015      	b.n	800406a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d011      	beq.n	8004068 <osMutexWait+0x8c>
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <osMutexWait+0x98>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	e008      	b.n	8004068 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fee3 	bl	8004e24 <xQueueSemaphoreTake>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <osMutexWait+0x8c>
    return osErrorOS;
 8004064:	23ff      	movs	r3, #255	; 0xff
 8004066:	e000      	b.n	800406a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004088:	f7ff ff07 	bl	8003e9a <inHandlerMode>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fd56 	bl	8004b4a <xQueueGiveFromISR>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d001      	beq.n	80040a8 <osMutexRelease+0x30>
      return osErrorOS;
 80040a4:	23ff      	movs	r3, #255	; 0xff
 80040a6:	e017      	b.n	80040d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d013      	beq.n	80040d6 <osMutexRelease+0x5e>
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <osMutexRelease+0x68>)
 80040b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	e00a      	b.n	80040d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80040c0:	2300      	movs	r3, #0
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fba6 	bl	8004818 <xQueueGenericSend>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80040d2:	23ff      	movs	r3, #255	; 0xff
 80040d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	e03a      	b.n	8004172 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d103      	bne.n	8004110 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004108:	f04f 33ff 	mov.w	r3, #4294967295
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e009      	b.n	8004124 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <osSemaphoreWait+0x40>
      ticks = 1;
 8004120:	2301      	movs	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004124:	f7ff feb9 	bl	8003e9a <inHandlerMode>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d017      	beq.n	800415e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	461a      	mov	r2, r3
 8004134:	2100      	movs	r1, #0
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 ff80 	bl	800503c <xQueueReceiveFromISR>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004142:	23ff      	movs	r3, #255	; 0xff
 8004144:	e015      	b.n	8004172 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d011      	beq.n	8004170 <osSemaphoreWait+0x8c>
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <osSemaphoreWait+0x98>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	e008      	b.n	8004170 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fe5f 	bl	8004e24 <xQueueSemaphoreTake>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d001      	beq.n	8004170 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800416c:	23ff      	movs	r3, #255	; 0xff
 800416e:	e000      	b.n	8004172 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004190:	f7ff fe83 	bl	8003e9a <inHandlerMode>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fcd2 	bl	8004b4a <xQueueGiveFromISR>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80041ac:	23ff      	movs	r3, #255	; 0xff
 80041ae:	e017      	b.n	80041e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <osSemaphoreRelease+0x5e>
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <osSemaphoreRelease+0x68>)
 80041b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	e00a      	b.n	80041de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80041c8:	2300      	movs	r3, #0
 80041ca:	2200      	movs	r2, #0
 80041cc:	2100      	movs	r1, #0
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb22 	bl	8004818 <xQueueGenericSend>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80041da:	23ff      	movs	r3, #255	; 0xff
 80041dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d011      	beq.n	8004222 <osMessageCreate+0x36>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2400      	movs	r4, #0
 8004218:	9400      	str	r4, [sp, #0]
 800421a:	f000 f9df 	bl	80045dc <xQueueGenericCreateStatic>
 800421e:	4603      	mov	r3, r0
 8004220:	e008      	b.n	8004234 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	4619      	mov	r1, r3
 800422e:	f000 fa4d 	bl	80046cc <xQueueGenericCreate>
 8004232:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <osMessagePut+0x1e>
    ticks = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800425a:	f7ff fe1e 	bl	8003e9a <inHandlerMode>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d018      	beq.n	8004296 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004264:	f107 0210 	add.w	r2, r7, #16
 8004268:	f107 0108 	add.w	r1, r7, #8
 800426c:	2300      	movs	r3, #0
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fbd0 	bl	8004a14 <xQueueGenericSendFromISR>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d001      	beq.n	800427e <osMessagePut+0x42>
      return osErrorOS;
 800427a:	23ff      	movs	r3, #255	; 0xff
 800427c:	e018      	b.n	80042b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d014      	beq.n	80042ae <osMessagePut+0x72>
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <osMessagePut+0x7c>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	e00b      	b.n	80042ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004296:	f107 0108 	add.w	r1, r7, #8
 800429a:	2300      	movs	r3, #0
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 faba 	bl	8004818 <xQueueGenericSend>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <osMessagePut+0x72>
      return osErrorOS;
 80042aa:	23ff      	movs	r3, #255	; 0xff
 80042ac:	e000      	b.n	80042b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b08b      	sub	sp, #44	; 0x2c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	617b      	str	r3, [r7, #20]
    return event;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	461c      	mov	r4, r3
 80042de:	f107 0314 	add.w	r3, r7, #20
 80042e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042ea:	e054      	b.n	8004396 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d103      	bne.n	8004304 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	e009      	b.n	8004318 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <osMessageGet+0x5c>
      ticks = 1;
 8004314:	2301      	movs	r3, #1
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004318:	f7ff fdbf 	bl	8003e9a <inHandlerMode>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01c      	beq.n	800435c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004322:	f107 0220 	add.w	r2, r7, #32
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f000 fe84 	bl	800503c <xQueueReceiveFromISR>
 8004334:	4603      	mov	r3, r0
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800433a:	2310      	movs	r3, #16
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e001      	b.n	8004344 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01d      	beq.n	8004386 <osMessageGet+0xca>
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <osMessageGet+0xe4>)
 800434c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	e014      	b.n	8004386 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800435c:	f107 0314 	add.w	r3, r7, #20
 8004360:	3304      	adds	r3, #4
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	4619      	mov	r1, r3
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f000 fc7c 	bl	8004c64 <xQueueReceive>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d102      	bne.n	8004378 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004372:	2310      	movs	r3, #16
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e006      	b.n	8004386 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <osMessageGet+0xc6>
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <osMessageGet+0xc8>
 8004382:	2340      	movs	r3, #64	; 0x40
 8004384:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	461c      	mov	r4, r3
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	372c      	adds	r7, #44	; 0x2c
 800439a:	46bd      	mov	sp, r7
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	bf00      	nop
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0208 	add.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f103 0208 	add.w	r2, r3, #8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f103 0208 	add.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d103      	bne.n	8004466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e00c      	b.n	8004480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3308      	adds	r3, #8
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e002      	b.n	8004474 <vListInsert+0x2e>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d2f6      	bcs.n	800446e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6852      	ldr	r2, [r2, #4]
 80044d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d103      	bne.n	80044ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004536:	f002 f85d 	bl	80065f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	441a      	add	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	3b01      	subs	r3, #1
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	22ff      	movs	r2, #255	; 0xff
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d114      	bne.n	80045b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01a      	beq.n	80045ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3310      	adds	r3, #16
 8004598:	4618      	mov	r0, r3
 800459a:	f001 fb23 	bl	8005be4 <xTaskRemoveFromEventList>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <xQueueGenericReset+0xcc>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	e009      	b.n	80045ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3310      	adds	r3, #16
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fef2 	bl	80043a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff feed 	bl	80043a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045ca:	f002 f843 	bl	8006654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ce:	2301      	movs	r3, #1
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <xQueueGenericCreateStatic+0x52>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <xQueueGenericCreateStatic+0x56>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <xQueueGenericCreateStatic+0x58>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <xQueueGenericCreateStatic+0x7e>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <xQueueGenericCreateStatic+0x82>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericCreateStatic+0x84>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	61fb      	str	r3, [r7, #28]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800467a:	2348      	movs	r3, #72	; 0x48
 800467c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b48      	cmp	r3, #72	; 0x48
 8004682:	d00a      	beq.n	800469a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61bb      	str	r3, [r7, #24]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800469a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f83f 	bl	8004740 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3348      	adds	r3, #72	; 0x48
 8004704:	4618      	mov	r0, r3
 8004706:	f002 f897 	bl	8006838 <pvPortMalloc>
 800470a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	3348      	adds	r3, #72	; 0x48
 800471a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004724:	79fa      	ldrb	r2, [r7, #7]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f805 	bl	8004740 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004736:	69bb      	ldr	r3, [r7, #24]
	}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e002      	b.n	8004762 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800476e:	2101      	movs	r1, #1
 8004770:	69b8      	ldr	r0, [r7, #24]
 8004772:	f7ff fecb 	bl	800450c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800479e:	2300      	movs	r3, #0
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f837 	bl	8004818 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6939      	ldr	r1, [r7, #16]
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7ff ff7e 	bl	80046cc <xQueueGenericCreate>
 80047d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff ffd3 	bl	800477e <prvInitialiseMutex>

		return xNewQueue;
 80047d8:	68fb      	ldr	r3, [r7, #12]
	}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b088      	sub	sp, #32
 80047e6:	af02      	add	r7, sp, #8
 80047e8:	4603      	mov	r3, r0
 80047ea:	6039      	str	r1, [r7, #0]
 80047ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	f7ff feeb 	bl	80045dc <xQueueGenericCreateStatic>
 8004806:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff ffb8 	bl	800477e <prvInitialiseMutex>

		return xNewQueue;
 800480e:	68fb      	ldr	r3, [r7, #12]
	}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueGenericSend+0x32>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <xQueueGenericSend+0x40>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <xQueueGenericSend+0x44>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <xQueueGenericSend+0x46>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <xQueueGenericSend+0x60>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d103      	bne.n	8004886 <xQueueGenericSend+0x6e>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <xQueueGenericSend+0x72>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueGenericSend+0x74>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	623b      	str	r3, [r7, #32]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a6:	f001 fb59 	bl	8005f5c <xTaskGetSchedulerState>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <xQueueGenericSend+0x9e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <xQueueGenericSend+0xa2>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <xQueueGenericSend+0xa4>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	61fb      	str	r3, [r7, #28]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048d6:	f001 fe8d 	bl	80065f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <xQueueGenericSend+0xd4>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d129      	bne.n	8004940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f2:	f000 fc3b 	bl	800516c <prvCopyDataToQueue>
 80048f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	3324      	adds	r3, #36	; 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f96d 	bl	8005be4 <xTaskRemoveFromEventList>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b3f      	ldr	r3, [pc, #252]	; (8004a10 <xQueueGenericSend+0x1f8>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e00a      	b.n	8004938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004928:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <xQueueGenericSend+0x1f8>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004938:	f001 fe8c 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 800493c:	2301      	movs	r3, #1
 800493e:	e063      	b.n	8004a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004946:	f001 fe85 	bl	8006654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800494a:	2300      	movs	r3, #0
 800494c:	e05c      	b.n	8004a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4618      	mov	r0, r3
 800495a:	f001 f9a5 	bl	8005ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004962:	f001 fe77 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004966:	f000 ff39 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496a:	f001 fe43 	bl	80065f4 <vPortEnterCritical>
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004974:	b25b      	sxtb	r3, r3
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d103      	bne.n	8004984 <xQueueGenericSend+0x16c>
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d103      	bne.n	800499a <xQueueGenericSend+0x182>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499a:	f001 fe5b 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800499e:	1d3a      	adds	r2, r7, #4
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f994 	bl	8005cd4 <xTaskCheckForTimeOut>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d124      	bne.n	80049fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b4:	f000 fcd2 	bl	800535c <prvIsQueueFull>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	3310      	adds	r3, #16
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f8e8 	bl	8005b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ce:	f000 fc5d 	bl	800528c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049d2:	f000 ff11 	bl	80057f8 <xTaskResumeAll>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f47f af7c 	bne.w	80048d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <xQueueGenericSend+0x1f8>)
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	e772      	b.n	80048d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f2:	f000 fc4b 	bl	800528c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f6:	f000 feff 	bl	80057f8 <xTaskResumeAll>
 80049fa:	e76c      	b.n	80048d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049fe:	f000 fc45 	bl	800528c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a02:	f000 fef9 	bl	80057f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3738      	adds	r7, #56	; 0x38
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b090      	sub	sp, #64	; 0x40
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <xQueueGenericSendFromISR+0x3c>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <xQueueGenericSendFromISR+0x40>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <xQueueGenericSendFromISR+0x42>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d103      	bne.n	8004a7e <xQueueGenericSendFromISR+0x6a>
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <xQueueGenericSendFromISR+0x6e>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <xQueueGenericSendFromISR+0x70>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	623b      	str	r3, [r7, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a9e:	f001 fe8b 	bl	80067b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	61fa      	str	r2, [r7, #28]
 8004ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <xQueueGenericSendFromISR+0xbc>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d12f      	bne.n	8004b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ae6:	f000 fb41 	bl	800516c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d112      	bne.n	8004b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d016      	beq.n	8004b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 f86f 	bl	8005be4 <xTaskRemoveFromEventList>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00b      	beq.n	8004b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e007      	b.n	8004b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	b25a      	sxtb	r2, r3
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b2e:	e001      	b.n	8004b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3740      	adds	r7, #64	; 0x40
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b08e      	sub	sp, #56	; 0x38
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	623b      	str	r3, [r7, #32]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	61fb      	str	r3, [r7, #28]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <xQueueGiveFromISR+0x58>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueGiveFromISR+0x5c>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueGiveFromISR+0x5e>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61bb      	str	r3, [r7, #24]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bc2:	f001 fdf9 	bl	80067b8 <vPortValidateInterruptPriority>
	__asm volatile
 8004bc6:	f3ef 8211 	mrs	r2, BASEPRI
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	617a      	str	r2, [r7, #20]
 8004bdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004bde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d22b      	bcs.n	8004c4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d112      	bne.n	8004c34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	3324      	adds	r3, #36	; 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 ffe2 	bl	8005be4 <xTaskRemoveFromEventList>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00b      	beq.n	8004c44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e007      	b.n	8004c44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	b25a      	sxtb	r2, r3
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c44:	2301      	movs	r3, #1
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
 8004c48:	e001      	b.n	8004c4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f383 8811 	msr	BASEPRI, r3
}
 8004c58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3738      	adds	r7, #56	; 0x38
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <xQueueReceive+0x30>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	623b      	str	r3, [r7, #32]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueReceive+0x3e>
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <xQueueReceive+0x42>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueReceive+0x44>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xQueueReceive+0x5e>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	61fb      	str	r3, [r7, #28]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc2:	f001 f94b 	bl	8005f5c <xTaskGetSchedulerState>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <xQueueReceive+0x6e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueReceive+0x72>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueReceive+0x74>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <xQueueReceive+0x8e>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61bb      	str	r3, [r7, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf2:	f001 fc7f 	bl	80065f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01f      	beq.n	8004d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d06:	f000 fa9b 	bl	8005240 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00f      	beq.n	8004d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 ff60 	bl	8005be4 <xTaskRemoveFromEventList>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d2a:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <xQueueReceive+0x1bc>)
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d3a:	f001 fc8b 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e069      	b.n	8004e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d48:	f001 fc84 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e062      	b.n	8004e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d56:	f107 0310 	add.w	r3, r7, #16
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 ffa4 	bl	8005ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d64:	f001 fc76 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d68:	f000 fd38 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d6c:	f001 fc42 	bl	80065f4 <vPortEnterCritical>
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d103      	bne.n	8004d86 <xQueueReceive+0x122>
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d103      	bne.n	8004d9c <xQueueReceive+0x138>
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d9c:	f001 fc5a 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004da0:	1d3a      	adds	r2, r7, #4
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 ff93 	bl	8005cd4 <xTaskCheckForTimeOut>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d123      	bne.n	8004dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db6:	f000 fabb 	bl	8005330 <prvIsQueueEmpty>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d017      	beq.n	8004df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	3324      	adds	r3, #36	; 0x24
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fee7 	bl	8005b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd0:	f000 fa5c 	bl	800528c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dd4:	f000 fd10 	bl	80057f8 <xTaskResumeAll>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d189      	bne.n	8004cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <xQueueReceive+0x1bc>)
 8004de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	e780      	b.n	8004cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df2:	f000 fa4b 	bl	800528c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004df6:	f000 fcff 	bl	80057f8 <xTaskResumeAll>
 8004dfa:	e77a      	b.n	8004cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfe:	f000 fa45 	bl	800528c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e02:	f000 fcf9 	bl	80057f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e08:	f000 fa92 	bl	8005330 <prvIsQueueEmpty>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f43f af6f 	beq.w	8004cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3730      	adds	r7, #48	; 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	e000ed04 	.word	0xe000ed04

08004e24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	; 0x38
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	61fb      	str	r3, [r7, #28]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e74:	f001 f872 	bl	8005f5c <xTaskGetSchedulerState>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <xQueueSemaphoreTake+0x60>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <xQueueSemaphoreTake+0x64>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <xQueueSemaphoreTake+0x66>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	61bb      	str	r3, [r7, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ea4:	f001 fba6 	bl	80065f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d024      	beq.n	8004efe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	1e5a      	subs	r2, r3, #1
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ec4:	f001 f9f2 	bl	80062ac <pvTaskIncrementMutexHeldCount>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	3310      	adds	r3, #16
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fe82 	bl	8005be4 <xTaskRemoveFromEventList>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ee6:	4b54      	ldr	r3, [pc, #336]	; (8005038 <xQueueSemaphoreTake+0x214>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ef6:	f001 fbad 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e097      	b.n	800502e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d111      	bne.n	8004f28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	617b      	str	r3, [r7, #20]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f20:	f001 fb98 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e082      	b.n	800502e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 feb8 	bl	8005ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f3c:	f001 fb8a 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f40:	f000 fc4c 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f44:	f001 fb56 	bl	80065f4 <vPortEnterCritical>
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d103      	bne.n	8004f5e <xQueueSemaphoreTake+0x13a>
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d103      	bne.n	8004f74 <xQueueSemaphoreTake+0x150>
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f74:	f001 fb6e 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f78:	463a      	mov	r2, r7
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fea7 	bl	8005cd4 <xTaskCheckForTimeOut>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d132      	bne.n	8004ff2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f8e:	f000 f9cf 	bl	8005330 <prvIsQueueEmpty>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d026      	beq.n	8004fe6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004fa0:	f001 fb28 	bl	80065f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fff5 	bl	8005f98 <xTaskPriorityInherit>
 8004fae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004fb0:	f001 fb50 	bl	8006654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fded 	bl	8005b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fc4:	f000 f962 	bl	800528c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fc8:	f000 fc16 	bl	80057f8 <xTaskResumeAll>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f47f af68 	bne.w	8004ea4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004fd4:	4b18      	ldr	r3, [pc, #96]	; (8005038 <xQueueSemaphoreTake+0x214>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e75e      	b.n	8004ea4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fe8:	f000 f950 	bl	800528c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fec:	f000 fc04 	bl	80057f8 <xTaskResumeAll>
 8004ff0:	e758      	b.n	8004ea4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ff4:	f000 f94a 	bl	800528c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff8:	f000 fbfe 	bl	80057f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ffe:	f000 f997 	bl	8005330 <prvIsQueueEmpty>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f43f af4d 	beq.w	8004ea4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005010:	f001 faf0 	bl	80065f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005016:	f000 f891 	bl	800513c <prvGetDisinheritPriorityAfterTimeout>
 800501a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f8b4 	bl	8006190 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005028:	f001 fb14 	bl	8006654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800502c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800502e:	4618      	mov	r0, r3
 8005030:	3738      	adds	r7, #56	; 0x38
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	; 0x38
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	623b      	str	r3, [r7, #32]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <xQueueReceiveFromISR+0x3a>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <xQueueReceiveFromISR+0x3e>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueReceiveFromISR+0x40>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	61fb      	str	r3, [r7, #28]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005096:	f001 fb8f 	bl	80067b8 <vPortValidateInterruptPriority>
	__asm volatile
 800509a:	f3ef 8211 	mrs	r2, BASEPRI
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	61ba      	str	r2, [r7, #24]
 80050b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02f      	beq.n	8005122 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d0:	f000 f8b6 	bl	8005240 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d112      	bne.n	800510c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	3310      	adds	r3, #16
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fd76 	bl	8005be4 <xTaskRemoveFromEventList>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e007      	b.n	800511c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005110:	3301      	adds	r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	b25a      	sxtb	r2, r3
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	e001      	b.n	8005126 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f383 8811 	msr	BASEPRI, r3
}
 8005130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005134:	4618      	mov	r0, r3
 8005136:	3738      	adds	r7, #56	; 0x38
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d006      	beq.n	800515a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1c3 0307 	rsb	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e001      	b.n	800515e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800515e:	68fb      	ldr	r3, [r7, #12]
	}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d14d      	bne.n	800522e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ff74 	bl	8006084 <xTaskPriorityDisinherit>
 800519c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	e043      	b.n	800522e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d119      	bne.n	80051e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6858      	ldr	r0, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	461a      	mov	r2, r3
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	f00e ff49 	bl	801404e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d32b      	bcc.n	800522e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e026      	b.n	800522e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68d8      	ldr	r0, [r3, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	461a      	mov	r2, r3
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	f00e ff2f 	bl	801404e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	425b      	negs	r3, r3
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d207      	bcs.n	800521c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	425b      	negs	r3, r3
 8005216:	441a      	add	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d105      	bne.n	800522e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	3b01      	subs	r3, #1
 800522c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005236:	697b      	ldr	r3, [r7, #20]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d018      	beq.n	8005284 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	441a      	add	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d303      	bcc.n	8005274 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68d9      	ldr	r1, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	461a      	mov	r2, r3
 800527e:	6838      	ldr	r0, [r7, #0]
 8005280:	f00e fee5 	bl	801404e <memcpy>
	}
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005294:	f001 f9ae 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052a0:	e011      	b.n	80052c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d012      	beq.n	80052d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3324      	adds	r3, #36	; 0x24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fc98 	bl	8005be4 <xTaskRemoveFromEventList>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052ba:	f000 fd6d 	bl	8005d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dce9      	bgt.n	80052a2 <prvUnlockQueue+0x16>
 80052ce:	e000      	b.n	80052d2 <prvUnlockQueue+0x46>
					break;
 80052d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	22ff      	movs	r2, #255	; 0xff
 80052d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052da:	f001 f9bb 	bl	8006654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052de:	f001 f989 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ea:	e011      	b.n	8005310 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3310      	adds	r3, #16
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fc73 	bl	8005be4 <xTaskRemoveFromEventList>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005304:	f000 fd48 	bl	8005d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	3b01      	subs	r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005310:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dce9      	bgt.n	80052ec <prvUnlockQueue+0x60>
 8005318:	e000      	b.n	800531c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800531a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005324:	f001 f996 	bl	8006654 <vPortExitCritical>
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005338:	f001 f95c 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e001      	b.n	800534e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800534e:	f001 f981 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8005352:	68fb      	ldr	r3, [r7, #12]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005364:	f001 f946 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	429a      	cmp	r2, r3
 8005372:	d102      	bne.n	800537a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e001      	b.n	800537e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800537e:	f001 f969 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af04      	add	r7, sp, #16
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	623b      	str	r3, [r7, #32]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	61fb      	str	r3, [r7, #28]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d2:	2354      	movs	r3, #84	; 0x54
 80053d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b54      	cmp	r3, #84	; 0x54
 80053da:	d00a      	beq.n	80053f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	61bb      	str	r3, [r7, #24]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01e      	beq.n	8005438 <xTaskCreateStatic+0xac>
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005412:	2300      	movs	r3, #0
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	9302      	str	r3, [sp, #8]
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f850 	bl	80054d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005432:	f000 f8d5 	bl	80055e0 <prvAddNewTaskToReadyList>
 8005436:	e001      	b.n	800543c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
	}
 800543e:	4618      	mov	r0, r3
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005446:	b580      	push	{r7, lr}
 8005448:	b08c      	sub	sp, #48	; 0x30
 800544a:	af04      	add	r7, sp, #16
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f001 f9ec 	bl	8006838 <pvPortMalloc>
 8005460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005468:	2054      	movs	r0, #84	; 0x54
 800546a:	f001 f9e5 	bl	8006838 <pvPortMalloc>
 800546e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
 800547c:	e005      	b.n	800548a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f001 faa6 	bl	80069d0 <vPortFree>
 8005484:	e001      	b.n	800548a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d017      	beq.n	80054c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	2300      	movs	r3, #0
 800549c:	9303      	str	r3, [sp, #12]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f80e 	bl	80054d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b4:	69f8      	ldr	r0, [r7, #28]
 80054b6:	f000 f893 	bl	80055e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e002      	b.n	80054c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054c6:	69bb      	ldr	r3, [r7, #24]
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054e8:	3b01      	subs	r3, #1
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f023 0307 	bic.w	r3, r3, #7
 80054f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	617b      	str	r3, [r7, #20]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01f      	beq.n	800555e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e012      	b.n	800554a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	7819      	ldrb	r1, [r3, #0]
 800552c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	3334      	adds	r3, #52	; 0x34
 8005534:	460a      	mov	r2, r1
 8005536:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	3301      	adds	r3, #1
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d9e9      	bls.n	8005524 <prvInitialiseNewTask+0x54>
 8005550:	e000      	b.n	8005554 <prvInitialiseNewTask+0x84>
			{
				break;
 8005552:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800555c:	e003      	b.n	8005566 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	2b06      	cmp	r3, #6
 800556a:	d901      	bls.n	8005570 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800556c:	2306      	movs	r3, #6
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005574:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2200      	movs	r2, #0
 8005580:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	3304      	adds	r3, #4
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe ff2c 	bl	80043e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	3318      	adds	r3, #24
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe ff27 	bl	80043e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	f1c3 0207 	rsb	r2, r3, #7
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	69b8      	ldr	r0, [r7, #24]
 80055c0:	f000 feee 	bl	80063a0 <pxPortInitialiseStack>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055d6:	bf00      	nop
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055e8:	f001 f804 	bl	80065f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055ec:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <prvAddNewTaskToReadyList+0xb8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	4a29      	ldr	r2, [pc, #164]	; (8005698 <prvAddNewTaskToReadyList+0xb8>)
 80055f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055f6:	4b29      	ldr	r3, [pc, #164]	; (800569c <prvAddNewTaskToReadyList+0xbc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <prvAddNewTaskToReadyList+0xbc>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <prvAddNewTaskToReadyList+0xb8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d110      	bne.n	800562e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800560c:	f000 fbe8 	bl	8005de0 <prvInitialiseTaskLists>
 8005610:	e00d      	b.n	800562e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <prvAddNewTaskToReadyList+0xc0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800561a:	4b20      	ldr	r3, [pc, #128]	; (800569c <prvAddNewTaskToReadyList+0xbc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	429a      	cmp	r2, r3
 8005626:	d802      	bhi.n	800562e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005628:	4a1c      	ldr	r2, [pc, #112]	; (800569c <prvAddNewTaskToReadyList+0xbc>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <prvAddNewTaskToReadyList+0xc4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <prvAddNewTaskToReadyList+0xc4>)
 8005636:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <prvAddNewTaskToReadyList+0xcc>)
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f7fe fecc 	bl	80043fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005666:	f000 fff5 	bl	8006654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <prvAddNewTaskToReadyList+0xc0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <prvAddNewTaskToReadyList+0xbc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	429a      	cmp	r2, r3
 800567e:	d207      	bcs.n	8005690 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <prvAddNewTaskToReadyList+0xd0>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20005040 	.word	0x20005040
 800569c:	20004f40 	.word	0x20004f40
 80056a0:	2000504c 	.word	0x2000504c
 80056a4:	2000505c 	.word	0x2000505c
 80056a8:	20005048 	.word	0x20005048
 80056ac:	20004f44 	.word	0x20004f44
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <vTaskDelay+0x60>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <vTaskDelay+0x30>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	60bb      	str	r3, [r7, #8]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056e4:	f000 f87a 	bl	80057dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056e8:	2100      	movs	r1, #0
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fdf2 	bl	80062d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056f0:	f000 f882 	bl	80057f8 <xTaskResumeAll>
 80056f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <vTaskDelay+0x64>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20005068 	.word	0x20005068
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800572a:	463a      	mov	r2, r7
 800572c:	1d39      	adds	r1, r7, #4
 800572e:	f107 0308 	add.w	r3, r7, #8
 8005732:	4618      	mov	r0, r3
 8005734:	f7fa ff2a 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	9202      	str	r2, [sp, #8]
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	2300      	movs	r3, #0
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	460a      	mov	r2, r1
 800574a:	491e      	ldr	r1, [pc, #120]	; (80057c4 <vTaskStartScheduler+0xa8>)
 800574c:	481e      	ldr	r0, [pc, #120]	; (80057c8 <vTaskStartScheduler+0xac>)
 800574e:	f7ff fe1d 	bl	800538c <xTaskCreateStatic>
 8005752:	4603      	mov	r3, r0
 8005754:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <vTaskStartScheduler+0xb0>)
 8005756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005758:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <vTaskStartScheduler+0xb0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e001      	b.n	800576a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d116      	bne.n	800579e <vTaskStartScheduler+0x82>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
}
 8005782:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005784:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <vTaskStartScheduler+0xb4>)
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <vTaskStartScheduler+0xb8>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005792:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <vTaskStartScheduler+0xbc>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005798:	f000 fe8a 	bl	80064b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800579c:	e00e      	b.n	80057bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d10a      	bne.n	80057bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60fb      	str	r3, [r7, #12]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <vTaskStartScheduler+0x9e>
}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	0801748c 	.word	0x0801748c
 80057c8:	08005db1 	.word	0x08005db1
 80057cc:	20005064 	.word	0x20005064
 80057d0:	20005060 	.word	0x20005060
 80057d4:	2000504c 	.word	0x2000504c
 80057d8:	20005044 	.word	0x20005044

080057dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <vTaskSuspendAll+0x18>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <vTaskSuspendAll+0x18>)
 80057e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	20005068 	.word	0x20005068

080057f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005806:	4b41      	ldr	r3, [pc, #260]	; (800590c <xTaskResumeAll+0x114>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <xTaskResumeAll+0x2c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	603b      	str	r3, [r7, #0]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005824:	f000 fee6 	bl	80065f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005828:	4b38      	ldr	r3, [pc, #224]	; (800590c <xTaskResumeAll+0x114>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a37      	ldr	r2, [pc, #220]	; (800590c <xTaskResumeAll+0x114>)
 8005830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <xTaskResumeAll+0x114>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d161      	bne.n	80058fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800583a:	4b35      	ldr	r3, [pc, #212]	; (8005910 <xTaskResumeAll+0x118>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d05d      	beq.n	80058fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005842:	e02e      	b.n	80058a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005844:	4b33      	ldr	r3, [pc, #204]	; (8005914 <xTaskResumeAll+0x11c>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3318      	adds	r3, #24
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fe31 	bl	80044b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3304      	adds	r3, #4
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fe2c 	bl	80044b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	2201      	movs	r2, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <xTaskResumeAll+0x120>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4313      	orrs	r3, r2
 800586e:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <xTaskResumeAll+0x120>)
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a27      	ldr	r2, [pc, #156]	; (800591c <xTaskResumeAll+0x124>)
 8005880:	441a      	add	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3304      	adds	r3, #4
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f7fe fdb8 	bl	80043fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005892:	4b23      	ldr	r3, [pc, #140]	; (8005920 <xTaskResumeAll+0x128>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	429a      	cmp	r2, r3
 800589a:	d302      	bcc.n	80058a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800589c:	4b21      	ldr	r3, [pc, #132]	; (8005924 <xTaskResumeAll+0x12c>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a2:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <xTaskResumeAll+0x11c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1cc      	bne.n	8005844 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058b0:	f000 fb34 	bl	8005f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058b4:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <xTaskResumeAll+0x130>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058c0:	f000 f858 	bl	8005974 <xTaskIncrementTick>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058ca:	4b16      	ldr	r3, [pc, #88]	; (8005924 <xTaskResumeAll+0x12c>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f1      	bne.n	80058c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <xTaskResumeAll+0x130>)
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <xTaskResumeAll+0x12c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <xTaskResumeAll+0x134>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058fe:	f000 fea9 	bl	8006654 <vPortExitCritical>

	return xAlreadyYielded;
 8005902:	68bb      	ldr	r3, [r7, #8]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20005068 	.word	0x20005068
 8005910:	20005040 	.word	0x20005040
 8005914:	20005000 	.word	0x20005000
 8005918:	20005048 	.word	0x20005048
 800591c:	20004f44 	.word	0x20004f44
 8005920:	20004f40 	.word	0x20004f40
 8005924:	20005054 	.word	0x20005054
 8005928:	20005050 	.word	0x20005050
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005936:	4b05      	ldr	r3, [pc, #20]	; (800594c <xTaskGetTickCount+0x1c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800593c:	687b      	ldr	r3, [r7, #4]
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20005044 	.word	0x20005044

08005950 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005956:	f000 ff2f 	bl	80067b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800595a:	2300      	movs	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <xTaskGetTickCountFromISR+0x20>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005964:	683b      	ldr	r3, [r7, #0]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20005044 	.word	0x20005044

08005974 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597e:	4b4e      	ldr	r3, [pc, #312]	; (8005ab8 <xTaskIncrementTick+0x144>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 808e 	bne.w	8005aa4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005988:	4b4c      	ldr	r3, [pc, #304]	; (8005abc <xTaskIncrementTick+0x148>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005990:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <xTaskIncrementTick+0x148>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d120      	bne.n	80059de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800599c:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <xTaskIncrementTick+0x48>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	603b      	str	r3, [r7, #0]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xTaskIncrementTick+0x46>
 80059bc:	4b40      	ldr	r3, [pc, #256]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b40      	ldr	r3, [pc, #256]	; (8005ac4 <xTaskIncrementTick+0x150>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3e      	ldr	r2, [pc, #248]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4a3e      	ldr	r2, [pc, #248]	; (8005ac4 <xTaskIncrementTick+0x150>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b3d      	ldr	r3, [pc, #244]	; (8005ac8 <xTaskIncrementTick+0x154>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <xTaskIncrementTick+0x154>)
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	f000 fa9f 	bl	8005f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059de:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <xTaskIncrementTick+0x158>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d348      	bcc.n	8005a7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f2:	4b36      	ldr	r3, [pc, #216]	; (8005acc <xTaskIncrementTick+0x158>)
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295
 80059f8:	601a      	str	r2, [r3, #0]
					break;
 80059fa:	e03e      	b.n	8005a7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fc:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d203      	bcs.n	8005a1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a14:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <xTaskIncrementTick+0x158>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a1a:	e02e      	b.n	8005a7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fd49 	bl	80044b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3318      	adds	r3, #24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fd40 	bl	80044b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <xTaskIncrementTick+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <xTaskIncrementTick+0x15c>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <xTaskIncrementTick+0x160>)
 8005a58:	441a      	add	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fe fccc 	bl	80043fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <xTaskIncrementTick+0x164>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3b9      	bcc.n	80059e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a78:	e7b6      	b.n	80059e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <xTaskIncrementTick+0x164>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4914      	ldr	r1, [pc, #80]	; (8005ad4 <xTaskIncrementTick+0x160>)
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d901      	bls.n	8005a96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <xTaskIncrementTick+0x168>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e004      	b.n	8005aae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <xTaskIncrementTick+0x16c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <xTaskIncrementTick+0x16c>)
 8005aac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20005068 	.word	0x20005068
 8005abc:	20005044 	.word	0x20005044
 8005ac0:	20004ff8 	.word	0x20004ff8
 8005ac4:	20004ffc 	.word	0x20004ffc
 8005ac8:	20005058 	.word	0x20005058
 8005acc:	20005060 	.word	0x20005060
 8005ad0:	20005048 	.word	0x20005048
 8005ad4:	20004f44 	.word	0x20004f44
 8005ad8:	20004f40 	.word	0x20004f40
 8005adc:	20005054 	.word	0x20005054
 8005ae0:	20005050 	.word	0x20005050

08005ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aea:	4b27      	ldr	r3, [pc, #156]	; (8005b88 <vTaskSwitchContext+0xa4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005af2:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <vTaskSwitchContext+0xa8>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005af8:	e03f      	b.n	8005b7a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005afa:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <vTaskSwitchContext+0xa8>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b00:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <vTaskSwitchContext+0xac>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	fab3 f383 	clz	r3, r3
 8005b0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	f1c3 031f 	rsb	r3, r3, #31
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	491f      	ldr	r1, [pc, #124]	; (8005b94 <vTaskSwitchContext+0xb0>)
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vTaskSwitchContext+0x5a>
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <vTaskSwitchContext+0xb0>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3308      	adds	r3, #8
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d104      	bne.n	8005b70 <vTaskSwitchContext+0x8c>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <vTaskSwitchContext+0xb4>)
 8005b78:	6013      	str	r3, [r2, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20005068 	.word	0x20005068
 8005b8c:	20005054 	.word	0x20005054
 8005b90:	20005048 	.word	0x20005048
 8005b94:	20004f44 	.word	0x20004f44
 8005b98:	20004f40 	.word	0x20004f40

08005b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60fb      	str	r3, [r7, #12]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <vTaskPlaceOnEventList+0x44>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3318      	adds	r3, #24
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fe fc3b 	bl	8004446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	6838      	ldr	r0, [r7, #0]
 8005bd4:	f000 fb7e 	bl	80062d4 <prvAddCurrentTaskToDelayedList>
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20004f40 	.word	0x20004f40

08005be4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	60fb      	str	r3, [r7, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3318      	adds	r3, #24
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe fc4f 	bl	80044b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <xTaskRemoveFromEventList+0xac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d11c      	bne.n	8005c5c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fc46 	bl	80044b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	2201      	movs	r2, #1
 8005c32:	409a      	lsls	r2, r3
 8005c34:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <xTaskRemoveFromEventList+0xb0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <xTaskRemoveFromEventList+0xb0>)
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <xTaskRemoveFromEventList+0xb4>)
 8005c4c:	441a      	add	r2, r3
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7fe fbd2 	bl	80043fe <vListInsertEnd>
 8005c5a:	e005      	b.n	8005c68 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3318      	adds	r3, #24
 8005c60:	4619      	mov	r1, r3
 8005c62:	480e      	ldr	r0, [pc, #56]	; (8005c9c <xTaskRemoveFromEventList+0xb8>)
 8005c64:	f7fe fbcb 	bl	80043fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <xTaskRemoveFromEventList+0xbc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d905      	bls.n	8005c82 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <xTaskRemoveFromEventList+0xc0>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e001      	b.n	8005c86 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c86:	697b      	ldr	r3, [r7, #20]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20005068 	.word	0x20005068
 8005c94:	20005048 	.word	0x20005048
 8005c98:	20004f44 	.word	0x20004f44
 8005c9c:	20005000 	.word	0x20005000
 8005ca0:	20004f40 	.word	0x20004f40
 8005ca4:	20005054 	.word	0x20005054

08005ca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <vTaskInternalSetTimeOutState+0x24>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <vTaskInternalSetTimeOutState+0x28>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	605a      	str	r2, [r3, #4]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20005058 	.word	0x20005058
 8005cd0:	20005044 	.word	0x20005044

08005cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	613b      	str	r3, [r7, #16]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d16:	f000 fc6d 	bl	80065f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <xTaskCheckForTimeOut+0xbc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d102      	bne.n	8005d3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e023      	b.n	8005d82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <xTaskCheckForTimeOut+0xc0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d007      	beq.n	8005d56 <xTaskCheckForTimeOut+0x82>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d302      	bcc.n	8005d56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	e015      	b.n	8005d82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d20b      	bcs.n	8005d78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff9b 	bl	8005ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e004      	b.n	8005d82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f000 fc67 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8005d86:	69fb      	ldr	r3, [r7, #28]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20005044 	.word	0x20005044
 8005d94:	20005058 	.word	0x20005058

08005d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <vTaskMissedYield+0x14>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
}
 8005da2:	bf00      	nop
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20005054 	.word	0x20005054

08005db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005db8:	f000 f852 	bl	8005e60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <prvIdleTask+0x28>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d9f9      	bls.n	8005db8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <prvIdleTask+0x2c>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dd4:	e7f0      	b.n	8005db8 <prvIdleTask+0x8>
 8005dd6:	bf00      	nop
 8005dd8:	20004f44 	.word	0x20004f44
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	e00c      	b.n	8005e06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4a12      	ldr	r2, [pc, #72]	; (8005e40 <prvInitialiseTaskLists+0x60>)
 8005df8:	4413      	add	r3, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe fad2 	bl	80043a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3301      	adds	r3, #1
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	d9ef      	bls.n	8005dec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e0c:	480d      	ldr	r0, [pc, #52]	; (8005e44 <prvInitialiseTaskLists+0x64>)
 8005e0e:	f7fe fac9 	bl	80043a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e12:	480d      	ldr	r0, [pc, #52]	; (8005e48 <prvInitialiseTaskLists+0x68>)
 8005e14:	f7fe fac6 	bl	80043a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e18:	480c      	ldr	r0, [pc, #48]	; (8005e4c <prvInitialiseTaskLists+0x6c>)
 8005e1a:	f7fe fac3 	bl	80043a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e1e:	480c      	ldr	r0, [pc, #48]	; (8005e50 <prvInitialiseTaskLists+0x70>)
 8005e20:	f7fe fac0 	bl	80043a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e24:	480b      	ldr	r0, [pc, #44]	; (8005e54 <prvInitialiseTaskLists+0x74>)
 8005e26:	f7fe fabd 	bl	80043a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <prvInitialiseTaskLists+0x78>)
 8005e2c:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <prvInitialiseTaskLists+0x64>)
 8005e2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <prvInitialiseTaskLists+0x7c>)
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <prvInitialiseTaskLists+0x68>)
 8005e34:	601a      	str	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20004f44 	.word	0x20004f44
 8005e44:	20004fd0 	.word	0x20004fd0
 8005e48:	20004fe4 	.word	0x20004fe4
 8005e4c:	20005000 	.word	0x20005000
 8005e50:	20005014 	.word	0x20005014
 8005e54:	2000502c 	.word	0x2000502c
 8005e58:	20004ff8 	.word	0x20004ff8
 8005e5c:	20004ffc 	.word	0x20004ffc

08005e60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e66:	e019      	b.n	8005e9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e68:	f000 fbc4 	bl	80065f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6c:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <prvCheckTasksWaitingTermination+0x50>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe fb1d 	bl	80044b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <prvCheckTasksWaitingTermination+0x54>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	4a0b      	ldr	r2, [pc, #44]	; (8005eb4 <prvCheckTasksWaitingTermination+0x54>)
 8005e86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e88:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <prvCheckTasksWaitingTermination+0x58>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <prvCheckTasksWaitingTermination+0x58>)
 8005e90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e92:	f000 fbdf 	bl	8006654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f810 	bl	8005ebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <prvCheckTasksWaitingTermination+0x58>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e1      	bne.n	8005e68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20005014 	.word	0x20005014
 8005eb4:	20005040 	.word	0x20005040
 8005eb8:	20005028 	.word	0x20005028

08005ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d108      	bne.n	8005ee0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fd7c 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fd79 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ede:	e018      	b.n	8005f12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d103      	bne.n	8005ef2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fd70 	bl	80069d0 <vPortFree>
	}
 8005ef0:	e00f      	b.n	8005f12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d00a      	beq.n	8005f12 <prvDeleteTCB+0x56>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60fb      	str	r3, [r7, #12]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <prvDeleteTCB+0x54>
	}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <prvResetNextTaskUnblockTime+0x38>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f34:	e008      	b.n	8005f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <prvResetNextTaskUnblockTime+0x38>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <prvResetNextTaskUnblockTime+0x3c>)
 8005f46:	6013      	str	r3, [r2, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20004ff8 	.word	0x20004ff8
 8005f58:	20005060 	.word	0x20005060

08005f5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <xTaskGetSchedulerState+0x34>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	607b      	str	r3, [r7, #4]
 8005f6e:	e008      	b.n	8005f82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <xTaskGetSchedulerState+0x38>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	e001      	b.n	8005f82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f82:	687b      	ldr	r3, [r7, #4]
	}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	2000504c 	.word	0x2000504c
 8005f94:	20005068 	.word	0x20005068

08005f98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d05e      	beq.n	800606c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	4b31      	ldr	r3, [pc, #196]	; (8006078 <xTaskPriorityInherit+0xe0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d24e      	bcs.n	800605a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db06      	blt.n	8005fd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <xTaskPriorityInherit+0xe0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	f1c3 0207 	rsb	r2, r3, #7
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6959      	ldr	r1, [r3, #20]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a26      	ldr	r2, [pc, #152]	; (800607c <xTaskPriorityInherit+0xe4>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d12f      	bne.n	800604a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fa62 	bl	80044b8 <uxListRemove>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	2201      	movs	r2, #1
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	43da      	mvns	r2, r3
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <xTaskPriorityInherit+0xe8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4013      	ands	r3, r2
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <xTaskPriorityInherit+0xe8>)
 800600e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <xTaskPriorityInherit+0xe0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	2201      	movs	r2, #1
 8006020:	409a      	lsls	r2, r3
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <xTaskPriorityInherit+0xe8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4313      	orrs	r3, r2
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <xTaskPriorityInherit+0xe8>)
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4a10      	ldr	r2, [pc, #64]	; (800607c <xTaskPriorityInherit+0xe4>)
 800603a:	441a      	add	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe f9db 	bl	80043fe <vListInsertEnd>
 8006048:	e004      	b.n	8006054 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800604a:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <xTaskPriorityInherit+0xe0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e008      	b.n	800606c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <xTaskPriorityInherit+0xe0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	429a      	cmp	r2, r3
 8006066:	d201      	bcs.n	800606c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800606c:	68fb      	ldr	r3, [r7, #12]
	}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20004f40 	.word	0x20004f40
 800607c:	20004f44 	.word	0x20004f44
 8006080:	20005048 	.word	0x20005048

08006084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d06e      	beq.n	8006178 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800609a:	4b3a      	ldr	r3, [pc, #232]	; (8006184 <xTaskPriorityDisinherit+0x100>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d00a      	beq.n	80060ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60fb      	str	r3, [r7, #12]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60bb      	str	r3, [r7, #8]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060dc:	1e5a      	subs	r2, r3, #1
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d044      	beq.n	8006178 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d140      	bne.n	8006178 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe f9dc 	bl	80044b8 <uxListRemove>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d115      	bne.n	8006132 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	491f      	ldr	r1, [pc, #124]	; (8006188 <xTaskPriorityDisinherit+0x104>)
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xTaskPriorityDisinherit+0xae>
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	2201      	movs	r2, #1
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43da      	mvns	r2, r3
 8006128:	4b18      	ldr	r3, [pc, #96]	; (800618c <xTaskPriorityDisinherit+0x108>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4013      	ands	r3, r2
 800612e:	4a17      	ldr	r2, [pc, #92]	; (800618c <xTaskPriorityDisinherit+0x108>)
 8006130:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	f1c3 0207 	rsb	r2, r3, #7
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	2201      	movs	r2, #1
 800614c:	409a      	lsls	r2, r3
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <xTaskPriorityDisinherit+0x108>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4313      	orrs	r3, r2
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <xTaskPriorityDisinherit+0x108>)
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4a08      	ldr	r2, [pc, #32]	; (8006188 <xTaskPriorityDisinherit+0x104>)
 8006166:	441a      	add	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f7fe f945 	bl	80043fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006178:	697b      	ldr	r3, [r7, #20]
	}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20004f40 	.word	0x20004f40
 8006188:	20004f44 	.word	0x20004f44
 800618c:	20005048 	.word	0x20005048

08006190 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800619e:	2301      	movs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d077      	beq.n	8006298 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60fb      	str	r3, [r7, #12]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d902      	bls.n	80061d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	e002      	b.n	80061dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d058      	beq.n	8006298 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d153      	bne.n	8006298 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061f0:	4b2b      	ldr	r3, [pc, #172]	; (80062a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d10a      	bne.n	8006210 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	60bb      	str	r3, [r7, #8]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db04      	blt.n	800622e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f1c3 0207 	rsb	r2, r3, #7
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	6959      	ldr	r1, [r3, #20]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800623e:	4413      	add	r3, r2
 8006240:	4299      	cmp	r1, r3
 8006242:	d129      	bne.n	8006298 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe f935 	bl	80044b8 <uxListRemove>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	2201      	movs	r2, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43da      	mvns	r2, r3
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4013      	ands	r3, r2
 8006266:	4a10      	ldr	r2, [pc, #64]	; (80062a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006268:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	2201      	movs	r2, #1
 8006270:	409a      	lsls	r2, r3
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	4a0b      	ldr	r2, [pc, #44]	; (80062a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800628a:	441a      	add	r2, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fe f8b3 	bl	80043fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006298:	bf00      	nop
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20004f40 	.word	0x20004f40
 80062a4:	20004f44 	.word	0x20004f44
 80062a8:	20005048 	.word	0x20005048

080062ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062be:	3201      	adds	r2, #1
 80062c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80062c4:	681b      	ldr	r3, [r3, #0]
	}
 80062c6:	4618      	mov	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20004f40 	.word	0x20004f40

080062d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062de:	4b29      	ldr	r3, [pc, #164]	; (8006384 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e4:	4b28      	ldr	r3, [pc, #160]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe f8e4 	bl	80044b8 <uxListRemove>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	2201      	movs	r2, #1
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43da      	mvns	r2, r3
 8006304:	4b21      	ldr	r3, [pc, #132]	; (800638c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4013      	ands	r3, r2
 800630a:	4a20      	ldr	r2, [pc, #128]	; (800638c <prvAddCurrentTaskToDelayedList+0xb8>)
 800630c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d10a      	bne.n	800632c <prvAddCurrentTaskToDelayedList+0x58>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800631c:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	481a      	ldr	r0, [pc, #104]	; (8006390 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006326:	f7fe f86a 	bl	80043fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800632a:	e026      	b.n	800637a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4413      	add	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006334:	4b14      	ldr	r3, [pc, #80]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	429a      	cmp	r2, r3
 8006342:	d209      	bcs.n	8006358 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fe f878 	bl	8004446 <vListInsert>
}
 8006356:	e010      	b.n	800637a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006358:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <prvAddCurrentTaskToDelayedList+0xc4>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe f86e 	bl	8004446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <prvAddCurrentTaskToDelayedList+0xc8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	429a      	cmp	r2, r3
 8006372:	d202      	bcs.n	800637a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006374:	4a09      	ldr	r2, [pc, #36]	; (800639c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6013      	str	r3, [r2, #0]
}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20005044 	.word	0x20005044
 8006388:	20004f40 	.word	0x20004f40
 800638c:	20005048 	.word	0x20005048
 8006390:	2000502c 	.word	0x2000502c
 8006394:	20004ffc 	.word	0x20004ffc
 8006398:	20004ff8 	.word	0x20004ff8
 800639c:	20005060 	.word	0x20005060

080063a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b04      	subs	r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b04      	subs	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063d0:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <pxPortInitialiseStack+0x64>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3b14      	subs	r3, #20
 80063da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f06f 0202 	mvn.w	r2, #2
 80063ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3b20      	subs	r3, #32
 80063f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	08006409 	.word	0x08006409

08006408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <prvTaskExitError+0x54>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d00a      	beq.n	8006432 <prvTaskExitError+0x2a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <prvTaskExitError+0x28>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006446:	bf00      	nop
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0fc      	beq.n	8006448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000020 	.word	0x20000020

08006460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	20004f40 	.word	0x20004f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <prvPortStartFirstTask+0x24>)
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	6800      	ldr	r0, [r0, #0]
 800648e:	f380 8808 	msr	MSP, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8814 	msr	CONTROL, r0
 800649a:	b662      	cpsie	i
 800649c:	b661      	cpsie	f
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	df00      	svc	0
 80064a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064aa:	bf00      	nop
 80064ac:	e000ed08 	.word	0xe000ed08

080064b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064b6:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <xPortStartScheduler+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x26>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xPortStartScheduler+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <xPortStartScheduler+0x12c>)
 80064f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <xPortStartScheduler+0x130>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xPortStartScheduler+0x134>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <xPortStartScheduler+0x134>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00a      	beq.n	8006568 <xPortStartScheduler+0xb8>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xPortStartScheduler+0x134>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <xPortStartScheduler+0x134>)
 8006570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xPortStartScheduler+0x134>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <xPortStartScheduler+0x134>)
 800657c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <xPortStartScheduler+0x138>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <xPortStartScheduler+0x138>)
 800658c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xPortStartScheduler+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <xPortStartScheduler+0x138>)
 8006598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800659e:	f000 f8dd 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <xPortStartScheduler+0x13c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065a8:	f000 f8fc 	bl	80067a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <xPortStartScheduler+0x140>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <xPortStartScheduler+0x140>)
 80065b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b8:	f7ff ff66 	bl	8006488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065bc:	f7ff fa92 	bl	8005ae4 <vTaskSwitchContext>
	prvTaskExitError();
 80065c0:	f7ff ff22 	bl	8006408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	410fc271 	.word	0x410fc271
 80065d8:	410fc270 	.word	0x410fc270
 80065dc:	e000e400 	.word	0xe000e400
 80065e0:	2000506c 	.word	0x2000506c
 80065e4:	20005070 	.word	0x20005070
 80065e8:	e000ed20 	.word	0xe000ed20
 80065ec:	20000020 	.word	0x20000020
 80065f0:	e000ef34 	.word	0xe000ef34

080065f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <vPortEnterCritical+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <vPortEnterCritical+0x58>)
 8006616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vPortEnterCritical+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortEnterCritical+0x5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <vPortEnterCritical+0x4c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortEnterCritical+0x4a>
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	20000020 	.word	0x20000020
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vPortExitCritical+0x50>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vPortExitCritical+0x24>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vPortExitCritical+0x50>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortExitCritical+0x50>)
 8006680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <vPortExitCritical+0x42>
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20000020 	.word	0x20000020
	...

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f01e 0f10 	tst.w	lr, #16
 80066c0:	bf08      	it	eq
 80066c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	6010      	str	r0, [r2, #0]
 80066cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066d4:	f380 8811 	msr	BASEPRI, r0
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f7ff fa00 	bl	8005ae4 <vTaskSwitchContext>
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f380 8811 	msr	BASEPRI, r0
 80066ec:	bc09      	pop	{r0, r3}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf08      	it	eq
 80066fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006700:	f380 8809 	msr	PSP, r0
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst>:
 8006710:	20004f40 	.word	0x20004f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7ff f91f 	bl	8005974 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <xPortSysTickHandler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortSetupTimerInterrupt+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <vPortSetupTimerInterrupt+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x40>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vPortSetupTimerInterrupt+0x44>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010
 8006794:	e000e018 	.word	0xe000e018
 8006798:	20000000 	.word	0x20000000
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	e000e014 	.word	0xe000e014

080067a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b4 <vPortEnableVFP+0x10>
 80067a8:	6801      	ldr	r1, [r0, #0]
 80067aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ae:	6001      	str	r1, [r0, #0]
 80067b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed88 	.word	0xe000ed88

080067b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067be:	f3ef 8305 	mrs	r3, IPSR
 80067c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d914      	bls.n	80067f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <vPortValidateInterruptPriority+0x70>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <vPortValidateInterruptPriority+0x74>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20a      	bcs.n	80067f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <vPortValidateInterruptPriority+0x78>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <vPortValidateInterruptPriority+0x7c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d90a      	bls.n	800681a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	603b      	str	r3, [r7, #0]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <vPortValidateInterruptPriority+0x60>
	}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	e000e3f0 	.word	0xe000e3f0
 800682c:	2000506c 	.word	0x2000506c
 8006830:	e000ed0c 	.word	0xe000ed0c
 8006834:	20005070 	.word	0x20005070

08006838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006844:	f7fe ffca 	bl	80057dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <pvPortMalloc+0x180>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006850:	f000 f920 	bl	8006a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 8093 	bne.w	8006988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01d      	beq.n	80068a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006868:	2208      	movs	r2, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <pvPortMalloc+0x6c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d06e      	beq.n	8006988 <pvPortMalloc+0x150>
 80068aa:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <pvPortMalloc+0x188>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d869      	bhi.n	8006988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <pvPortMalloc+0x18c>)
 80068b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <pvPortMalloc+0x18c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0xa4>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <pvPortMalloc+0x180>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d050      	beq.n	8006988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2308      	movs	r3, #8
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d91f      	bls.n	8006948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <pvPortMalloc+0xf8>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	613b      	str	r3, [r7, #16]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f000 f908 	bl	8006b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <pvPortMalloc+0x188>)
 8006954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <pvPortMalloc+0x188>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <pvPortMalloc+0x190>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d203      	bcs.n	800696a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x190>)
 8006968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <pvPortMalloc+0x194>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <pvPortMalloc+0x194>)
 8006986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006988:	f7fe ff36 	bl	80057f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <pvPortMalloc+0x174>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <pvPortMalloc+0x172>
	return pvReturn;
 80069ac:	69fb      	ldr	r3, [r7, #28]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20008c7c 	.word	0x20008c7c
 80069bc:	20008c90 	.word	0x20008c90
 80069c0:	20008c80 	.word	0x20008c80
 80069c4:	20008c74 	.word	0x20008c74
 80069c8:	20008c84 	.word	0x20008c84
 80069cc:	20008c88 	.word	0x20008c88

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04d      	beq.n	8006a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vPortFree+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vPortFree+0x44>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <vPortFree+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <vPortFree+0xb8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <vPortFree+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7fe fec0 	bl	80057dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vPortFree+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <vPortFree+0xbc>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f874 	bl	8006b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortFree+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <vPortFree+0xc0>)
 8006a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a7a:	f7fe febd 	bl	80057f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20008c90 	.word	0x20008c90
 8006a8c:	20008c80 	.word	0x20008c80
 8006a90:	20008c8c 	.word	0x20008c8c

08006a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <prvHeapInit+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvHeapInit+0xac>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <prvHeapInit+0xb0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <prvHeapInit+0xb0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvHeapInit+0xb4>)
 8006af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvHeapInit+0xb4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvHeapInit+0xb4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvHeapInit+0xb8>)
 8006b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvHeapInit+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvHeapInit+0xc0>)
 8006b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	20005074 	.word	0x20005074
 8006b44:	20008c74 	.word	0x20008c74
 8006b48:	20008c7c 	.word	0x20008c7c
 8006b4c:	20008c84 	.word	0x20008c84
 8006b50:	20008c80 	.word	0x20008c80
 8006b54:	20008c90 	.word	0x20008c90

08006b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <prvInsertBlockIntoFreeList+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e002      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x14>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f7      	bhi.n	8006b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d118      	bne.n	8006be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e008      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e003      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20008c74 	.word	0x20008c74
 8006c08:	20008c7c 	.word	0x20008c7c

08006c0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006c16:	f007 fae1 	bl	800e1dc <sys_timeouts_sleeptime>
 8006c1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d10b      	bne.n	8006c3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006c24:	4813      	ldr	r0, [pc, #76]	; (8006c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8006c26:	f00c fa0c 	bl	8013042 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f00c f97e 	bl	8012f30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006c34:	480f      	ldr	r0, [pc, #60]	; (8006c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8006c36:	f00c f9f5 	bl	8013024 <sys_mutex_lock>
    return;
 8006c3a:	e018      	b.n	8006c6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8006c42:	f007 fa91 	bl	800e168 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006c46:	e7e6      	b.n	8006c16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8006c48:	480a      	ldr	r0, [pc, #40]	; (8006c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8006c4a:	f00c f9fa 	bl	8013042 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f00c f96c 	bl	8012f30 <sys_arch_mbox_fetch>
 8006c58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8006c5a:	4806      	ldr	r0, [pc, #24]	; (8006c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8006c5c:	f00c f9e2 	bl	8013024 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d102      	bne.n	8006c6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8006c68:	f007 fa7e 	bl	800e168 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006c6c:	e7d3      	b.n	8006c16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20008ca0 	.word	0x20008ca0

08006c78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006c80:	4810      	ldr	r0, [pc, #64]	; (8006cc4 <tcpip_thread+0x4c>)
 8006c82:	f00c f9cf 	bl	8013024 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006c86:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <tcpip_thread+0x50>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <tcpip_thread+0x50>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a0e      	ldr	r2, [pc, #56]	; (8006ccc <tcpip_thread+0x54>)
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	4610      	mov	r0, r2
 8006c98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006c9a:	f107 030c 	add.w	r3, r7, #12
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	480b      	ldr	r0, [pc, #44]	; (8006cd0 <tcpip_thread+0x58>)
 8006ca2:	f7ff ffb3 	bl	8006c0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <tcpip_thread+0x5c>)
 8006cae:	2291      	movs	r2, #145	; 0x91
 8006cb0:	4909      	ldr	r1, [pc, #36]	; (8006cd8 <tcpip_thread+0x60>)
 8006cb2:	480a      	ldr	r0, [pc, #40]	; (8006cdc <tcpip_thread+0x64>)
 8006cb4:	f00d f8e0 	bl	8013e78 <iprintf>
      continue;
 8006cb8:	e003      	b.n	8006cc2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f80f 	bl	8006ce0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006cc2:	e7ea      	b.n	8006c9a <tcpip_thread+0x22>
 8006cc4:	20008ca0 	.word	0x20008ca0
 8006cc8:	20008c94 	.word	0x20008c94
 8006ccc:	20008c98 	.word	0x20008c98
 8006cd0:	20008c9c 	.word	0x20008c9c
 8006cd4:	08017494 	.word	0x08017494
 8006cd8:	080174c4 	.word	0x080174c4
 8006cdc:	080174e4 	.word	0x080174e4

08006ce0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d026      	beq.n	8006d3e <tcpip_thread_handle_msg+0x5e>
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	dc2b      	bgt.n	8006d4c <tcpip_thread_handle_msg+0x6c>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <tcpip_thread_handle_msg+0x1e>
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d015      	beq.n	8006d28 <tcpip_thread_handle_msg+0x48>
 8006cfc:	e026      	b.n	8006d4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6850      	ldr	r0, [r2, #4]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6892      	ldr	r2, [r2, #8]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fd17 	bl	800874c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	2009      	movs	r0, #9
 8006d22:	f000 fe63 	bl	80079ec <memp_free>
      break;
 8006d26:	e018      	b.n	8006d5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6892      	ldr	r2, [r2, #8]
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	2008      	movs	r0, #8
 8006d38:	f000 fe58 	bl	80079ec <memp_free>
      break;
 8006d3c:	e00d      	b.n	8006d5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6892      	ldr	r2, [r2, #8]
 8006d46:	4610      	mov	r0, r2
 8006d48:	4798      	blx	r3
      break;
 8006d4a:	e006      	b.n	8006d5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <tcpip_thread_handle_msg+0x84>)
 8006d4e:	22cf      	movs	r2, #207	; 0xcf
 8006d50:	4905      	ldr	r1, [pc, #20]	; (8006d68 <tcpip_thread_handle_msg+0x88>)
 8006d52:	4806      	ldr	r0, [pc, #24]	; (8006d6c <tcpip_thread_handle_msg+0x8c>)
 8006d54:	f00d f890 	bl	8013e78 <iprintf>
      break;
 8006d58:	bf00      	nop
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	08017494 	.word	0x08017494
 8006d68:	080174c4 	.word	0x080174c4
 8006d6c:	080174e4 	.word	0x080174e4

08006d70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006d7c:	481a      	ldr	r0, [pc, #104]	; (8006de8 <tcpip_inpkt+0x78>)
 8006d7e:	f00c f916 	bl	8012fae <sys_mbox_valid>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <tcpip_inpkt+0x24>
 8006d88:	4b18      	ldr	r3, [pc, #96]	; (8006dec <tcpip_inpkt+0x7c>)
 8006d8a:	22fc      	movs	r2, #252	; 0xfc
 8006d8c:	4918      	ldr	r1, [pc, #96]	; (8006df0 <tcpip_inpkt+0x80>)
 8006d8e:	4819      	ldr	r0, [pc, #100]	; (8006df4 <tcpip_inpkt+0x84>)
 8006d90:	f00d f872 	bl	8013e78 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006d94:	2009      	movs	r0, #9
 8006d96:	f000 fdb3 	bl	8007900 <memp_malloc>
 8006d9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295
 8006da6:	e01a      	b.n	8006dde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006dc0:	6979      	ldr	r1, [r7, #20]
 8006dc2:	4809      	ldr	r0, [pc, #36]	; (8006de8 <tcpip_inpkt+0x78>)
 8006dc4:	f00c f89a 	bl	8012efc <sys_mbox_trypost>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d006      	beq.n	8006ddc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	2009      	movs	r0, #9
 8006dd2:	f000 fe0b 	bl	80079ec <memp_free>
    return ERR_MEM;
 8006dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dda:	e000      	b.n	8006dde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8006ddc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20008c9c 	.word	0x20008c9c
 8006dec:	08017494 	.word	0x08017494
 8006df0:	0801750c 	.word	0x0801750c
 8006df4:	080174e4 	.word	0x080174e4

08006df8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e08:	f003 0318 	and.w	r3, r3, #24
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006e10:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <tcpip_input+0x3c>)
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ffab 	bl	8006d70 <tcpip_inpkt>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	e005      	b.n	8006e2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006e1e:	4a06      	ldr	r2, [pc, #24]	; (8006e38 <tcpip_input+0x40>)
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff ffa4 	bl	8006d70 <tcpip_inpkt>
 8006e28:	4603      	mov	r3, r0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	08012d0d 	.word	0x08012d0d
 8006e38:	08011bd9 	.word	0x08011bd9

08006e3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006e46:	4819      	ldr	r0, [pc, #100]	; (8006eac <tcpip_try_callback+0x70>)
 8006e48:	f00c f8b1 	bl	8012fae <sys_mbox_valid>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <tcpip_try_callback+0x24>
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <tcpip_try_callback+0x74>)
 8006e54:	f240 125d 	movw	r2, #349	; 0x15d
 8006e58:	4916      	ldr	r1, [pc, #88]	; (8006eb4 <tcpip_try_callback+0x78>)
 8006e5a:	4817      	ldr	r0, [pc, #92]	; (8006eb8 <tcpip_try_callback+0x7c>)
 8006e5c:	f00d f80c 	bl	8013e78 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006e60:	2008      	movs	r0, #8
 8006e62:	f000 fd4d 	bl	8007900 <memp_malloc>
 8006e66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8006e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e72:	e017      	b.n	8006ea4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	4808      	ldr	r0, [pc, #32]	; (8006eac <tcpip_try_callback+0x70>)
 8006e8a:	f00c f837 	bl	8012efc <sys_mbox_trypost>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	2008      	movs	r0, #8
 8006e98:	f000 fda8 	bl	80079ec <memp_free>
    return ERR_MEM;
 8006e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea0:	e000      	b.n	8006ea4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20008c9c 	.word	0x20008c9c
 8006eb0:	08017494 	.word	0x08017494
 8006eb4:	0801750c 	.word	0x0801750c
 8006eb8:	080174e4 	.word	0x080174e4

08006ebc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006ec6:	f000 f871 	bl	8006fac <lwip_init>

  tcpip_init_done = initfunc;
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <tcpip_init+0x6c>)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8006ed0:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <tcpip_init+0x70>)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006ed6:	2106      	movs	r1, #6
 8006ed8:	4815      	ldr	r0, [pc, #84]	; (8006f30 <tcpip_init+0x74>)
 8006eda:	f00b ffed 	bl	8012eb8 <sys_mbox_new>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006ee4:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <tcpip_init+0x78>)
 8006ee6:	f240 2261 	movw	r2, #609	; 0x261
 8006eea:	4913      	ldr	r1, [pc, #76]	; (8006f38 <tcpip_init+0x7c>)
 8006eec:	4813      	ldr	r0, [pc, #76]	; (8006f3c <tcpip_init+0x80>)
 8006eee:	f00c ffc3 	bl	8013e78 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006ef2:	4813      	ldr	r0, [pc, #76]	; (8006f40 <tcpip_init+0x84>)
 8006ef4:	f00c f87a 	bl	8012fec <sys_mutex_new>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006efe:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <tcpip_init+0x78>)
 8006f00:	f240 2265 	movw	r2, #613	; 0x265
 8006f04:	490f      	ldr	r1, [pc, #60]	; (8006f44 <tcpip_init+0x88>)
 8006f06:	480d      	ldr	r0, [pc, #52]	; (8006f3c <tcpip_init+0x80>)
 8006f08:	f00c ffb6 	bl	8013e78 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f14:	2200      	movs	r2, #0
 8006f16:	490c      	ldr	r1, [pc, #48]	; (8006f48 <tcpip_init+0x8c>)
 8006f18:	480c      	ldr	r0, [pc, #48]	; (8006f4c <tcpip_init+0x90>)
 8006f1a:	f00c f89f 	bl	801305c <sys_thread_new>
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20008c94 	.word	0x20008c94
 8006f2c:	20008c98 	.word	0x20008c98
 8006f30:	20008c9c 	.word	0x20008c9c
 8006f34:	08017494 	.word	0x08017494
 8006f38:	0801751c 	.word	0x0801751c
 8006f3c:	080174e4 	.word	0x080174e4
 8006f40:	20008ca0 	.word	0x20008ca0
 8006f44:	08017540 	.word	0x08017540
 8006f48:	08006c79 	.word	0x08006c79
 8006f4c:	08017564 	.word	0x08017564

08006f50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	b21a      	sxth	r2, r3
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	b21b      	sxth	r3, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	b21b      	sxth	r3, r3
 8006f6c:	b29b      	uxth	r3, r3
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	061a      	lsls	r2, r3, #24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0e1b      	lsrs	r3, r3, #24
 8006f9e:	4313      	orrs	r3, r2
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006fb6:	f00c f80b 	bl	8012fd0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006fba:	f000 f8d5 	bl	8007168 <mem_init>
  memp_init();
 8006fbe:	f000 fc31 	bl	8007824 <memp_init>
  pbuf_init();
  netif_init();
 8006fc2:	f000 fd3d 	bl	8007a40 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006fc6:	f007 f941 	bl	800e24c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006fca:	f001 fe69 	bl	8008ca0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006fce:	f007 f883 	bl	800e0d8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <ptr_to_mem+0x20>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	4413      	add	r3, r2
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20009310 	.word	0x20009310

08007000 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <mem_to_ptr+0x20>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	b29b      	uxth	r3, r3
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20009310 	.word	0x20009310

08007024 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007024:	b590      	push	{r4, r7, lr}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800702c:	4b45      	ldr	r3, [pc, #276]	; (8007144 <plug_holes+0x120>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d206      	bcs.n	8007044 <plug_holes+0x20>
 8007036:	4b44      	ldr	r3, [pc, #272]	; (8007148 <plug_holes+0x124>)
 8007038:	f240 12df 	movw	r2, #479	; 0x1df
 800703c:	4943      	ldr	r1, [pc, #268]	; (800714c <plug_holes+0x128>)
 800703e:	4844      	ldr	r0, [pc, #272]	; (8007150 <plug_holes+0x12c>)
 8007040:	f00c ff1a 	bl	8013e78 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007044:	4b43      	ldr	r3, [pc, #268]	; (8007154 <plug_holes+0x130>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	429a      	cmp	r2, r3
 800704c:	d306      	bcc.n	800705c <plug_holes+0x38>
 800704e:	4b3e      	ldr	r3, [pc, #248]	; (8007148 <plug_holes+0x124>)
 8007050:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007054:	4940      	ldr	r1, [pc, #256]	; (8007158 <plug_holes+0x134>)
 8007056:	483e      	ldr	r0, [pc, #248]	; (8007150 <plug_holes+0x12c>)
 8007058:	f00c ff0e 	bl	8013e78 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	791b      	ldrb	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d006      	beq.n	8007072 <plug_holes+0x4e>
 8007064:	4b38      	ldr	r3, [pc, #224]	; (8007148 <plug_holes+0x124>)
 8007066:	f240 12e1 	movw	r2, #481	; 0x1e1
 800706a:	493c      	ldr	r1, [pc, #240]	; (800715c <plug_holes+0x138>)
 800706c:	4838      	ldr	r0, [pc, #224]	; (8007150 <plug_holes+0x12c>)
 800706e:	f00c ff03 	bl	8013e78 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800707a:	d906      	bls.n	800708a <plug_holes+0x66>
 800707c:	4b32      	ldr	r3, [pc, #200]	; (8007148 <plug_holes+0x124>)
 800707e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007082:	4937      	ldr	r1, [pc, #220]	; (8007160 <plug_holes+0x13c>)
 8007084:	4832      	ldr	r0, [pc, #200]	; (8007150 <plug_holes+0x12c>)
 8007086:	f00c fef7 	bl	8013e78 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ffa4 	bl	8006fdc <ptr_to_mem>
 8007094:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	429a      	cmp	r2, r3
 800709c:	d024      	beq.n	80070e8 <plug_holes+0xc4>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d120      	bne.n	80070e8 <plug_holes+0xc4>
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <plug_holes+0x130>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d01b      	beq.n	80070e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80070b0:	4b2c      	ldr	r3, [pc, #176]	; (8007164 <plug_holes+0x140>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d102      	bne.n	80070c0 <plug_holes+0x9c>
      lfree = mem;
 80070ba:	4a2a      	ldr	r2, [pc, #168]	; (8007164 <plug_holes+0x140>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	881a      	ldrh	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80070d0:	d00a      	beq.n	80070e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff80 	bl	8006fdc <ptr_to_mem>
 80070dc:	4604      	mov	r4, r0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ff8e 	bl	8007000 <mem_to_ptr>
 80070e4:	4603      	mov	r3, r0
 80070e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	885b      	ldrh	r3, [r3, #2]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ff75 	bl	8006fdc <ptr_to_mem>
 80070f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d01f      	beq.n	800713c <plug_holes+0x118>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	791b      	ldrb	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d11b      	bne.n	800713c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <plug_holes+0x140>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	429a      	cmp	r2, r3
 800710c:	d102      	bne.n	8007114 <plug_holes+0xf0>
      lfree = pmem;
 800710e:	4a15      	ldr	r2, [pc, #84]	; (8007164 <plug_holes+0x140>)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	881a      	ldrh	r2, [r3, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007124:	d00a      	beq.n	800713c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff56 	bl	8006fdc <ptr_to_mem>
 8007130:	4604      	mov	r4, r0
 8007132:	68b8      	ldr	r0, [r7, #8]
 8007134:	f7ff ff64 	bl	8007000 <mem_to_ptr>
 8007138:	4603      	mov	r3, r0
 800713a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	bd90      	pop	{r4, r7, pc}
 8007144:	20009310 	.word	0x20009310
 8007148:	08017574 	.word	0x08017574
 800714c:	080175a4 	.word	0x080175a4
 8007150:	080175bc 	.word	0x080175bc
 8007154:	20009314 	.word	0x20009314
 8007158:	080175e4 	.word	0x080175e4
 800715c:	08017600 	.word	0x08017600
 8007160:	0801761c 	.word	0x0801761c
 8007164:	2000931c 	.word	0x2000931c

08007168 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800716e:	4b1f      	ldr	r3, [pc, #124]	; (80071ec <mem_init+0x84>)
 8007170:	3303      	adds	r3, #3
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	461a      	mov	r2, r3
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <mem_init+0x88>)
 800717a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800717c:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <mem_init+0x88>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007188:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007196:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800719a:	f7ff ff1f 	bl	8006fdc <ptr_to_mem>
 800719e:	4603      	mov	r3, r0
 80071a0:	4a14      	ldr	r2, [pc, #80]	; (80071f4 <mem_init+0x8c>)
 80071a2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <mem_init+0x8c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2201      	movs	r2, #1
 80071aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <mem_init+0x8c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80071b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <mem_init+0x8c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80071be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <mem_init+0x88>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a0c      	ldr	r2, [pc, #48]	; (80071f8 <mem_init+0x90>)
 80071c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80071c8:	480c      	ldr	r0, [pc, #48]	; (80071fc <mem_init+0x94>)
 80071ca:	f00b ff0f 	bl	8012fec <sys_mutex_new>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80071d4:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <mem_init+0x98>)
 80071d6:	f240 221f 	movw	r2, #543	; 0x21f
 80071da:	490a      	ldr	r1, [pc, #40]	; (8007204 <mem_init+0x9c>)
 80071dc:	480a      	ldr	r0, [pc, #40]	; (8007208 <mem_init+0xa0>)
 80071de:	f00c fe4b 	bl	8013e78 <iprintf>
  }
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20008cbc 	.word	0x20008cbc
 80071f0:	20009310 	.word	0x20009310
 80071f4:	20009314 	.word	0x20009314
 80071f8:	2000931c 	.word	0x2000931c
 80071fc:	20009318 	.word	0x20009318
 8007200:	08017574 	.word	0x08017574
 8007204:	08017648 	.word	0x08017648
 8007208:	080175bc 	.word	0x080175bc

0800720c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fef3 	bl	8007000 <mem_to_ptr>
 800721a:	4603      	mov	r3, r0
 800721c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff feda 	bl	8006fdc <ptr_to_mem>
 8007228:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	885b      	ldrh	r3, [r3, #2]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fed4 	bl	8006fdc <ptr_to_mem>
 8007234:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800723e:	d818      	bhi.n	8007272 <mem_link_valid+0x66>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	885b      	ldrh	r3, [r3, #2]
 8007244:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007248:	d813      	bhi.n	8007272 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800724e:	8afa      	ldrh	r2, [r7, #22]
 8007250:	429a      	cmp	r2, r3
 8007252:	d004      	beq.n	800725e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	8afa      	ldrh	r2, [r7, #22]
 800725a:	429a      	cmp	r2, r3
 800725c:	d109      	bne.n	8007272 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <mem_link_valid+0x74>)
 8007260:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d006      	beq.n	8007276 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	8afa      	ldrh	r2, [r7, #22]
 800726e:	429a      	cmp	r2, r3
 8007270:	d001      	beq.n	8007276 <mem_link_valid+0x6a>
    return 0;
 8007272:	2300      	movs	r3, #0
 8007274:	e000      	b.n	8007278 <mem_link_valid+0x6c>
  }
  return 1;
 8007276:	2301      	movs	r3, #1
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20009314 	.word	0x20009314

08007284 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d070      	beq.n	8007374 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800729c:	4b37      	ldr	r3, [pc, #220]	; (800737c <mem_free+0xf8>)
 800729e:	f240 2273 	movw	r2, #627	; 0x273
 80072a2:	4937      	ldr	r1, [pc, #220]	; (8007380 <mem_free+0xfc>)
 80072a4:	4837      	ldr	r0, [pc, #220]	; (8007384 <mem_free+0x100>)
 80072a6:	f00c fde7 	bl	8013e78 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80072aa:	f00b fefd 	bl	80130a8 <sys_arch_protect>
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f00b ff07 	bl	80130c4 <sys_arch_unprotect>
    return;
 80072b6:	e05e      	b.n	8007376 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3b08      	subs	r3, #8
 80072bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80072be:	4b32      	ldr	r3, [pc, #200]	; (8007388 <mem_free+0x104>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d306      	bcc.n	80072d6 <mem_free+0x52>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f103 020c 	add.w	r2, r3, #12
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <mem_free+0x108>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d90d      	bls.n	80072f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80072d6:	4b29      	ldr	r3, [pc, #164]	; (800737c <mem_free+0xf8>)
 80072d8:	f240 227f 	movw	r2, #639	; 0x27f
 80072dc:	492c      	ldr	r1, [pc, #176]	; (8007390 <mem_free+0x10c>)
 80072de:	4829      	ldr	r0, [pc, #164]	; (8007384 <mem_free+0x100>)
 80072e0:	f00c fdca 	bl	8013e78 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80072e4:	f00b fee0 	bl	80130a8 <sys_arch_protect>
 80072e8:	6138      	str	r0, [r7, #16]
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f00b feea 	bl	80130c4 <sys_arch_unprotect>
    return;
 80072f0:	e041      	b.n	8007376 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80072f2:	4828      	ldr	r0, [pc, #160]	; (8007394 <mem_free+0x110>)
 80072f4:	f00b fe96 	bl	8013024 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	791b      	ldrb	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d110      	bne.n	8007322 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007300:	4b1e      	ldr	r3, [pc, #120]	; (800737c <mem_free+0xf8>)
 8007302:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007306:	4924      	ldr	r1, [pc, #144]	; (8007398 <mem_free+0x114>)
 8007308:	481e      	ldr	r0, [pc, #120]	; (8007384 <mem_free+0x100>)
 800730a:	f00c fdb5 	bl	8013e78 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800730e:	4821      	ldr	r0, [pc, #132]	; (8007394 <mem_free+0x110>)
 8007310:	f00b fe97 	bl	8013042 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007314:	f00b fec8 	bl	80130a8 <sys_arch_protect>
 8007318:	6178      	str	r0, [r7, #20]
 800731a:	6978      	ldr	r0, [r7, #20]
 800731c:	f00b fed2 	bl	80130c4 <sys_arch_unprotect>
    return;
 8007320:	e029      	b.n	8007376 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007322:	69f8      	ldr	r0, [r7, #28]
 8007324:	f7ff ff72 	bl	800720c <mem_link_valid>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d110      	bne.n	8007350 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <mem_free+0xf8>)
 8007330:	f240 2295 	movw	r2, #661	; 0x295
 8007334:	4919      	ldr	r1, [pc, #100]	; (800739c <mem_free+0x118>)
 8007336:	4813      	ldr	r0, [pc, #76]	; (8007384 <mem_free+0x100>)
 8007338:	f00c fd9e 	bl	8013e78 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800733c:	4815      	ldr	r0, [pc, #84]	; (8007394 <mem_free+0x110>)
 800733e:	f00b fe80 	bl	8013042 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007342:	f00b feb1 	bl	80130a8 <sys_arch_protect>
 8007346:	61b8      	str	r0, [r7, #24]
 8007348:	69b8      	ldr	r0, [r7, #24]
 800734a:	f00b febb 	bl	80130c4 <sys_arch_unprotect>
    return;
 800734e:	e012      	b.n	8007376 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2200      	movs	r2, #0
 8007354:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007356:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <mem_free+0x11c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	429a      	cmp	r2, r3
 800735e:	d202      	bcs.n	8007366 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007360:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <mem_free+0x11c>)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007366:	69f8      	ldr	r0, [r7, #28]
 8007368:	f7ff fe5c 	bl	8007024 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800736c:	4809      	ldr	r0, [pc, #36]	; (8007394 <mem_free+0x110>)
 800736e:	f00b fe68 	bl	8013042 <sys_mutex_unlock>
 8007372:	e000      	b.n	8007376 <mem_free+0xf2>
    return;
 8007374:	bf00      	nop
}
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08017574 	.word	0x08017574
 8007380:	08017664 	.word	0x08017664
 8007384:	080175bc 	.word	0x080175bc
 8007388:	20009310 	.word	0x20009310
 800738c:	20009314 	.word	0x20009314
 8007390:	08017688 	.word	0x08017688
 8007394:	20009318 	.word	0x20009318
 8007398:	080176a4 	.word	0x080176a4
 800739c:	080176cc 	.word	0x080176cc
 80073a0:	2000931c 	.word	0x2000931c

080073a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80073b0:	887b      	ldrh	r3, [r7, #2]
 80073b2:	3303      	adds	r3, #3
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80073bc:	8bfb      	ldrh	r3, [r7, #30]
 80073be:	2b0b      	cmp	r3, #11
 80073c0:	d801      	bhi.n	80073c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80073c2:	230c      	movs	r3, #12
 80073c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80073c6:	8bfb      	ldrh	r3, [r7, #30]
 80073c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073cc:	d803      	bhi.n	80073d6 <mem_trim+0x32>
 80073ce:	8bfa      	ldrh	r2, [r7, #30]
 80073d0:	887b      	ldrh	r3, [r7, #2]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d201      	bcs.n	80073da <mem_trim+0x36>
    return NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e0d8      	b.n	800758c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80073da:	4b6e      	ldr	r3, [pc, #440]	; (8007594 <mem_trim+0x1f0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d304      	bcc.n	80073ee <mem_trim+0x4a>
 80073e4:	4b6c      	ldr	r3, [pc, #432]	; (8007598 <mem_trim+0x1f4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d306      	bcc.n	80073fc <mem_trim+0x58>
 80073ee:	4b6b      	ldr	r3, [pc, #428]	; (800759c <mem_trim+0x1f8>)
 80073f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80073f4:	496a      	ldr	r1, [pc, #424]	; (80075a0 <mem_trim+0x1fc>)
 80073f6:	486b      	ldr	r0, [pc, #428]	; (80075a4 <mem_trim+0x200>)
 80073f8:	f00c fd3e 	bl	8013e78 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80073fc:	4b65      	ldr	r3, [pc, #404]	; (8007594 <mem_trim+0x1f0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d304      	bcc.n	8007410 <mem_trim+0x6c>
 8007406:	4b64      	ldr	r3, [pc, #400]	; (8007598 <mem_trim+0x1f4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d307      	bcc.n	8007420 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007410:	f00b fe4a 	bl	80130a8 <sys_arch_protect>
 8007414:	60b8      	str	r0, [r7, #8]
 8007416:	68b8      	ldr	r0, [r7, #8]
 8007418:	f00b fe54 	bl	80130c4 <sys_arch_unprotect>
    return rmem;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	e0b5      	b.n	800758c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3b08      	subs	r3, #8
 8007424:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007426:	69b8      	ldr	r0, [r7, #24]
 8007428:	f7ff fdea 	bl	8007000 <mem_to_ptr>
 800742c:	4603      	mov	r3, r0
 800742e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	881a      	ldrh	r2, [r3, #0]
 8007434:	8afb      	ldrh	r3, [r7, #22]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b08      	subs	r3, #8
 800743c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800743e:	8bfa      	ldrh	r2, [r7, #30]
 8007440:	8abb      	ldrh	r3, [r7, #20]
 8007442:	429a      	cmp	r2, r3
 8007444:	d906      	bls.n	8007454 <mem_trim+0xb0>
 8007446:	4b55      	ldr	r3, [pc, #340]	; (800759c <mem_trim+0x1f8>)
 8007448:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800744c:	4956      	ldr	r1, [pc, #344]	; (80075a8 <mem_trim+0x204>)
 800744e:	4855      	ldr	r0, [pc, #340]	; (80075a4 <mem_trim+0x200>)
 8007450:	f00c fd12 	bl	8013e78 <iprintf>
  if (newsize > size) {
 8007454:	8bfa      	ldrh	r2, [r7, #30]
 8007456:	8abb      	ldrh	r3, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d901      	bls.n	8007460 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	e095      	b.n	800758c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007460:	8bfa      	ldrh	r2, [r7, #30]
 8007462:	8abb      	ldrh	r3, [r7, #20]
 8007464:	429a      	cmp	r2, r3
 8007466:	d101      	bne.n	800746c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	e08f      	b.n	800758c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800746c:	484f      	ldr	r0, [pc, #316]	; (80075ac <mem_trim+0x208>)
 800746e:	f00b fdd9 	bl	8013024 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fdb0 	bl	8006fdc <ptr_to_mem>
 800747c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d13f      	bne.n	8007506 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800748e:	d106      	bne.n	800749e <mem_trim+0xfa>
 8007490:	4b42      	ldr	r3, [pc, #264]	; (800759c <mem_trim+0x1f8>)
 8007492:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007496:	4946      	ldr	r1, [pc, #280]	; (80075b0 <mem_trim+0x20c>)
 8007498:	4842      	ldr	r0, [pc, #264]	; (80075a4 <mem_trim+0x200>)
 800749a:	f00c fced 	bl	8013e78 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80074a4:	8afa      	ldrh	r2, [r7, #22]
 80074a6:	8bfb      	ldrh	r3, [r7, #30]
 80074a8:	4413      	add	r3, r2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3308      	adds	r3, #8
 80074ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80074b0:	4b40      	ldr	r3, [pc, #256]	; (80075b4 <mem_trim+0x210>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d106      	bne.n	80074c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80074ba:	89fb      	ldrh	r3, [r7, #14]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fd8d 	bl	8006fdc <ptr_to_mem>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a3b      	ldr	r2, [pc, #236]	; (80075b4 <mem_trim+0x210>)
 80074c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80074c8:	89fb      	ldrh	r3, [r7, #14]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fd86 	bl	8006fdc <ptr_to_mem>
 80074d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2200      	movs	r2, #0
 80074d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	89ba      	ldrh	r2, [r7, #12]
 80074dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	8afa      	ldrh	r2, [r7, #22]
 80074e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	89fa      	ldrh	r2, [r7, #14]
 80074e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074f2:	d047      	beq.n	8007584 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff fd6f 	bl	8006fdc <ptr_to_mem>
 80074fe:	4602      	mov	r2, r0
 8007500:	89fb      	ldrh	r3, [r7, #14]
 8007502:	8053      	strh	r3, [r2, #2]
 8007504:	e03e      	b.n	8007584 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007506:	8bfb      	ldrh	r3, [r7, #30]
 8007508:	f103 0214 	add.w	r2, r3, #20
 800750c:	8abb      	ldrh	r3, [r7, #20]
 800750e:	429a      	cmp	r2, r3
 8007510:	d838      	bhi.n	8007584 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007512:	8afa      	ldrh	r2, [r7, #22]
 8007514:	8bfb      	ldrh	r3, [r7, #30]
 8007516:	4413      	add	r3, r2
 8007518:	b29b      	uxth	r3, r3
 800751a:	3308      	adds	r3, #8
 800751c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007526:	d106      	bne.n	8007536 <mem_trim+0x192>
 8007528:	4b1c      	ldr	r3, [pc, #112]	; (800759c <mem_trim+0x1f8>)
 800752a:	f240 3216 	movw	r2, #790	; 0x316
 800752e:	4920      	ldr	r1, [pc, #128]	; (80075b0 <mem_trim+0x20c>)
 8007530:	481c      	ldr	r0, [pc, #112]	; (80075a4 <mem_trim+0x200>)
 8007532:	f00c fca1 	bl	8013e78 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007536:	89fb      	ldrh	r3, [r7, #14]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fd4f 	bl	8006fdc <ptr_to_mem>
 800753e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007540:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <mem_trim+0x210>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	d202      	bcs.n	8007550 <mem_trim+0x1ac>
      lfree = mem2;
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <mem_trim+0x210>)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2200      	movs	r2, #0
 8007554:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	881a      	ldrh	r2, [r3, #0]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	8afa      	ldrh	r2, [r7, #22]
 8007562:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	89fa      	ldrh	r2, [r7, #14]
 8007568:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007572:	d007      	beq.n	8007584 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fd2f 	bl	8006fdc <ptr_to_mem>
 800757e:	4602      	mov	r2, r0
 8007580:	89fb      	ldrh	r3, [r7, #14]
 8007582:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007584:	4809      	ldr	r0, [pc, #36]	; (80075ac <mem_trim+0x208>)
 8007586:	f00b fd5c 	bl	8013042 <sys_mutex_unlock>
  return rmem;
 800758a:	687b      	ldr	r3, [r7, #4]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20009310 	.word	0x20009310
 8007598:	20009314 	.word	0x20009314
 800759c:	08017574 	.word	0x08017574
 80075a0:	08017700 	.word	0x08017700
 80075a4:	080175bc 	.word	0x080175bc
 80075a8:	08017718 	.word	0x08017718
 80075ac:	20009318 	.word	0x20009318
 80075b0:	08017738 	.word	0x08017738
 80075b4:	2000931c 	.word	0x2000931c

080075b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <mem_malloc+0x14>
    return NULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e0e2      	b.n	8007792 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	3303      	adds	r3, #3
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f023 0303 	bic.w	r3, r3, #3
 80075d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80075d8:	8bbb      	ldrh	r3, [r7, #28]
 80075da:	2b0b      	cmp	r3, #11
 80075dc:	d801      	bhi.n	80075e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80075de:	230c      	movs	r3, #12
 80075e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80075e2:	8bbb      	ldrh	r3, [r7, #28]
 80075e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075e8:	d803      	bhi.n	80075f2 <mem_malloc+0x3a>
 80075ea:	8bba      	ldrh	r2, [r7, #28]
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d201      	bcs.n	80075f6 <mem_malloc+0x3e>
    return NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	e0cd      	b.n	8007792 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80075f6:	4869      	ldr	r0, [pc, #420]	; (800779c <mem_malloc+0x1e4>)
 80075f8:	f00b fd14 	bl	8013024 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80075fc:	4b68      	ldr	r3, [pc, #416]	; (80077a0 <mem_malloc+0x1e8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fcfd 	bl	8007000 <mem_to_ptr>
 8007606:	4603      	mov	r3, r0
 8007608:	83fb      	strh	r3, [r7, #30]
 800760a:	e0b7      	b.n	800777c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800760c:	8bfb      	ldrh	r3, [r7, #30]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff fce4 	bl	8006fdc <ptr_to_mem>
 8007614:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	791b      	ldrb	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f040 80a7 	bne.w	800776e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	8bfb      	ldrh	r3, [r7, #30]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f1a3 0208 	sub.w	r2, r3, #8
 800762e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007630:	429a      	cmp	r2, r3
 8007632:	f0c0 809c 	bcc.w	800776e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	8bfb      	ldrh	r3, [r7, #30]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f1a3 0208 	sub.w	r2, r3, #8
 8007644:	8bbb      	ldrh	r3, [r7, #28]
 8007646:	3314      	adds	r3, #20
 8007648:	429a      	cmp	r2, r3
 800764a:	d333      	bcc.n	80076b4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800764c:	8bfa      	ldrh	r2, [r7, #30]
 800764e:	8bbb      	ldrh	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	b29b      	uxth	r3, r3
 8007654:	3308      	adds	r3, #8
 8007656:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007658:	8a7b      	ldrh	r3, [r7, #18]
 800765a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800765e:	d106      	bne.n	800766e <mem_malloc+0xb6>
 8007660:	4b50      	ldr	r3, [pc, #320]	; (80077a4 <mem_malloc+0x1ec>)
 8007662:	f240 3287 	movw	r2, #903	; 0x387
 8007666:	4950      	ldr	r1, [pc, #320]	; (80077a8 <mem_malloc+0x1f0>)
 8007668:	4850      	ldr	r0, [pc, #320]	; (80077ac <mem_malloc+0x1f4>)
 800766a:	f00c fc05 	bl	8013e78 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800766e:	8a7b      	ldrh	r3, [r7, #18]
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fcb3 	bl	8006fdc <ptr_to_mem>
 8007676:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8bfa      	ldrh	r2, [r7, #30]
 800768a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	8a7a      	ldrh	r2, [r7, #18]
 8007690:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2201      	movs	r2, #1
 8007696:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076a0:	d00b      	beq.n	80076ba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fc98 	bl	8006fdc <ptr_to_mem>
 80076ac:	4602      	mov	r2, r0
 80076ae:	8a7b      	ldrh	r3, [r7, #18]
 80076b0:	8053      	strh	r3, [r2, #2]
 80076b2:	e002      	b.n	80076ba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2201      	movs	r2, #1
 80076b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80076ba:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <mem_malloc+0x1e8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d127      	bne.n	8007714 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80076c4:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <mem_malloc+0x1e8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80076ca:	e005      	b.n	80076d8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fc83 	bl	8006fdc <ptr_to_mem>
 80076d6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <mem_malloc+0x132>
 80076e0:	4b33      	ldr	r3, [pc, #204]	; (80077b0 <mem_malloc+0x1f8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d1f0      	bne.n	80076cc <mem_malloc+0x114>
          }
          lfree = cur;
 80076ea:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <mem_malloc+0x1e8>)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80076f0:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <mem_malloc+0x1e8>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4b2e      	ldr	r3, [pc, #184]	; (80077b0 <mem_malloc+0x1f8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d00b      	beq.n	8007714 <mem_malloc+0x15c>
 80076fc:	4b28      	ldr	r3, [pc, #160]	; (80077a0 <mem_malloc+0x1e8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	791b      	ldrb	r3, [r3, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d006      	beq.n	8007714 <mem_malloc+0x15c>
 8007706:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <mem_malloc+0x1ec>)
 8007708:	f240 32b5 	movw	r2, #949	; 0x3b5
 800770c:	4929      	ldr	r1, [pc, #164]	; (80077b4 <mem_malloc+0x1fc>)
 800770e:	4827      	ldr	r0, [pc, #156]	; (80077ac <mem_malloc+0x1f4>)
 8007710:	f00c fbb2 	bl	8013e78 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007714:	4821      	ldr	r0, [pc, #132]	; (800779c <mem_malloc+0x1e4>)
 8007716:	f00b fc94 	bl	8013042 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800771a:	8bba      	ldrh	r2, [r7, #28]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4413      	add	r3, r2
 8007720:	3308      	adds	r3, #8
 8007722:	4a23      	ldr	r2, [pc, #140]	; (80077b0 <mem_malloc+0x1f8>)
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	4293      	cmp	r3, r2
 8007728:	d906      	bls.n	8007738 <mem_malloc+0x180>
 800772a:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <mem_malloc+0x1ec>)
 800772c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007730:	4921      	ldr	r1, [pc, #132]	; (80077b8 <mem_malloc+0x200>)
 8007732:	481e      	ldr	r0, [pc, #120]	; (80077ac <mem_malloc+0x1f4>)
 8007734:	f00c fba0 	bl	8013e78 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d006      	beq.n	8007750 <mem_malloc+0x198>
 8007742:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <mem_malloc+0x1ec>)
 8007744:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007748:	491c      	ldr	r1, [pc, #112]	; (80077bc <mem_malloc+0x204>)
 800774a:	4818      	ldr	r0, [pc, #96]	; (80077ac <mem_malloc+0x1f4>)
 800774c:	f00c fb94 	bl	8013e78 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d006      	beq.n	8007768 <mem_malloc+0x1b0>
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <mem_malloc+0x1ec>)
 800775c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007760:	4917      	ldr	r1, [pc, #92]	; (80077c0 <mem_malloc+0x208>)
 8007762:	4812      	ldr	r0, [pc, #72]	; (80077ac <mem_malloc+0x1f4>)
 8007764:	f00c fb88 	bl	8013e78 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3308      	adds	r3, #8
 800776c:	e011      	b.n	8007792 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800776e:	8bfb      	ldrh	r3, [r7, #30]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fc33 	bl	8006fdc <ptr_to_mem>
 8007776:	4603      	mov	r3, r0
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800777c:	8bfa      	ldrh	r2, [r7, #30]
 800777e:	8bbb      	ldrh	r3, [r7, #28]
 8007780:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007784:	429a      	cmp	r2, r3
 8007786:	f4ff af41 	bcc.w	800760c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800778a:	4804      	ldr	r0, [pc, #16]	; (800779c <mem_malloc+0x1e4>)
 800778c:	f00b fc59 	bl	8013042 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20009318 	.word	0x20009318
 80077a0:	2000931c 	.word	0x2000931c
 80077a4:	08017574 	.word	0x08017574
 80077a8:	08017738 	.word	0x08017738
 80077ac:	080175bc 	.word	0x080175bc
 80077b0:	20009314 	.word	0x20009314
 80077b4:	0801774c 	.word	0x0801774c
 80077b8:	08017768 	.word	0x08017768
 80077bc:	08017798 	.word	0x08017798
 80077c0:	080177c8 	.word	0x080177c8

080077c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	3303      	adds	r3, #3
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e011      	b.n	800780a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	461a      	mov	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4293      	cmp	r3, r2
 8007814:	dbe7      	blt.n	80077e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800782a:	2300      	movs	r3, #0
 800782c:	80fb      	strh	r3, [r7, #6]
 800782e:	e009      	b.n	8007844 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	4a08      	ldr	r2, [pc, #32]	; (8007854 <memp_init+0x30>)
 8007834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff ffc3 	bl	80077c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	3301      	adds	r3, #1
 8007842:	80fb      	strh	r3, [r7, #6]
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	2b0c      	cmp	r3, #12
 8007848:	d9f2      	bls.n	8007830 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	0801a380 	.word	0x0801a380

08007858 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007860:	f00b fc22 	bl	80130a8 <sys_arch_protect>
 8007864:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d015      	beq.n	80078a0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <do_memp_malloc_pool+0x3e>
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <do_memp_malloc_pool+0x58>)
 800788a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800788e:	4909      	ldr	r1, [pc, #36]	; (80078b4 <do_memp_malloc_pool+0x5c>)
 8007890:	4809      	ldr	r0, [pc, #36]	; (80078b8 <do_memp_malloc_pool+0x60>)
 8007892:	f00c faf1 	bl	8013e78 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f00b fc14 	bl	80130c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	e003      	b.n	80078a8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f00b fc0f 	bl	80130c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	080177ec 	.word	0x080177ec
 80078b4:	0801781c 	.word	0x0801781c
 80078b8:	08017840 	.word	0x08017840

080078bc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <memp_malloc_pool+0x1c>
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <memp_malloc_pool+0x38>)
 80078cc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80078d0:	4909      	ldr	r1, [pc, #36]	; (80078f8 <memp_malloc_pool+0x3c>)
 80078d2:	480a      	ldr	r0, [pc, #40]	; (80078fc <memp_malloc_pool+0x40>)
 80078d4:	f00c fad0 	bl	8013e78 <iprintf>
  if (desc == NULL) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <memp_malloc_pool+0x26>
    return NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	e003      	b.n	80078ea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff ffb8 	bl	8007858 <do_memp_malloc_pool>
 80078e8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	080177ec 	.word	0x080177ec
 80078f8:	08017868 	.word	0x08017868
 80078fc:	08017840 	.word	0x08017840

08007900 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	2b0c      	cmp	r3, #12
 800790e:	d908      	bls.n	8007922 <memp_malloc+0x22>
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <memp_malloc+0x3c>)
 8007912:	f240 1257 	movw	r2, #343	; 0x157
 8007916:	490a      	ldr	r1, [pc, #40]	; (8007940 <memp_malloc+0x40>)
 8007918:	480a      	ldr	r0, [pc, #40]	; (8007944 <memp_malloc+0x44>)
 800791a:	f00c faad 	bl	8013e78 <iprintf>
 800791e:	2300      	movs	r3, #0
 8007920:	e008      	b.n	8007934 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	4a08      	ldr	r2, [pc, #32]	; (8007948 <memp_malloc+0x48>)
 8007926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff ff94 	bl	8007858 <do_memp_malloc_pool>
 8007930:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007932:	68fb      	ldr	r3, [r7, #12]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	080177ec 	.word	0x080177ec
 8007940:	0801787c 	.word	0x0801787c
 8007944:	08017840 	.word	0x08017840
 8007948:	0801a380 	.word	0x0801a380

0800794c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d006      	beq.n	800796e <do_memp_free_pool+0x22>
 8007960:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <do_memp_free_pool+0x4c>)
 8007962:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007966:	490d      	ldr	r1, [pc, #52]	; (800799c <do_memp_free_pool+0x50>)
 8007968:	480d      	ldr	r0, [pc, #52]	; (80079a0 <do_memp_free_pool+0x54>)
 800796a:	f00c fa85 	bl	8013e78 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007972:	f00b fb99 	bl	80130a8 <sys_arch_protect>
 8007976:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800798a:	68b8      	ldr	r0, [r7, #8]
 800798c:	f00b fb9a 	bl	80130c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	080177ec 	.word	0x080177ec
 800799c:	0801789c 	.word	0x0801789c
 80079a0:	08017840 	.word	0x08017840

080079a4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <memp_free_pool+0x1e>
 80079b4:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <memp_free_pool+0x3c>)
 80079b6:	f240 1295 	movw	r2, #405	; 0x195
 80079ba:	490a      	ldr	r1, [pc, #40]	; (80079e4 <memp_free_pool+0x40>)
 80079bc:	480a      	ldr	r0, [pc, #40]	; (80079e8 <memp_free_pool+0x44>)
 80079be:	f00c fa5b 	bl	8013e78 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <memp_free_pool+0x34>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ffbb 	bl	800794c <do_memp_free_pool>
 80079d6:	e000      	b.n	80079da <memp_free_pool+0x36>
    return;
 80079d8:	bf00      	nop
}
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	080177ec 	.word	0x080177ec
 80079e4:	08017868 	.word	0x08017868
 80079e8:	08017840 	.word	0x08017840

080079ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	6039      	str	r1, [r7, #0]
 80079f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b0c      	cmp	r3, #12
 80079fc:	d907      	bls.n	8007a0e <memp_free+0x22>
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <memp_free+0x44>)
 8007a00:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007a04:	490b      	ldr	r1, [pc, #44]	; (8007a34 <memp_free+0x48>)
 8007a06:	480c      	ldr	r0, [pc, #48]	; (8007a38 <memp_free+0x4c>)
 8007a08:	f00c fa36 	bl	8013e78 <iprintf>
 8007a0c:	e00c      	b.n	8007a28 <memp_free+0x3c>

  if (mem == NULL) {
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <memp_free+0x50>)
 8007a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff ff94 	bl	800794c <do_memp_free_pool>
 8007a24:	e000      	b.n	8007a28 <memp_free+0x3c>
    return;
 8007a26:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	080177ec 	.word	0x080177ec
 8007a34:	080178bc 	.word	0x080178bc
 8007a38:	08017840 	.word	0x08017840
 8007a3c:	0801a380 	.word	0x0801a380

08007a40 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d108      	bne.n	8007a76 <netif_add+0x26>
 8007a64:	4b5b      	ldr	r3, [pc, #364]	; (8007bd4 <netif_add+0x184>)
 8007a66:	f240 1227 	movw	r2, #295	; 0x127
 8007a6a:	495b      	ldr	r1, [pc, #364]	; (8007bd8 <netif_add+0x188>)
 8007a6c:	485b      	ldr	r0, [pc, #364]	; (8007bdc <netif_add+0x18c>)
 8007a6e:	f00c fa03 	bl	8013e78 <iprintf>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e0a9      	b.n	8007bca <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <netif_add+0x3e>
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <netif_add+0x184>)
 8007a7e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007a82:	4957      	ldr	r1, [pc, #348]	; (8007be0 <netif_add+0x190>)
 8007a84:	4855      	ldr	r0, [pc, #340]	; (8007bdc <netif_add+0x18c>)
 8007a86:	f00c f9f7 	bl	8013e78 <iprintf>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e09d      	b.n	8007bca <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007a94:	4b53      	ldr	r3, [pc, #332]	; (8007be4 <netif_add+0x194>)
 8007a96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007a9e:	4b51      	ldr	r3, [pc, #324]	; (8007be4 <netif_add+0x194>)
 8007aa0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <netif_add+0x194>)
 8007aaa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a49      	ldr	r2, [pc, #292]	; (8007be8 <netif_add+0x198>)
 8007ac2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3324      	adds	r3, #36	; 0x24
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	f00c fa31 	bl	8013f42 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a3a      	ldr	r2, [r7, #32]
 8007aea:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007aec:	4b3f      	ldr	r3, [pc, #252]	; (8007bec <netif_add+0x19c>)
 8007aee:	781a      	ldrb	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007afa:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f914 	bl	8007d30 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <netif_add+0xc8>
    return NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	e058      	b.n	8007bca <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b1e:	2bff      	cmp	r3, #255	; 0xff
 8007b20:	d103      	bne.n	8007b2a <netif_add+0xda>
        netif->num = 0;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b2e:	4b30      	ldr	r3, [pc, #192]	; (8007bf0 <netif_add+0x1a0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	e02b      	b.n	8007b8e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d106      	bne.n	8007b4c <netif_add+0xfc>
 8007b3e:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <netif_add+0x184>)
 8007b40:	f240 128b 	movw	r2, #395	; 0x18b
 8007b44:	492b      	ldr	r1, [pc, #172]	; (8007bf4 <netif_add+0x1a4>)
 8007b46:	4825      	ldr	r0, [pc, #148]	; (8007bdc <netif_add+0x18c>)
 8007b48:	f00c f996 	bl	8013e78 <iprintf>
        num_netifs++;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2bff      	cmp	r3, #255	; 0xff
 8007b56:	dd06      	ble.n	8007b66 <netif_add+0x116>
 8007b58:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <netif_add+0x184>)
 8007b5a:	f240 128d 	movw	r2, #397	; 0x18d
 8007b5e:	4926      	ldr	r1, [pc, #152]	; (8007bf8 <netif_add+0x1a8>)
 8007b60:	481e      	ldr	r0, [pc, #120]	; (8007bdc <netif_add+0x18c>)
 8007b62:	f00c f989 	bl	8013e78 <iprintf>
        if (netif2->num == netif->num) {
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d108      	bne.n	8007b88 <netif_add+0x138>
          netif->num++;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8007b86:	e005      	b.n	8007b94 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1d0      	bne.n	8007b36 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1be      	bne.n	8007b18 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ba0:	2bfe      	cmp	r3, #254	; 0xfe
 8007ba2:	d103      	bne.n	8007bac <netif_add+0x15c>
    netif_num = 0;
 8007ba4:	4b11      	ldr	r3, [pc, #68]	; (8007bec <netif_add+0x19c>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e006      	b.n	8007bba <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <netif_add+0x19c>)
 8007bb8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <netif_add+0x1a0>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007bc2:	4a0b      	ldr	r2, [pc, #44]	; (8007bf0 <netif_add+0x1a0>)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	080178d8 	.word	0x080178d8
 8007bd8:	0801796c 	.word	0x0801796c
 8007bdc:	08017928 	.word	0x08017928
 8007be0:	08017988 	.word	0x08017988
 8007be4:	0801a404 	.word	0x0801a404
 8007be8:	08008013 	.word	0x08008013
 8007bec:	2000c414 	.word	0x2000c414
 8007bf0:	2000c40c 	.word	0x2000c40c
 8007bf4:	080179ac 	.word	0x080179ac
 8007bf8:	080179c0 	.word	0x080179c0

08007bfc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 fb91 	bl	800a330 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f006 ffa7 	bl	800eb64 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <netif_do_set_ipaddr+0x20>
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <netif_do_set_ipaddr+0x88>)
 8007c34:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007c38:	491c      	ldr	r1, [pc, #112]	; (8007cac <netif_do_set_ipaddr+0x8c>)
 8007c3a:	481d      	ldr	r0, [pc, #116]	; (8007cb0 <netif_do_set_ipaddr+0x90>)
 8007c3c:	f00c f91c 	bl	8013e78 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <netif_do_set_ipaddr+0x34>
 8007c46:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <netif_do_set_ipaddr+0x88>)
 8007c48:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007c4c:	4917      	ldr	r1, [pc, #92]	; (8007cac <netif_do_set_ipaddr+0x8c>)
 8007c4e:	4818      	ldr	r0, [pc, #96]	; (8007cb0 <netif_do_set_ipaddr+0x90>)
 8007c50:	f00c f912 	bl	8013e78 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d01c      	beq.n	8007c9c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007c72:	f107 0314 	add.w	r3, r7, #20
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff ffbf 	bl	8007bfc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <netif_do_set_ipaddr+0x6a>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	e000      	b.n	8007c8c <netif_do_set_ipaddr+0x6c>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007c90:	2101      	movs	r1, #1
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f8d2 	bl	8007e3c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	080178d8 	.word	0x080178d8
 8007cac:	080179f0 	.word	0x080179f0
 8007cb0:	08017928 	.word	0x08017928

08007cb4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d00a      	beq.n	8007ce4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <netif_do_set_netmask+0x26>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	e000      	b.n	8007cdc <netif_do_set_netmask+0x28>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b085      	sub	sp, #20
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	330c      	adds	r3, #12
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d00a      	beq.n	8007d22 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <netif_do_set_gw+0x26>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	e000      	b.n	8007d1a <netif_do_set_gw+0x28>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007d4c:	4b1c      	ldr	r3, [pc, #112]	; (8007dc0 <netif_set_addr+0x90>)
 8007d4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <netif_set_addr+0x90>)
 8007d58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007d60:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <netif_set_addr+0x90>)
 8007d62:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <netif_set_addr+0x42>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <netif_set_addr+0x46>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <netif_set_addr+0x48>
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	461a      	mov	r2, r3
 8007d86:	68b9      	ldr	r1, [r7, #8]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff ff49 	bl	8007c20 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007d8e:	69fa      	ldr	r2, [r7, #28]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ff8e 	bl	8007cb4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff ffa8 	bl	8007cf2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	461a      	mov	r2, r3
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff ff35 	bl	8007c20 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007db6:	bf00      	nop
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	0801a404 	.word	0x0801a404

08007dc4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007dcc:	4a04      	ldr	r2, [pc, #16]	; (8007de0 <netif_set_default+0x1c>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	2000c410 	.word	0x2000c410

08007de4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <netif_set_up+0x1e>
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <netif_set_up+0x4c>)
 8007df4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007df8:	490e      	ldr	r1, [pc, #56]	; (8007e34 <netif_set_up+0x50>)
 8007dfa:	480f      	ldr	r0, [pc, #60]	; (8007e38 <netif_set_up+0x54>)
 8007dfc:	f00c f83c 	bl	8013e78 <iprintf>
 8007e00:	e013      	b.n	8007e2a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10c      	bne.n	8007e2a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e22:	2103      	movs	r1, #3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f809 	bl	8007e3c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	080178d8 	.word	0x080178d8
 8007e34:	08017a60 	.word	0x08017a60
 8007e38:	08017928 	.word	0x08017928

08007e3c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <netif_issue_reports+0x20>
 8007e4e:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <netif_issue_reports+0x74>)
 8007e50:	f240 326d 	movw	r2, #877	; 0x36d
 8007e54:	4917      	ldr	r1, [pc, #92]	; (8007eb4 <netif_issue_reports+0x78>)
 8007e56:	4818      	ldr	r0, [pc, #96]	; (8007eb8 <netif_issue_reports+0x7c>)
 8007e58:	f00c f80e 	bl	8013e78 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01e      	beq.n	8007ea8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e70:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d017      	beq.n	8007ea8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d013      	beq.n	8007eaa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3304      	adds	r3, #4
 8007e86:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00e      	beq.n	8007eaa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f009 fc5f 	bl	8011764 <etharp_request>
 8007ea6:	e000      	b.n	8007eaa <netif_issue_reports+0x6e>
    return;
 8007ea8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	080178d8 	.word	0x080178d8
 8007eb4:	08017a7c 	.word	0x08017a7c
 8007eb8:	08017928 	.word	0x08017928

08007ebc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <netif_set_down+0x1e>
 8007eca:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <netif_set_down+0x58>)
 8007ecc:	f240 329b 	movw	r2, #923	; 0x39b
 8007ed0:	4911      	ldr	r1, [pc, #68]	; (8007f18 <netif_set_down+0x5c>)
 8007ed2:	4812      	ldr	r0, [pc, #72]	; (8007f1c <netif_set_down+0x60>)
 8007ed4:	f00b ffd0 	bl	8013e78 <iprintf>
 8007ed8:	e019      	b.n	8007f0e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d012      	beq.n	8007f0e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f008 ffe5 	bl	8010ed8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	080178d8 	.word	0x080178d8
 8007f18:	08017aa0 	.word	0x08017aa0
 8007f1c:	08017928 	.word	0x08017928

08007f20 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d107      	bne.n	8007f3e <netif_set_link_up+0x1e>
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <netif_set_link_up+0x64>)
 8007f30:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007f34:	4914      	ldr	r1, [pc, #80]	; (8007f88 <netif_set_link_up+0x68>)
 8007f36:	4815      	ldr	r0, [pc, #84]	; (8007f8c <netif_set_link_up+0x6c>)
 8007f38:	f00b ff9e 	bl	8013e78 <iprintf>
 8007f3c:	e01e      	b.n	8007f7c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d117      	bne.n	8007f7c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f52:	f043 0304 	orr.w	r3, r3, #4
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f007 fa2a 	bl	800f3b8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007f64:	2103      	movs	r1, #3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff ff68 	bl	8007e3c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <netif_set_link_up+0x5c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	080178d8 	.word	0x080178d8
 8007f88:	08017ac0 	.word	0x08017ac0
 8007f8c:	08017928 	.word	0x08017928

08007f90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d107      	bne.n	8007fae <netif_set_link_down+0x1e>
 8007f9e:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <netif_set_link_down+0x54>)
 8007fa0:	f240 4206 	movw	r2, #1030	; 0x406
 8007fa4:	4910      	ldr	r1, [pc, #64]	; (8007fe8 <netif_set_link_down+0x58>)
 8007fa6:	4811      	ldr	r0, [pc, #68]	; (8007fec <netif_set_link_down+0x5c>)
 8007fa8:	f00b ff66 	bl	8013e78 <iprintf>
 8007fac:	e017      	b.n	8007fde <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d010      	beq.n	8007fde <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fc2:	f023 0304 	bic.w	r3, r3, #4
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <netif_set_link_down+0x4e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	080178d8 	.word	0x080178d8
 8007fe8:	08017ae4 	.word	0x08017ae4
 8007fec:	08017928 	.word	0x08017928

08007ff0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	61da      	str	r2, [r3, #28]
  }
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800801e:	f06f 030b 	mvn.w	r3, #11
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d013      	beq.n	8008068 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <netif_get_by_index+0x48>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e00c      	b.n	8008062 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800804e:	3301      	adds	r3, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	79fa      	ldrb	r2, [r7, #7]
 8008054:	429a      	cmp	r2, r3
 8008056:	d101      	bne.n	800805c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e006      	b.n	800806a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ef      	bne.n	8008048 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	2000c40c 	.word	0x2000c40c

0800807c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008082:	f00b f811 	bl	80130a8 <sys_arch_protect>
 8008086:	6038      	str	r0, [r7, #0]
 8008088:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <pbuf_free_ooseq+0x44>)
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	6838      	ldr	r0, [r7, #0]
 8008090:	f00b f818 	bl	80130c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008094:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <pbuf_free_ooseq+0x48>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	607b      	str	r3, [r7, #4]
 800809a:	e00a      	b.n	80080b2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f002 f981 	bl	800a3ac <tcp_free_ooseq>
      return;
 80080aa:	e005      	b.n	80080b8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	607b      	str	r3, [r7, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1f1      	bne.n	800809c <pbuf_free_ooseq+0x20>
    }
  }
}
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	2000c415 	.word	0x2000c415
 80080c4:	2000c424 	.word	0x2000c424

080080c8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80080d0:	f7ff ffd4 	bl	800807c <pbuf_free_ooseq>
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80080e2:	f00a ffe1 	bl	80130a8 <sys_arch_protect>
 80080e6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80080e8:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <pbuf_pool_is_empty+0x4c>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <pbuf_pool_is_empty+0x4c>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f00a ffe5 	bl	80130c4 <sys_arch_unprotect>

  if (!queued) {
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008100:	2100      	movs	r1, #0
 8008102:	480a      	ldr	r0, [pc, #40]	; (800812c <pbuf_pool_is_empty+0x50>)
 8008104:	f7fe fe9a 	bl	8006e3c <tcpip_try_callback>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <pbuf_pool_is_empty+0x44>
 800810e:	f00a ffcb 	bl	80130a8 <sys_arch_protect>
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <pbuf_pool_is_empty+0x4c>)
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f00a ffd2 	bl	80130c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	2000c415 	.word	0x2000c415
 800812c:	080080c9 	.word	0x080080c9

08008130 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4611      	mov	r1, r2
 800813c:	461a      	mov	r2, r3
 800813e:	460b      	mov	r3, r1
 8008140:	80fb      	strh	r3, [r7, #6]
 8008142:	4613      	mov	r3, r2
 8008144:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	88fa      	ldrh	r2, [r7, #6]
 8008156:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	88ba      	ldrh	r2, [r7, #4]
 800815c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800815e:	8b3b      	ldrh	r3, [r7, #24]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	7f3a      	ldrb	r2, [r7, #28]
 800816a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	73da      	strb	r2, [r3, #15]
}
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08c      	sub	sp, #48	; 0x30
 8008188:	af02      	add	r7, sp, #8
 800818a:	4603      	mov	r3, r0
 800818c:	71fb      	strb	r3, [r7, #7]
 800818e:	460b      	mov	r3, r1
 8008190:	80bb      	strh	r3, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800819a:	887b      	ldrh	r3, [r7, #2]
 800819c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081a0:	d07f      	beq.n	80082a2 <pbuf_alloc+0x11e>
 80081a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081a6:	f300 80c8 	bgt.w	800833a <pbuf_alloc+0x1b6>
 80081aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081ae:	d010      	beq.n	80081d2 <pbuf_alloc+0x4e>
 80081b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081b4:	f300 80c1 	bgt.w	800833a <pbuf_alloc+0x1b6>
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d002      	beq.n	80081c2 <pbuf_alloc+0x3e>
 80081bc:	2b41      	cmp	r3, #65	; 0x41
 80081be:	f040 80bc 	bne.w	800833a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80081c2:	887a      	ldrh	r2, [r7, #2]
 80081c4:	88bb      	ldrh	r3, [r7, #4]
 80081c6:	4619      	mov	r1, r3
 80081c8:	2000      	movs	r0, #0
 80081ca:	f000 f8d1 	bl	8008370 <pbuf_alloc_reference>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80081d0:	e0bd      	b.n	800834e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80081da:	88bb      	ldrh	r3, [r7, #4]
 80081dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081de:	200c      	movs	r0, #12
 80081e0:	f7ff fb8e 	bl	8007900 <memp_malloc>
 80081e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80081ec:	f7ff ff76 	bl	80080dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <pbuf_alloc+0x78>
            pbuf_free(p);
 80081f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081f8:	f000 faa8 	bl	800874c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e0a7      	b.n	8008350 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008202:	3303      	adds	r3, #3
 8008204:	b29b      	uxth	r3, r3
 8008206:	f023 0303 	bic.w	r3, r3, #3
 800820a:	b29b      	uxth	r3, r3
 800820c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008210:	b29b      	uxth	r3, r3
 8008212:	8b7a      	ldrh	r2, [r7, #26]
 8008214:	4293      	cmp	r3, r2
 8008216:	bf28      	it	cs
 8008218:	4613      	movcs	r3, r2
 800821a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800821c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800821e:	3310      	adds	r3, #16
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	3303      	adds	r3, #3
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	4618      	mov	r0, r3
 800822c:	89f9      	ldrh	r1, [r7, #14]
 800822e:	8b7a      	ldrh	r2, [r7, #26]
 8008230:	2300      	movs	r3, #0
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	887b      	ldrh	r3, [r7, #2]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	460b      	mov	r3, r1
 800823a:	4601      	mov	r1, r0
 800823c:	6938      	ldr	r0, [r7, #16]
 800823e:	f7ff ff77 	bl	8008130 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d006      	beq.n	800825c <pbuf_alloc+0xd8>
 800824e:	4b42      	ldr	r3, [pc, #264]	; (8008358 <pbuf_alloc+0x1d4>)
 8008250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008254:	4941      	ldr	r1, [pc, #260]	; (800835c <pbuf_alloc+0x1d8>)
 8008256:	4842      	ldr	r0, [pc, #264]	; (8008360 <pbuf_alloc+0x1dc>)
 8008258:	f00b fe0e 	bl	8013e78 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800825c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800825e:	3303      	adds	r3, #3
 8008260:	f023 0303 	bic.w	r3, r3, #3
 8008264:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008268:	d106      	bne.n	8008278 <pbuf_alloc+0xf4>
 800826a:	4b3b      	ldr	r3, [pc, #236]	; (8008358 <pbuf_alloc+0x1d4>)
 800826c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008270:	493c      	ldr	r1, [pc, #240]	; (8008364 <pbuf_alloc+0x1e0>)
 8008272:	483b      	ldr	r0, [pc, #236]	; (8008360 <pbuf_alloc+0x1dc>)
 8008274:	f00b fe00 	bl	8013e78 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
 8008282:	e002      	b.n	800828a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800828e:	8b7a      	ldrh	r2, [r7, #26]
 8008290:	89fb      	ldrh	r3, [r7, #14]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800829a:	8b7b      	ldrh	r3, [r7, #26]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d19e      	bne.n	80081de <pbuf_alloc+0x5a>
      break;
 80082a0:	e055      	b.n	800834e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80082a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082a4:	3303      	adds	r3, #3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	f023 0303 	bic.w	r3, r3, #3
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	88bb      	ldrh	r3, [r7, #4]
 80082b0:	3303      	adds	r3, #3
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80082be:	8b3b      	ldrh	r3, [r7, #24]
 80082c0:	3310      	adds	r3, #16
 80082c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082c4:	8b3a      	ldrh	r2, [r7, #24]
 80082c6:	88bb      	ldrh	r3, [r7, #4]
 80082c8:	3303      	adds	r3, #3
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d306      	bcc.n	80082e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80082d2:	8afa      	ldrh	r2, [r7, #22]
 80082d4:	88bb      	ldrh	r3, [r7, #4]
 80082d6:	3303      	adds	r3, #3
 80082d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082dc:	429a      	cmp	r2, r3
 80082de:	d201      	bcs.n	80082e4 <pbuf_alloc+0x160>
        return NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	e035      	b.n	8008350 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80082e4:	8afb      	ldrh	r3, [r7, #22]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff f966 	bl	80075b8 <mem_malloc>
 80082ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <pbuf_alloc+0x174>
        return NULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e02b      	b.n	8008350 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80082f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082fa:	3310      	adds	r3, #16
 80082fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fe:	4413      	add	r3, r2
 8008300:	3303      	adds	r3, #3
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	4618      	mov	r0, r3
 8008308:	88b9      	ldrh	r1, [r7, #4]
 800830a:	88ba      	ldrh	r2, [r7, #4]
 800830c:	2300      	movs	r3, #0
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	887b      	ldrh	r3, [r7, #2]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	460b      	mov	r3, r1
 8008316:	4601      	mov	r1, r0
 8008318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800831a:	f7ff ff09 	bl	8008130 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <pbuf_alloc+0x1c8>
 800832a:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <pbuf_alloc+0x1d4>)
 800832c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008330:	490d      	ldr	r1, [pc, #52]	; (8008368 <pbuf_alloc+0x1e4>)
 8008332:	480b      	ldr	r0, [pc, #44]	; (8008360 <pbuf_alloc+0x1dc>)
 8008334:	f00b fda0 	bl	8013e78 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008338:	e008      	b.n	800834c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <pbuf_alloc+0x1d4>)
 800833c:	f240 1227 	movw	r2, #295	; 0x127
 8008340:	490a      	ldr	r1, [pc, #40]	; (800836c <pbuf_alloc+0x1e8>)
 8008342:	4807      	ldr	r0, [pc, #28]	; (8008360 <pbuf_alloc+0x1dc>)
 8008344:	f00b fd98 	bl	8013e78 <iprintf>
      return NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	e001      	b.n	8008350 <pbuf_alloc+0x1cc>
      break;
 800834c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008350:	4618      	mov	r0, r3
 8008352:	3728      	adds	r7, #40	; 0x28
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	08017b08 	.word	0x08017b08
 800835c:	08017b38 	.word	0x08017b38
 8008360:	08017b68 	.word	0x08017b68
 8008364:	08017b90 	.word	0x08017b90
 8008368:	08017bc4 	.word	0x08017bc4
 800836c:	08017bf0 	.word	0x08017bf0

08008370 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	807b      	strh	r3, [r7, #2]
 800837c:	4613      	mov	r3, r2
 800837e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008380:	883b      	ldrh	r3, [r7, #0]
 8008382:	2b41      	cmp	r3, #65	; 0x41
 8008384:	d009      	beq.n	800839a <pbuf_alloc_reference+0x2a>
 8008386:	883b      	ldrh	r3, [r7, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d006      	beq.n	800839a <pbuf_alloc_reference+0x2a>
 800838c:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <pbuf_alloc_reference+0x5c>)
 800838e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008392:	490f      	ldr	r1, [pc, #60]	; (80083d0 <pbuf_alloc_reference+0x60>)
 8008394:	480f      	ldr	r0, [pc, #60]	; (80083d4 <pbuf_alloc_reference+0x64>)
 8008396:	f00b fd6f 	bl	8013e78 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800839a:	200b      	movs	r0, #11
 800839c:	f7ff fab0 	bl	8007900 <memp_malloc>
 80083a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e00b      	b.n	80083c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80083ac:	8879      	ldrh	r1, [r7, #2]
 80083ae:	887a      	ldrh	r2, [r7, #2]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	883b      	ldrh	r3, [r7, #0]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	460b      	mov	r3, r1
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff feb7 	bl	8008130 <pbuf_init_alloced_pbuf>
  return p;
 80083c2:	68fb      	ldr	r3, [r7, #12]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	08017b08 	.word	0x08017b08
 80083d0:	08017c0c 	.word	0x08017c0c
 80083d4:	08017b68 	.word	0x08017b68

080083d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af02      	add	r7, sp, #8
 80083de:	607b      	str	r3, [r7, #4]
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]
 80083e4:	460b      	mov	r3, r1
 80083e6:	81bb      	strh	r3, [r7, #12]
 80083e8:	4613      	mov	r3, r2
 80083ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80083f0:	8a7b      	ldrh	r3, [r7, #18]
 80083f2:	3303      	adds	r3, #3
 80083f4:	f023 0203 	bic.w	r2, r3, #3
 80083f8:	89bb      	ldrh	r3, [r7, #12]
 80083fa:	441a      	add	r2, r3
 80083fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083fe:	429a      	cmp	r2, r3
 8008400:	d901      	bls.n	8008406 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	e018      	b.n	8008438 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800840c:	8a7b      	ldrh	r3, [r7, #18]
 800840e:	3303      	adds	r3, #3
 8008410:	f023 0303 	bic.w	r3, r3, #3
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	4413      	add	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e001      	b.n	8008420 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	89b9      	ldrh	r1, [r7, #12]
 8008424:	89ba      	ldrh	r2, [r7, #12]
 8008426:	2302      	movs	r3, #2
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	897b      	ldrh	r3, [r7, #10]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	460b      	mov	r3, r1
 8008430:	6979      	ldr	r1, [r7, #20]
 8008432:	f7ff fe7d 	bl	8008130 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008436:	687b      	ldr	r3, [r7, #4]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <pbuf_realloc+0x20>
 8008452:	4b3a      	ldr	r3, [pc, #232]	; (800853c <pbuf_realloc+0xfc>)
 8008454:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008458:	4939      	ldr	r1, [pc, #228]	; (8008540 <pbuf_realloc+0x100>)
 800845a:	483a      	ldr	r0, [pc, #232]	; (8008544 <pbuf_realloc+0x104>)
 800845c:	f00b fd0c 	bl	8013e78 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	891b      	ldrh	r3, [r3, #8]
 8008464:	887a      	ldrh	r2, [r7, #2]
 8008466:	429a      	cmp	r2, r3
 8008468:	d263      	bcs.n	8008532 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	891a      	ldrh	r2, [r3, #8]
 800846e:	887b      	ldrh	r3, [r7, #2]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008474:	887b      	ldrh	r3, [r7, #2]
 8008476:	817b      	strh	r3, [r7, #10]
  q = p;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800847c:	e018      	b.n	80084b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	895b      	ldrh	r3, [r3, #10]
 8008482:	897a      	ldrh	r2, [r7, #10]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	891a      	ldrh	r2, [r3, #8]
 800848c:	893b      	ldrh	r3, [r7, #8]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <pbuf_realloc+0x70>
 80084a2:	4b26      	ldr	r3, [pc, #152]	; (800853c <pbuf_realloc+0xfc>)
 80084a4:	f240 12af 	movw	r2, #431	; 0x1af
 80084a8:	4927      	ldr	r1, [pc, #156]	; (8008548 <pbuf_realloc+0x108>)
 80084aa:	4826      	ldr	r0, [pc, #152]	; (8008544 <pbuf_realloc+0x104>)
 80084ac:	f00b fce4 	bl	8013e78 <iprintf>
  while (rem_len > q->len) {
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	897a      	ldrh	r2, [r7, #10]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d8e1      	bhi.n	800847e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	7b1b      	ldrb	r3, [r3, #12]
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d121      	bne.n	800850a <pbuf_realloc+0xca>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	895b      	ldrh	r3, [r3, #10]
 80084ca:	897a      	ldrh	r2, [r7, #10]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d01c      	beq.n	800850a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	7b5b      	ldrb	r3, [r3, #13]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d116      	bne.n	800850a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	897b      	ldrh	r3, [r7, #10]
 80084e8:	4413      	add	r3, r2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4619      	mov	r1, r3
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7fe ff58 	bl	80073a4 <mem_trim>
 80084f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <pbuf_realloc+0xca>
 80084fc:	4b0f      	ldr	r3, [pc, #60]	; (800853c <pbuf_realloc+0xfc>)
 80084fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008502:	4912      	ldr	r1, [pc, #72]	; (800854c <pbuf_realloc+0x10c>)
 8008504:	480f      	ldr	r0, [pc, #60]	; (8008544 <pbuf_realloc+0x104>)
 8008506:	f00b fcb7 	bl	8013e78 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	897a      	ldrh	r2, [r7, #10]
 800850e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	895a      	ldrh	r2, [r3, #10]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f911 	bl	800874c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e000      	b.n	8008534 <pbuf_realloc+0xf4>
    return;
 8008532:	bf00      	nop

}
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	08017b08 	.word	0x08017b08
 8008540:	08017c20 	.word	0x08017c20
 8008544:	08017b68 	.word	0x08017b68
 8008548:	08017c38 	.word	0x08017c38
 800854c:	08017c50 	.word	0x08017c50

08008550 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d106      	bne.n	8008572 <pbuf_add_header_impl+0x22>
 8008564:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <pbuf_add_header_impl+0xc4>)
 8008566:	f240 12df 	movw	r2, #479	; 0x1df
 800856a:	492b      	ldr	r1, [pc, #172]	; (8008618 <pbuf_add_header_impl+0xc8>)
 800856c:	482b      	ldr	r0, [pc, #172]	; (800861c <pbuf_add_header_impl+0xcc>)
 800856e:	f00b fc83 	bl	8013e78 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <pbuf_add_header_impl+0x30>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800857e:	d301      	bcc.n	8008584 <pbuf_add_header_impl+0x34>
    return 1;
 8008580:	2301      	movs	r3, #1
 8008582:	e043      	b.n	800860c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <pbuf_add_header_impl+0x3e>
    return 0;
 800858a:	2300      	movs	r3, #0
 800858c:	e03e      	b.n	800860c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	891a      	ldrh	r2, [r3, #8]
 8008596:	8a7b      	ldrh	r3, [r7, #18]
 8008598:	4413      	add	r3, r2
 800859a:	b29b      	uxth	r3, r3
 800859c:	8a7a      	ldrh	r2, [r7, #18]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d901      	bls.n	80085a6 <pbuf_add_header_impl+0x56>
    return 1;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e032      	b.n	800860c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	7b1b      	ldrb	r3, [r3, #12]
 80085aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80085ac:	8a3b      	ldrh	r3, [r7, #16]
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00c      	beq.n	80085d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	425b      	negs	r3, r3
 80085be:	4413      	add	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3310      	adds	r3, #16
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d20d      	bcs.n	80085e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e01d      	b.n	800860c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	425b      	negs	r3, r3
 80085de:	4413      	add	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e001      	b.n	80085e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e011      	b.n	800860c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	895a      	ldrh	r2, [r3, #10]
 80085f2:	8a7b      	ldrh	r3, [r7, #18]
 80085f4:	4413      	add	r3, r2
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	891a      	ldrh	r2, [r3, #8]
 8008600:	8a7b      	ldrh	r3, [r7, #18]
 8008602:	4413      	add	r3, r2
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	811a      	strh	r2, [r3, #8]


  return 0;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	08017b08 	.word	0x08017b08
 8008618:	08017c6c 	.word	0x08017c6c
 800861c:	08017b68 	.word	0x08017b68

08008620 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800862a:	2200      	movs	r2, #0
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff ff8e 	bl	8008550 <pbuf_add_header_impl>
 8008634:	4603      	mov	r3, r0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <pbuf_remove_header+0x1e>
 8008650:	4b20      	ldr	r3, [pc, #128]	; (80086d4 <pbuf_remove_header+0x94>)
 8008652:	f240 224b 	movw	r2, #587	; 0x24b
 8008656:	4920      	ldr	r1, [pc, #128]	; (80086d8 <pbuf_remove_header+0x98>)
 8008658:	4820      	ldr	r0, [pc, #128]	; (80086dc <pbuf_remove_header+0x9c>)
 800865a:	f00b fc0d 	bl	8013e78 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <pbuf_remove_header+0x2c>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866a:	d301      	bcc.n	8008670 <pbuf_remove_header+0x30>
    return 1;
 800866c:	2301      	movs	r3, #1
 800866e:	e02c      	b.n	80086ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <pbuf_remove_header+0x3a>
    return 0;
 8008676:	2300      	movs	r3, #0
 8008678:	e027      	b.n	80086ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	895b      	ldrh	r3, [r3, #10]
 8008682:	89fa      	ldrh	r2, [r7, #14]
 8008684:	429a      	cmp	r2, r3
 8008686:	d908      	bls.n	800869a <pbuf_remove_header+0x5a>
 8008688:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <pbuf_remove_header+0x94>)
 800868a:	f240 2255 	movw	r2, #597	; 0x255
 800868e:	4914      	ldr	r1, [pc, #80]	; (80086e0 <pbuf_remove_header+0xa0>)
 8008690:	4812      	ldr	r0, [pc, #72]	; (80086dc <pbuf_remove_header+0x9c>)
 8008692:	f00b fbf1 	bl	8013e78 <iprintf>
 8008696:	2301      	movs	r3, #1
 8008698:	e017      	b.n	80086ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	441a      	add	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	895a      	ldrh	r2, [r3, #10]
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	891a      	ldrh	r2, [r3, #8]
 80086be:	89fb      	ldrh	r3, [r7, #14]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	08017b08 	.word	0x08017b08
 80086d8:	08017c6c 	.word	0x08017c6c
 80086dc:	08017b68 	.word	0x08017b68
 80086e0:	08017c78 	.word	0x08017c78

080086e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
 80086f0:	4613      	mov	r3, r2
 80086f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80086f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da08      	bge.n	800870e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80086fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008700:	425b      	negs	r3, r3
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff9b 	bl	8008640 <pbuf_remove_header>
 800870a:	4603      	mov	r3, r0
 800870c:	e007      	b.n	800871e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800870e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008712:	787a      	ldrb	r2, [r7, #1]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff ff1a 	bl	8008550 <pbuf_add_header_impl>
 800871c:	4603      	mov	r3, r0
  }
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008732:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008736:	2201      	movs	r2, #1
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ffd2 	bl	80086e4 <pbuf_header_impl>
 8008740:	4603      	mov	r3, r0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d106      	bne.n	800876e <pbuf_free+0x22>
 8008760:	4b3b      	ldr	r3, [pc, #236]	; (8008850 <pbuf_free+0x104>)
 8008762:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008766:	493b      	ldr	r1, [pc, #236]	; (8008854 <pbuf_free+0x108>)
 8008768:	483b      	ldr	r0, [pc, #236]	; (8008858 <pbuf_free+0x10c>)
 800876a:	f00b fb85 	bl	8013e78 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800876e:	2300      	movs	r3, #0
 8008770:	e069      	b.n	8008846 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008776:	e062      	b.n	800883e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008778:	f00a fc96 	bl	80130a8 <sys_arch_protect>
 800877c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7b9b      	ldrb	r3, [r3, #14]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <pbuf_free+0x48>
 8008786:	4b32      	ldr	r3, [pc, #200]	; (8008850 <pbuf_free+0x104>)
 8008788:	f240 22f1 	movw	r2, #753	; 0x2f1
 800878c:	4933      	ldr	r1, [pc, #204]	; (800885c <pbuf_free+0x110>)
 800878e:	4832      	ldr	r0, [pc, #200]	; (8008858 <pbuf_free+0x10c>)
 8008790:	f00b fb72 	bl	8013e78 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	7b9b      	ldrb	r3, [r3, #14]
 8008798:	3b01      	subs	r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	739a      	strb	r2, [r3, #14]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7b9b      	ldrb	r3, [r3, #14]
 80087a4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80087a6:	69b8      	ldr	r0, [r7, #24]
 80087a8:	f00a fc8c 	bl	80130c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d143      	bne.n	800883a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7b1b      	ldrb	r3, [r3, #12]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7b5b      	ldrb	r3, [r3, #13]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d011      	beq.n	80087f2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <pbuf_free+0x9c>
 80087da:	4b1d      	ldr	r3, [pc, #116]	; (8008850 <pbuf_free+0x104>)
 80087dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80087e0:	491f      	ldr	r1, [pc, #124]	; (8008860 <pbuf_free+0x114>)
 80087e2:	481d      	ldr	r0, [pc, #116]	; (8008858 <pbuf_free+0x10c>)
 80087e4:	f00b fb48 	bl	8013e78 <iprintf>
        pc->custom_free_function(p);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	4798      	blx	r3
 80087f0:	e01d      	b.n	800882e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d104      	bne.n	8008802 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	200c      	movs	r0, #12
 80087fc:	f7ff f8f6 	bl	80079ec <memp_free>
 8008800:	e015      	b.n	800882e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d104      	bne.n	8008812 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	200b      	movs	r0, #11
 800880c:	f7ff f8ee 	bl	80079ec <memp_free>
 8008810:	e00d      	b.n	800882e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <pbuf_free+0xd4>
          mem_free(p);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe fd33 	bl	8007284 <mem_free>
 800881e:	e006      	b.n	800882e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <pbuf_free+0x104>)
 8008822:	f240 320f 	movw	r2, #783	; 0x30f
 8008826:	490f      	ldr	r1, [pc, #60]	; (8008864 <pbuf_free+0x118>)
 8008828:	480b      	ldr	r0, [pc, #44]	; (8008858 <pbuf_free+0x10c>)
 800882a:	f00b fb25 	bl	8013e78 <iprintf>
        }
      }
      count++;
 800882e:	7ffb      	ldrb	r3, [r7, #31]
 8008830:	3301      	adds	r3, #1
 8008832:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	e001      	b.n	800883e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d199      	bne.n	8008778 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008844:	7ffb      	ldrb	r3, [r7, #31]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	08017b08 	.word	0x08017b08
 8008854:	08017c6c 	.word	0x08017c6c
 8008858:	08017b68 	.word	0x08017b68
 800885c:	08017c98 	.word	0x08017c98
 8008860:	08017cb0 	.word	0x08017cb0
 8008864:	08017cd4 	.word	0x08017cd4

08008868 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008874:	e005      	b.n	8008882 <pbuf_clen+0x1a>
    ++len;
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	3301      	adds	r3, #1
 800887a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f6      	bne.n	8008876 <pbuf_clen+0xe>
  }
  return len;
 8008888:	89fb      	ldrh	r3, [r7, #14]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
	...

08008898 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80088a6:	f00a fbff 	bl	80130a8 <sys_arch_protect>
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7b9b      	ldrb	r3, [r3, #14]
 80088b0:	3301      	adds	r3, #1
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	739a      	strb	r2, [r3, #14]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f00a fc03 	bl	80130c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7b9b      	ldrb	r3, [r3, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <pbuf_ref+0x3c>
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <pbuf_ref+0x44>)
 80088c8:	f240 3242 	movw	r2, #834	; 0x342
 80088cc:	4904      	ldr	r1, [pc, #16]	; (80088e0 <pbuf_ref+0x48>)
 80088ce:	4805      	ldr	r0, [pc, #20]	; (80088e4 <pbuf_ref+0x4c>)
 80088d0:	f00b fad2 	bl	8013e78 <iprintf>
  }
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	08017b08 	.word	0x08017b08
 80088e0:	08017ce8 	.word	0x08017ce8
 80088e4:	08017b68 	.word	0x08017b68

080088e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <pbuf_cat+0x16>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d107      	bne.n	800890e <pbuf_cat+0x26>
 80088fe:	4b20      	ldr	r3, [pc, #128]	; (8008980 <pbuf_cat+0x98>)
 8008900:	f240 3259 	movw	r2, #857	; 0x359
 8008904:	491f      	ldr	r1, [pc, #124]	; (8008984 <pbuf_cat+0x9c>)
 8008906:	4820      	ldr	r0, [pc, #128]	; (8008988 <pbuf_cat+0xa0>)
 8008908:	f00b fab6 	bl	8013e78 <iprintf>
 800890c:	e034      	b.n	8008978 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e00a      	b.n	800892a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	891a      	ldrh	r2, [r3, #8]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	891b      	ldrh	r3, [r3, #8]
 800891c:	4413      	add	r3, r2
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f0      	bne.n	8008914 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	891a      	ldrh	r2, [r3, #8]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	895b      	ldrh	r3, [r3, #10]
 800893a:	429a      	cmp	r2, r3
 800893c:	d006      	beq.n	800894c <pbuf_cat+0x64>
 800893e:	4b10      	ldr	r3, [pc, #64]	; (8008980 <pbuf_cat+0x98>)
 8008940:	f240 3262 	movw	r2, #866	; 0x362
 8008944:	4911      	ldr	r1, [pc, #68]	; (800898c <pbuf_cat+0xa4>)
 8008946:	4810      	ldr	r0, [pc, #64]	; (8008988 <pbuf_cat+0xa0>)
 8008948:	f00b fa96 	bl	8013e78 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <pbuf_cat+0x7a>
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <pbuf_cat+0x98>)
 8008956:	f240 3263 	movw	r2, #867	; 0x363
 800895a:	490d      	ldr	r1, [pc, #52]	; (8008990 <pbuf_cat+0xa8>)
 800895c:	480a      	ldr	r0, [pc, #40]	; (8008988 <pbuf_cat+0xa0>)
 800895e:	f00b fa8b 	bl	8013e78 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	891a      	ldrh	r2, [r3, #8]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	891b      	ldrh	r3, [r3, #8]
 800896a:	4413      	add	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	08017b08 	.word	0x08017b08
 8008984:	08017cfc 	.word	0x08017cfc
 8008988:	08017b68 	.word	0x08017b68
 800898c:	08017d34 	.word	0x08017d34
 8008990:	08017d64 	.word	0x08017d64

08008994 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ffa1 	bl	80088e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	f7ff ff76 	bl	8008898 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d008      	beq.n	80089de <pbuf_copy+0x2a>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <pbuf_copy+0x2a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	891a      	ldrh	r2, [r3, #8]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	891b      	ldrh	r3, [r3, #8]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d209      	bcs.n	80089f2 <pbuf_copy+0x3e>
 80089de:	4b57      	ldr	r3, [pc, #348]	; (8008b3c <pbuf_copy+0x188>)
 80089e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80089e4:	4956      	ldr	r1, [pc, #344]	; (8008b40 <pbuf_copy+0x18c>)
 80089e6:	4857      	ldr	r0, [pc, #348]	; (8008b44 <pbuf_copy+0x190>)
 80089e8:	f00b fa46 	bl	8013e78 <iprintf>
 80089ec:	f06f 030f 	mvn.w	r3, #15
 80089f0:	e09f      	b.n	8008b32 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	895b      	ldrh	r3, [r3, #10]
 80089f6:	461a      	mov	r2, r3
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	895b      	ldrh	r3, [r3, #10]
 8008a00:	4619      	mov	r1, r3
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1acb      	subs	r3, r1, r3
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d306      	bcc.n	8008a18 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	895b      	ldrh	r3, [r3, #10]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e005      	b.n	8008a24 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	895b      	ldrh	r3, [r3, #10]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	18d0      	adds	r0, r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	4413      	add	r3, r2
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4619      	mov	r1, r3
 8008a38:	f00b fb09 	bl	801404e <memcpy>
    offset_to += len;
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	895b      	ldrh	r3, [r3, #10]
 8008a50:	461a      	mov	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d906      	bls.n	8008a66 <pbuf_copy+0xb2>
 8008a58:	4b38      	ldr	r3, [pc, #224]	; (8008b3c <pbuf_copy+0x188>)
 8008a5a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008a5e:	493a      	ldr	r1, [pc, #232]	; (8008b48 <pbuf_copy+0x194>)
 8008a60:	4838      	ldr	r0, [pc, #224]	; (8008b44 <pbuf_copy+0x190>)
 8008a62:	f00b fa09 	bl	8013e78 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	895b      	ldrh	r3, [r3, #10]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d906      	bls.n	8008a80 <pbuf_copy+0xcc>
 8008a72:	4b32      	ldr	r3, [pc, #200]	; (8008b3c <pbuf_copy+0x188>)
 8008a74:	f240 32da 	movw	r2, #986	; 0x3da
 8008a78:	4934      	ldr	r1, [pc, #208]	; (8008b4c <pbuf_copy+0x198>)
 8008a7a:	4832      	ldr	r0, [pc, #200]	; (8008b44 <pbuf_copy+0x190>)
 8008a7c:	f00b f9fc 	bl	8013e78 <iprintf>
    if (offset_from >= p_from->len) {
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	895b      	ldrh	r3, [r3, #10]
 8008a84:	461a      	mov	r2, r3
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d304      	bcc.n	8008a96 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	895b      	ldrh	r3, [r3, #10]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d114      	bne.n	8008acc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10c      	bne.n	8008acc <pbuf_copy+0x118>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <pbuf_copy+0x118>
 8008ab8:	4b20      	ldr	r3, [pc, #128]	; (8008b3c <pbuf_copy+0x188>)
 8008aba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008abe:	4924      	ldr	r1, [pc, #144]	; (8008b50 <pbuf_copy+0x19c>)
 8008ac0:	4820      	ldr	r0, [pc, #128]	; (8008b44 <pbuf_copy+0x190>)
 8008ac2:	f00b f9d9 	bl	8013e78 <iprintf>
 8008ac6:	f06f 030f 	mvn.w	r3, #15
 8008aca:	e032      	b.n	8008b32 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d013      	beq.n	8008afa <pbuf_copy+0x146>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	895a      	ldrh	r2, [r3, #10]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	891b      	ldrh	r3, [r3, #8]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d10d      	bne.n	8008afa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d009      	beq.n	8008afa <pbuf_copy+0x146>
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <pbuf_copy+0x188>)
 8008ae8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008aec:	4919      	ldr	r1, [pc, #100]	; (8008b54 <pbuf_copy+0x1a0>)
 8008aee:	4815      	ldr	r0, [pc, #84]	; (8008b44 <pbuf_copy+0x190>)
 8008af0:	f00b f9c2 	bl	8013e78 <iprintf>
 8008af4:	f06f 0305 	mvn.w	r3, #5
 8008af8:	e01b      	b.n	8008b32 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d013      	beq.n	8008b28 <pbuf_copy+0x174>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	895a      	ldrh	r2, [r3, #10]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	891b      	ldrh	r3, [r3, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d10d      	bne.n	8008b28 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <pbuf_copy+0x174>
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <pbuf_copy+0x188>)
 8008b16:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b1a:	490e      	ldr	r1, [pc, #56]	; (8008b54 <pbuf_copy+0x1a0>)
 8008b1c:	4809      	ldr	r0, [pc, #36]	; (8008b44 <pbuf_copy+0x190>)
 8008b1e:	f00b f9ab 	bl	8013e78 <iprintf>
 8008b22:	f06f 0305 	mvn.w	r3, #5
 8008b26:	e004      	b.n	8008b32 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f47f af61 	bne.w	80089f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08017b08 	.word	0x08017b08
 8008b40:	08017db0 	.word	0x08017db0
 8008b44:	08017b68 	.word	0x08017b68
 8008b48:	08017de0 	.word	0x08017de0
 8008b4c:	08017df8 	.word	0x08017df8
 8008b50:	08017e14 	.word	0x08017e14
 8008b54:	08017e24 	.word	0x08017e24

08008b58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4611      	mov	r1, r2
 8008b64:	461a      	mov	r2, r3
 8008b66:	460b      	mov	r3, r1
 8008b68:	80fb      	strh	r3, [r7, #6]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d108      	bne.n	8008b8e <pbuf_copy_partial+0x36>
 8008b7c:	4b2b      	ldr	r3, [pc, #172]	; (8008c2c <pbuf_copy_partial+0xd4>)
 8008b7e:	f240 420a 	movw	r2, #1034	; 0x40a
 8008b82:	492b      	ldr	r1, [pc, #172]	; (8008c30 <pbuf_copy_partial+0xd8>)
 8008b84:	482b      	ldr	r0, [pc, #172]	; (8008c34 <pbuf_copy_partial+0xdc>)
 8008b86:	f00b f977 	bl	8013e78 <iprintf>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e04a      	b.n	8008c24 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d108      	bne.n	8008ba6 <pbuf_copy_partial+0x4e>
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <pbuf_copy_partial+0xd4>)
 8008b96:	f240 420b 	movw	r2, #1035	; 0x40b
 8008b9a:	4927      	ldr	r1, [pc, #156]	; (8008c38 <pbuf_copy_partial+0xe0>)
 8008b9c:	4825      	ldr	r0, [pc, #148]	; (8008c34 <pbuf_copy_partial+0xdc>)
 8008b9e:	f00b f96b 	bl	8013e78 <iprintf>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e03e      	b.n	8008c24 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	e034      	b.n	8008c16 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008bac:	88bb      	ldrh	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <pbuf_copy_partial+0x70>
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	895b      	ldrh	r3, [r3, #10]
 8008bb6:	88ba      	ldrh	r2, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d305      	bcc.n	8008bc8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	895b      	ldrh	r3, [r3, #10]
 8008bc0:	88ba      	ldrh	r2, [r7, #4]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	80bb      	strh	r3, [r7, #4]
 8008bc6:	e023      	b.n	8008c10 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	895a      	ldrh	r2, [r3, #10]
 8008bcc:	88bb      	ldrh	r3, [r7, #4]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008bd2:	8b3a      	ldrh	r2, [r7, #24]
 8008bd4:	88fb      	ldrh	r3, [r7, #6]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d901      	bls.n	8008bde <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008bde:	8b7b      	ldrh	r3, [r7, #26]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	18d0      	adds	r0, r2, r3
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	88bb      	ldrh	r3, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	8b3a      	ldrh	r2, [r7, #24]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f00b fa2d 	bl	801404e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008bf4:	8afa      	ldrh	r2, [r7, #22]
 8008bf6:	8b3b      	ldrh	r3, [r7, #24]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008bfc:	8b7a      	ldrh	r2, [r7, #26]
 8008bfe:	8b3b      	ldrh	r3, [r7, #24]
 8008c00:	4413      	add	r3, r2
 8008c02:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	8b3b      	ldrh	r3, [r7, #24]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <pbuf_copy_partial+0xca>
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1c4      	bne.n	8008bac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008c22:	8afb      	ldrh	r3, [r7, #22]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	08017b08 	.word	0x08017b08
 8008c30:	08017e50 	.word	0x08017e50
 8008c34:	08017b68 	.word	0x08017b68
 8008c38:	08017e70 	.word	0x08017e70

08008c3c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	603a      	str	r2, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	8919      	ldrh	r1, [r3, #8]
 8008c50:	88ba      	ldrh	r2, [r7, #4]
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fa95 	bl	8008184 <pbuf_alloc>
 8008c5a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <pbuf_clone+0x2a>
    return NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e011      	b.n	8008c8a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff fea3 	bl	80089b4 <pbuf_copy>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008c72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d006      	beq.n	8008c88 <pbuf_clone+0x4c>
 8008c7a:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <pbuf_clone+0x58>)
 8008c7c:	f240 5224 	movw	r2, #1316	; 0x524
 8008c80:	4905      	ldr	r1, [pc, #20]	; (8008c98 <pbuf_clone+0x5c>)
 8008c82:	4806      	ldr	r0, [pc, #24]	; (8008c9c <pbuf_clone+0x60>)
 8008c84:	f00b f8f8 	bl	8013e78 <iprintf>
  return q;
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	08017b08 	.word	0x08017b08
 8008c98:	08017f7c 	.word	0x08017f7c
 8008c9c:	08017b68 	.word	0x08017b68

08008ca0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008ca4:	f00a ffe8 	bl	8013c78 <rand>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	4b01      	ldr	r3, [pc, #4]	; (8008cc0 <tcp_init+0x20>)
 8008cba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008cbc:	bf00      	nop
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000024 	.word	0x20000024

08008cc4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7d1b      	ldrb	r3, [r3, #20]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d105      	bne.n	8008ce0 <tcp_free+0x1c>
 8008cd4:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <tcp_free+0x2c>)
 8008cd6:	22d4      	movs	r2, #212	; 0xd4
 8008cd8:	4906      	ldr	r1, [pc, #24]	; (8008cf4 <tcp_free+0x30>)
 8008cda:	4807      	ldr	r0, [pc, #28]	; (8008cf8 <tcp_free+0x34>)
 8008cdc:	f00b f8cc 	bl	8013e78 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008ce0:	6879      	ldr	r1, [r7, #4]
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	f7fe fe82 	bl	80079ec <memp_free>
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	08018008 	.word	0x08018008
 8008cf4:	08018038 	.word	0x08018038
 8008cf8:	0801804c 	.word	0x0801804c

08008cfc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7d1b      	ldrb	r3, [r3, #20]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d105      	bne.n	8008d18 <tcp_free_listen+0x1c>
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <tcp_free_listen+0x2c>)
 8008d0e:	22df      	movs	r2, #223	; 0xdf
 8008d10:	4906      	ldr	r1, [pc, #24]	; (8008d2c <tcp_free_listen+0x30>)
 8008d12:	4807      	ldr	r0, [pc, #28]	; (8008d30 <tcp_free_listen+0x34>)
 8008d14:	f00b f8b0 	bl	8013e78 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	2002      	movs	r0, #2
 8008d1c:	f7fe fe66 	bl	80079ec <memp_free>
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	08018008 	.word	0x08018008
 8008d2c:	08018074 	.word	0x08018074
 8008d30:	0801804c 	.word	0x0801804c

08008d34 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008d38:	f000 fea2 	bl	8009a80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008d3c:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <tcp_tmr+0x28>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <tcp_tmr+0x28>)
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <tcp_tmr+0x28>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008d54:	f000 fb54 	bl	8009400 <tcp_slowtmr>
  }
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	2000c42d 	.word	0x2000c42d

08008d60 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d105      	bne.n	8008d7c <tcp_remove_listener+0x1c>
 8008d70:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <tcp_remove_listener+0x48>)
 8008d72:	22ff      	movs	r2, #255	; 0xff
 8008d74:	490d      	ldr	r1, [pc, #52]	; (8008dac <tcp_remove_listener+0x4c>)
 8008d76:	480e      	ldr	r0, [pc, #56]	; (8008db0 <tcp_remove_listener+0x50>)
 8008d78:	f00b f87e 	bl	8013e78 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e00a      	b.n	8008d98 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d102      	bne.n	8008d92 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f1      	bne.n	8008d82 <tcp_remove_listener+0x22>
    }
  }
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	08018008 	.word	0x08018008
 8008dac:	08018090 	.word	0x08018090
 8008db0:	0801804c 	.word	0x0801804c

08008db4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <tcp_listen_closed+0x1c>
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <tcp_listen_closed+0x60>)
 8008dc4:	f240 1211 	movw	r2, #273	; 0x111
 8008dc8:	4913      	ldr	r1, [pc, #76]	; (8008e18 <tcp_listen_closed+0x64>)
 8008dca:	4814      	ldr	r0, [pc, #80]	; (8008e1c <tcp_listen_closed+0x68>)
 8008dcc:	f00b f854 	bl	8013e78 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	7d1b      	ldrb	r3, [r3, #20]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d006      	beq.n	8008de6 <tcp_listen_closed+0x32>
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <tcp_listen_closed+0x60>)
 8008dda:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008dde:	4910      	ldr	r1, [pc, #64]	; (8008e20 <tcp_listen_closed+0x6c>)
 8008de0:	480e      	ldr	r0, [pc, #56]	; (8008e1c <tcp_listen_closed+0x68>)
 8008de2:	f00b f849 	bl	8013e78 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008de6:	2301      	movs	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	e00b      	b.n	8008e04 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008dec:	4a0d      	ldr	r2, [pc, #52]	; (8008e24 <tcp_listen_closed+0x70>)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff ffb1 	bl	8008d60 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d9f0      	bls.n	8008dec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08018008 	.word	0x08018008
 8008e18:	080180b8 	.word	0x080180b8
 8008e1c:	0801804c 	.word	0x0801804c
 8008e20:	080180c4 	.word	0x080180c4
 8008e24:	0801a3cc 	.word	0x0801a3cc

08008e28 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008e28:	b5b0      	push	{r4, r5, r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af04      	add	r7, sp, #16
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <tcp_close_shutdown+0x20>
 8008e3a:	4b63      	ldr	r3, [pc, #396]	; (8008fc8 <tcp_close_shutdown+0x1a0>)
 8008e3c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008e40:	4962      	ldr	r1, [pc, #392]	; (8008fcc <tcp_close_shutdown+0x1a4>)
 8008e42:	4863      	ldr	r0, [pc, #396]	; (8008fd0 <tcp_close_shutdown+0x1a8>)
 8008e44:	f00b f818 	bl	8013e78 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d066      	beq.n	8008f1c <tcp_close_shutdown+0xf4>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7d1b      	ldrb	r3, [r3, #20]
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d003      	beq.n	8008e5e <tcp_close_shutdown+0x36>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	2b07      	cmp	r3, #7
 8008e5c:	d15e      	bne.n	8008f1c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <tcp_close_shutdown+0x48>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e6e:	d055      	beq.n	8008f1c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	8b5b      	ldrh	r3, [r3, #26]
 8008e74:	f003 0310 	and.w	r3, r3, #16
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <tcp_close_shutdown+0x62>
 8008e7c:	4b52      	ldr	r3, [pc, #328]	; (8008fc8 <tcp_close_shutdown+0x1a0>)
 8008e7e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008e82:	4954      	ldr	r1, [pc, #336]	; (8008fd4 <tcp_close_shutdown+0x1ac>)
 8008e84:	4852      	ldr	r0, [pc, #328]	; (8008fd0 <tcp_close_shutdown+0x1a8>)
 8008e86:	f00a fff7 	bl	8013e78 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e92:	687d      	ldr	r5, [r7, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3304      	adds	r3, #4
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	8ad2      	ldrh	r2, [r2, #22]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	8b09      	ldrh	r1, [r1, #24]
 8008ea0:	9102      	str	r1, [sp, #8]
 8008ea2:	9201      	str	r2, [sp, #4]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f004 fe91 	bl	800dbd4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f8c6 	bl	800a044 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008eb8:	4b47      	ldr	r3, [pc, #284]	; (8008fd8 <tcp_close_shutdown+0x1b0>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d105      	bne.n	8008ece <tcp_close_shutdown+0xa6>
 8008ec2:	4b45      	ldr	r3, [pc, #276]	; (8008fd8 <tcp_close_shutdown+0x1b0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	4a43      	ldr	r2, [pc, #268]	; (8008fd8 <tcp_close_shutdown+0x1b0>)
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	e013      	b.n	8008ef6 <tcp_close_shutdown+0xce>
 8008ece:	4b42      	ldr	r3, [pc, #264]	; (8008fd8 <tcp_close_shutdown+0x1b0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e00c      	b.n	8008ef0 <tcp_close_shutdown+0xc8>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d104      	bne.n	8008eea <tcp_close_shutdown+0xc2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	60da      	str	r2, [r3, #12]
 8008ee8:	e005      	b.n	8008ef6 <tcp_close_shutdown+0xce>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1ef      	bne.n	8008ed6 <tcp_close_shutdown+0xae>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	60da      	str	r2, [r3, #12]
 8008efc:	4b37      	ldr	r3, [pc, #220]	; (8008fdc <tcp_close_shutdown+0x1b4>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008f02:	4b37      	ldr	r3, [pc, #220]	; (8008fe0 <tcp_close_shutdown+0x1b8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d102      	bne.n	8008f12 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008f0c:	f003 fd5e 	bl	800c9cc <tcp_trigger_input_pcb_close>
 8008f10:	e002      	b.n	8008f18 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff fed6 	bl	8008cc4 <tcp_free>
      }
      return ERR_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e050      	b.n	8008fbe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7d1b      	ldrb	r3, [r3, #20]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d03b      	beq.n	8008f9c <tcp_close_shutdown+0x174>
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	dc44      	bgt.n	8008fb2 <tcp_close_shutdown+0x18a>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <tcp_close_shutdown+0x10a>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d02a      	beq.n	8008f86 <tcp_close_shutdown+0x15e>
 8008f30:	e03f      	b.n	8008fb2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8adb      	ldrh	r3, [r3, #22]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d021      	beq.n	8008f7e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008f3a:	4b2a      	ldr	r3, [pc, #168]	; (8008fe4 <tcp_close_shutdown+0x1bc>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d105      	bne.n	8008f50 <tcp_close_shutdown+0x128>
 8008f44:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <tcp_close_shutdown+0x1bc>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	4a26      	ldr	r2, [pc, #152]	; (8008fe4 <tcp_close_shutdown+0x1bc>)
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	e013      	b.n	8008f78 <tcp_close_shutdown+0x150>
 8008f50:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <tcp_close_shutdown+0x1bc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	e00c      	b.n	8008f72 <tcp_close_shutdown+0x14a>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d104      	bne.n	8008f6c <tcp_close_shutdown+0x144>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	e005      	b.n	8008f78 <tcp_close_shutdown+0x150>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1ef      	bne.n	8008f58 <tcp_close_shutdown+0x130>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff fea0 	bl	8008cc4 <tcp_free>
      break;
 8008f84:	e01a      	b.n	8008fbc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff ff14 	bl	8008db4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	4816      	ldr	r0, [pc, #88]	; (8008fe8 <tcp_close_shutdown+0x1c0>)
 8008f90:	f001 f8a8 	bl	800a0e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff feb1 	bl	8008cfc <tcp_free_listen>
      break;
 8008f9a:	e00f      	b.n	8008fbc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	480e      	ldr	r0, [pc, #56]	; (8008fd8 <tcp_close_shutdown+0x1b0>)
 8008fa0:	f001 f8a0 	bl	800a0e4 <tcp_pcb_remove>
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <tcp_close_shutdown+0x1b4>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fe8a 	bl	8008cc4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008fb0:	e004      	b.n	8008fbc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f81a 	bl	8008fec <tcp_close_shutdown_fin>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	e000      	b.n	8008fbe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	08018008 	.word	0x08018008
 8008fcc:	080180dc 	.word	0x080180dc
 8008fd0:	0801804c 	.word	0x0801804c
 8008fd4:	080180fc 	.word	0x080180fc
 8008fd8:	2000c424 	.word	0x2000c424
 8008fdc:	2000c42c 	.word	0x2000c42c
 8008fe0:	2000c464 	.word	0x2000c464
 8008fe4:	2000c41c 	.word	0x2000c41c
 8008fe8:	2000c420 	.word	0x2000c420

08008fec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <tcp_close_shutdown_fin+0x1c>
 8008ffa:	4b2e      	ldr	r3, [pc, #184]	; (80090b4 <tcp_close_shutdown_fin+0xc8>)
 8008ffc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009000:	492d      	ldr	r1, [pc, #180]	; (80090b8 <tcp_close_shutdown_fin+0xcc>)
 8009002:	482e      	ldr	r0, [pc, #184]	; (80090bc <tcp_close_shutdown_fin+0xd0>)
 8009004:	f00a ff38 	bl	8013e78 <iprintf>

  switch (pcb->state) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7d1b      	ldrb	r3, [r3, #20]
 800900c:	2b07      	cmp	r3, #7
 800900e:	d020      	beq.n	8009052 <tcp_close_shutdown_fin+0x66>
 8009010:	2b07      	cmp	r3, #7
 8009012:	dc2b      	bgt.n	800906c <tcp_close_shutdown_fin+0x80>
 8009014:	2b03      	cmp	r3, #3
 8009016:	d002      	beq.n	800901e <tcp_close_shutdown_fin+0x32>
 8009018:	2b04      	cmp	r3, #4
 800901a:	d00d      	beq.n	8009038 <tcp_close_shutdown_fin+0x4c>
 800901c:	e026      	b.n	800906c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f003 fee6 	bl	800cdf0 <tcp_send_fin>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d11f      	bne.n	8009070 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2205      	movs	r2, #5
 8009034:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009036:	e01b      	b.n	8009070 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f003 fed9 	bl	800cdf0 <tcp_send_fin>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d114      	bne.n	8009074 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2205      	movs	r2, #5
 800904e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009050:	e010      	b.n	8009074 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f003 fecc 	bl	800cdf0 <tcp_send_fin>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800905c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d109      	bne.n	8009078 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2209      	movs	r2, #9
 8009068:	751a      	strb	r2, [r3, #20]
      }
      break;
 800906a:	e005      	b.n	8009078 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e01c      	b.n	80090aa <tcp_close_shutdown_fin+0xbe>
      break;
 8009070:	bf00      	nop
 8009072:	e002      	b.n	800907a <tcp_close_shutdown_fin+0x8e>
      break;
 8009074:	bf00      	nop
 8009076:	e000      	b.n	800907a <tcp_close_shutdown_fin+0x8e>
      break;
 8009078:	bf00      	nop
  }

  if (err == ERR_OK) {
 800907a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d103      	bne.n	800908a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f003 fff2 	bl	800d06c <tcp_output>
 8009088:	e00d      	b.n	80090a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800908a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	d108      	bne.n	80090a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8b5b      	ldrh	r3, [r3, #26]
 8009098:	f043 0308 	orr.w	r3, r3, #8
 800909c:	b29a      	uxth	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e001      	b.n	80090aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80090a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	08018008 	.word	0x08018008
 80090b8:	080180b8 	.word	0x080180b8
 80090bc:	0801804c 	.word	0x0801804c

080090c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <tcp_close+0x22>
 80090ce:	4b0f      	ldr	r3, [pc, #60]	; (800910c <tcp_close+0x4c>)
 80090d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80090d4:	490e      	ldr	r1, [pc, #56]	; (8009110 <tcp_close+0x50>)
 80090d6:	480f      	ldr	r0, [pc, #60]	; (8009114 <tcp_close+0x54>)
 80090d8:	f00a fece 	bl	8013e78 <iprintf>
 80090dc:	f06f 030f 	mvn.w	r3, #15
 80090e0:	e00f      	b.n	8009102 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	7d1b      	ldrb	r3, [r3, #20]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d006      	beq.n	80090f8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8b5b      	ldrh	r3, [r3, #26]
 80090ee:	f043 0310 	orr.w	r3, r3, #16
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80090f8:	2101      	movs	r1, #1
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fe94 	bl	8008e28 <tcp_close_shutdown>
 8009100:	4603      	mov	r3, r0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	08018008 	.word	0x08018008
 8009110:	08018118 	.word	0x08018118
 8009114:	0801804c 	.word	0x0801804c

08009118 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08e      	sub	sp, #56	; 0x38
 800911c:	af04      	add	r7, sp, #16
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d107      	bne.n	8009138 <tcp_abandon+0x20>
 8009128:	4b52      	ldr	r3, [pc, #328]	; (8009274 <tcp_abandon+0x15c>)
 800912a:	f240 223d 	movw	r2, #573	; 0x23d
 800912e:	4952      	ldr	r1, [pc, #328]	; (8009278 <tcp_abandon+0x160>)
 8009130:	4852      	ldr	r0, [pc, #328]	; (800927c <tcp_abandon+0x164>)
 8009132:	f00a fea1 	bl	8013e78 <iprintf>
 8009136:	e099      	b.n	800926c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	7d1b      	ldrb	r3, [r3, #20]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d106      	bne.n	800914e <tcp_abandon+0x36>
 8009140:	4b4c      	ldr	r3, [pc, #304]	; (8009274 <tcp_abandon+0x15c>)
 8009142:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009146:	494e      	ldr	r1, [pc, #312]	; (8009280 <tcp_abandon+0x168>)
 8009148:	484c      	ldr	r0, [pc, #304]	; (800927c <tcp_abandon+0x164>)
 800914a:	f00a fe95 	bl	8013e78 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7d1b      	ldrb	r3, [r3, #20]
 8009152:	2b0a      	cmp	r3, #10
 8009154:	d107      	bne.n	8009166 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	484a      	ldr	r0, [pc, #296]	; (8009284 <tcp_abandon+0x16c>)
 800915a:	f000 ffc3 	bl	800a0e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fdb0 	bl	8008cc4 <tcp_free>
 8009164:	e082      	b.n	800926c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009172:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009180:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7d1b      	ldrb	r3, [r3, #20]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d126      	bne.n	80091de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8adb      	ldrh	r3, [r3, #22]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d02e      	beq.n	80091f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009198:	4b3b      	ldr	r3, [pc, #236]	; (8009288 <tcp_abandon+0x170>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d105      	bne.n	80091ae <tcp_abandon+0x96>
 80091a2:	4b39      	ldr	r3, [pc, #228]	; (8009288 <tcp_abandon+0x170>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	4a37      	ldr	r2, [pc, #220]	; (8009288 <tcp_abandon+0x170>)
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	e013      	b.n	80091d6 <tcp_abandon+0xbe>
 80091ae:	4b36      	ldr	r3, [pc, #216]	; (8009288 <tcp_abandon+0x170>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	61fb      	str	r3, [r7, #28]
 80091b4:	e00c      	b.n	80091d0 <tcp_abandon+0xb8>
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d104      	bne.n	80091ca <tcp_abandon+0xb2>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	60da      	str	r2, [r3, #12]
 80091c8:	e005      	b.n	80091d6 <tcp_abandon+0xbe>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1ef      	bne.n	80091b6 <tcp_abandon+0x9e>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	60da      	str	r2, [r3, #12]
 80091dc:	e00b      	b.n	80091f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8adb      	ldrh	r3, [r3, #22]
 80091e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4828      	ldr	r0, [pc, #160]	; (800928c <tcp_abandon+0x174>)
 80091ec:	f000 ff7a 	bl	800a0e4 <tcp_pcb_remove>
 80091f0:	4b27      	ldr	r3, [pc, #156]	; (8009290 <tcp_abandon+0x178>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fd1c 	bl	8009c40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fd13 	bl	8009c40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fd0a 	bl	8009c40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3304      	adds	r3, #4
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	8b12      	ldrh	r2, [r2, #24]
 800923c:	9202      	str	r2, [sp, #8]
 800923e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009240:	9201      	str	r2, [sp, #4]
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	460b      	mov	r3, r1
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	69b9      	ldr	r1, [r7, #24]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f004 fcc2 	bl	800dbd4 <tcp_rst>
    }
    last_state = pcb->state;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7d1b      	ldrb	r3, [r3, #20]
 8009254:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7ff fd34 	bl	8008cc4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <tcp_abandon+0x154>
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f06f 010c 	mvn.w	r1, #12
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	4798      	blx	r3
  }
}
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	08018008 	.word	0x08018008
 8009278:	0801814c 	.word	0x0801814c
 800927c:	0801804c 	.word	0x0801804c
 8009280:	08018168 	.word	0x08018168
 8009284:	2000c428 	.word	0x2000c428
 8009288:	2000c41c 	.word	0x2000c41c
 800928c:	2000c424 	.word	0x2000c424
 8009290:	2000c42c 	.word	0x2000c42c

08009294 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800929c:	2101      	movs	r1, #1
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff ff3a 	bl	8009118 <tcp_abandon>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <tcp_update_rcv_ann_wnd+0x1c>
 80092ba:	4b25      	ldr	r3, [pc, #148]	; (8009350 <tcp_update_rcv_ann_wnd+0xa4>)
 80092bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80092c0:	4924      	ldr	r1, [pc, #144]	; (8009354 <tcp_update_rcv_ann_wnd+0xa8>)
 80092c2:	4825      	ldr	r0, [pc, #148]	; (8009358 <tcp_update_rcv_ann_wnd+0xac>)
 80092c4:	f00a fdd8 	bl	8013e78 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80092d0:	4413      	add	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80092dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80092e0:	bf28      	it	cs
 80092e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80092e6:	b292      	uxth	r2, r2
 80092e8:	4413      	add	r3, r2
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	db08      	blt.n	8009304 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	e020      	b.n	8009346 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	dd03      	ble.n	800931a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009318:	e014      	b.n	8009344 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932c:	d306      	bcc.n	800933c <tcp_update_rcv_ann_wnd+0x90>
 800932e:	4b08      	ldr	r3, [pc, #32]	; (8009350 <tcp_update_rcv_ann_wnd+0xa4>)
 8009330:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009334:	4909      	ldr	r1, [pc, #36]	; (800935c <tcp_update_rcv_ann_wnd+0xb0>)
 8009336:	4808      	ldr	r0, [pc, #32]	; (8009358 <tcp_update_rcv_ann_wnd+0xac>)
 8009338:	f00a fd9e 	bl	8013e78 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009344:	2300      	movs	r3, #0
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	08018008 	.word	0x08018008
 8009354:	08018264 	.word	0x08018264
 8009358:	0801804c 	.word	0x0801804c
 800935c:	08018288 	.word	0x08018288

08009360 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d107      	bne.n	8009382 <tcp_recved+0x22>
 8009372:	4b1f      	ldr	r3, [pc, #124]	; (80093f0 <tcp_recved+0x90>)
 8009374:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009378:	491e      	ldr	r1, [pc, #120]	; (80093f4 <tcp_recved+0x94>)
 800937a:	481f      	ldr	r0, [pc, #124]	; (80093f8 <tcp_recved+0x98>)
 800937c:	f00a fd7c 	bl	8013e78 <iprintf>
 8009380:	e032      	b.n	80093e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7d1b      	ldrb	r3, [r3, #20]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d106      	bne.n	8009398 <tcp_recved+0x38>
 800938a:	4b19      	ldr	r3, [pc, #100]	; (80093f0 <tcp_recved+0x90>)
 800938c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009390:	491a      	ldr	r1, [pc, #104]	; (80093fc <tcp_recved+0x9c>)
 8009392:	4819      	ldr	r0, [pc, #100]	; (80093f8 <tcp_recved+0x98>)
 8009394:	f00a fd70 	bl	8013e78 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800939c:	887b      	ldrh	r3, [r7, #2]
 800939e:	4413      	add	r3, r2
 80093a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80093a8:	d804      	bhi.n	80093b4 <tcp_recved+0x54>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ae:	89fa      	ldrh	r2, [r7, #14]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d204      	bcs.n	80093be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80093ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80093bc:	e002      	b.n	80093c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	89fa      	ldrh	r2, [r7, #14]
 80093c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ff71 	bl	80092ac <tcp_update_rcv_ann_wnd>
 80093ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80093d2:	d309      	bcc.n	80093e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	8b5b      	ldrh	r3, [r3, #26]
 80093d8:	f043 0302 	orr.w	r3, r3, #2
 80093dc:	b29a      	uxth	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f003 fe42 	bl	800d06c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	08018008 	.word	0x08018008
 80093f4:	080182a4 	.word	0x080182a4
 80093f8:	0801804c 	.word	0x0801804c
 80093fc:	080182bc 	.word	0x080182bc

08009400 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009400:	b5b0      	push	{r4, r5, r7, lr}
 8009402:	b090      	sub	sp, #64	; 0x40
 8009404:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800940c:	4b94      	ldr	r3, [pc, #592]	; (8009660 <tcp_slowtmr+0x260>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	4a93      	ldr	r2, [pc, #588]	; (8009660 <tcp_slowtmr+0x260>)
 8009414:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009416:	4b93      	ldr	r3, [pc, #588]	; (8009664 <tcp_slowtmr+0x264>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	b2da      	uxtb	r2, r3
 800941e:	4b91      	ldr	r3, [pc, #580]	; (8009664 <tcp_slowtmr+0x264>)
 8009420:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009426:	4b90      	ldr	r3, [pc, #576]	; (8009668 <tcp_slowtmr+0x268>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800942c:	e29f      	b.n	800996e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	7d1b      	ldrb	r3, [r3, #20]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d106      	bne.n	8009444 <tcp_slowtmr+0x44>
 8009436:	4b8d      	ldr	r3, [pc, #564]	; (800966c <tcp_slowtmr+0x26c>)
 8009438:	f240 42be 	movw	r2, #1214	; 0x4be
 800943c:	498c      	ldr	r1, [pc, #560]	; (8009670 <tcp_slowtmr+0x270>)
 800943e:	488d      	ldr	r0, [pc, #564]	; (8009674 <tcp_slowtmr+0x274>)
 8009440:	f00a fd1a 	bl	8013e78 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	7d1b      	ldrb	r3, [r3, #20]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d106      	bne.n	800945a <tcp_slowtmr+0x5a>
 800944c:	4b87      	ldr	r3, [pc, #540]	; (800966c <tcp_slowtmr+0x26c>)
 800944e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009452:	4989      	ldr	r1, [pc, #548]	; (8009678 <tcp_slowtmr+0x278>)
 8009454:	4887      	ldr	r0, [pc, #540]	; (8009674 <tcp_slowtmr+0x274>)
 8009456:	f00a fd0f 	bl	8013e78 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	7d1b      	ldrb	r3, [r3, #20]
 800945e:	2b0a      	cmp	r3, #10
 8009460:	d106      	bne.n	8009470 <tcp_slowtmr+0x70>
 8009462:	4b82      	ldr	r3, [pc, #520]	; (800966c <tcp_slowtmr+0x26c>)
 8009464:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009468:	4984      	ldr	r1, [pc, #528]	; (800967c <tcp_slowtmr+0x27c>)
 800946a:	4882      	ldr	r0, [pc, #520]	; (8009674 <tcp_slowtmr+0x274>)
 800946c:	f00a fd04 	bl	8013e78 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	7f9a      	ldrb	r2, [r3, #30]
 8009474:	4b7b      	ldr	r3, [pc, #492]	; (8009664 <tcp_slowtmr+0x264>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d105      	bne.n	8009488 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009486:	e272      	b.n	800996e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009488:	4b76      	ldr	r3, [pc, #472]	; (8009664 <tcp_slowtmr+0x264>)
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949e:	7d1b      	ldrb	r3, [r3, #20]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d10a      	bne.n	80094ba <tcp_slowtmr+0xba>
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094aa:	2b05      	cmp	r3, #5
 80094ac:	d905      	bls.n	80094ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 80094ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b2:	3301      	adds	r3, #1
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094b8:	e11e      	b.n	80096f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094c0:	2b0b      	cmp	r3, #11
 80094c2:	d905      	bls.n	80094d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80094c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c8:	3301      	adds	r3, #1
 80094ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094ce:	e113      	b.n	80096f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d075      	beq.n	80095c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d006      	beq.n	80094f0 <tcp_slowtmr+0xf0>
 80094e2:	4b62      	ldr	r3, [pc, #392]	; (800966c <tcp_slowtmr+0x26c>)
 80094e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80094e8:	4965      	ldr	r1, [pc, #404]	; (8009680 <tcp_slowtmr+0x280>)
 80094ea:	4862      	ldr	r0, [pc, #392]	; (8009674 <tcp_slowtmr+0x274>)
 80094ec:	f00a fcc4 	bl	8013e78 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <tcp_slowtmr+0x106>
 80094f8:	4b5c      	ldr	r3, [pc, #368]	; (800966c <tcp_slowtmr+0x26c>)
 80094fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80094fe:	4961      	ldr	r1, [pc, #388]	; (8009684 <tcp_slowtmr+0x284>)
 8009500:	485c      	ldr	r0, [pc, #368]	; (8009674 <tcp_slowtmr+0x274>)
 8009502:	f00a fcb9 	bl	8013e78 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800950c:	2b0b      	cmp	r3, #11
 800950e:	d905      	bls.n	800951c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009514:	3301      	adds	r3, #1
 8009516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800951a:	e0ed      	b.n	80096f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009522:	3b01      	subs	r3, #1
 8009524:	4a58      	ldr	r2, [pc, #352]	; (8009688 <tcp_slowtmr+0x288>)
 8009526:	5cd3      	ldrb	r3, [r2, r3]
 8009528:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009530:	7c7a      	ldrb	r2, [r7, #17]
 8009532:	429a      	cmp	r2, r3
 8009534:	d907      	bls.n	8009546 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800953c:	3301      	adds	r3, #1
 800953e:	b2da      	uxtb	r2, r3
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800954c:	7c7a      	ldrb	r2, [r7, #17]
 800954e:	429a      	cmp	r2, r3
 8009550:	f200 80d2 	bhi.w	80096f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009554:	2301      	movs	r3, #1
 8009556:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800955e:	2b00      	cmp	r3, #0
 8009560:	d108      	bne.n	8009574 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009564:	f004 fc2a 	bl	800ddbc <tcp_zero_window_probe>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d014      	beq.n	8009598 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800956e:	2300      	movs	r3, #0
 8009570:	623b      	str	r3, [r7, #32]
 8009572:	e011      	b.n	8009598 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800957a:	4619      	mov	r1, r3
 800957c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800957e:	f003 faef 	bl	800cb60 <tcp_split_unsent_seg>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d107      	bne.n	8009598 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800958a:	f003 fd6f 	bl	800d06c <tcp_output>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80ac 	beq.w	80096f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80095ae:	2b06      	cmp	r3, #6
 80095b0:	f200 80a2 	bhi.w	80096f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80095ba:	3301      	adds	r3, #1
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80095c4:	e098      	b.n	80096f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	db0f      	blt.n	80095f0 <tcp_slowtmr+0x1f0>
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80095da:	4293      	cmp	r3, r2
 80095dc:	d008      	beq.n	80095f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3301      	adds	r3, #1
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	b21a      	sxth	r2, r3
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80095fc:	429a      	cmp	r2, r3
 80095fe:	db7b      	blt.n	80096f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009602:	f004 f827 	bl	800d654 <tcp_rexmit_rto_prepare>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <tcp_slowtmr+0x21c>
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009610:	2b00      	cmp	r3, #0
 8009612:	d171      	bne.n	80096f8 <tcp_slowtmr+0x2f8>
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009618:	2b00      	cmp	r3, #0
 800961a:	d06d      	beq.n	80096f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	7d1b      	ldrb	r3, [r3, #20]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d03a      	beq.n	800969a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800962a:	2b0c      	cmp	r3, #12
 800962c:	bf28      	it	cs
 800962e:	230c      	movcs	r3, #12
 8009630:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009638:	10db      	asrs	r3, r3, #3
 800963a:	b21b      	sxth	r3, r3
 800963c:	461a      	mov	r2, r3
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009644:	4413      	add	r3, r2
 8009646:	7efa      	ldrb	r2, [r7, #27]
 8009648:	4910      	ldr	r1, [pc, #64]	; (800968c <tcp_slowtmr+0x28c>)
 800964a:	5c8a      	ldrb	r2, [r1, r2]
 800964c:	4093      	lsls	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009656:	4293      	cmp	r3, r2
 8009658:	dc1a      	bgt.n	8009690 <tcp_slowtmr+0x290>
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	b21a      	sxth	r2, r3
 800965e:	e019      	b.n	8009694 <tcp_slowtmr+0x294>
 8009660:	2000c418 	.word	0x2000c418
 8009664:	2000c42e 	.word	0x2000c42e
 8009668:	2000c424 	.word	0x2000c424
 800966c:	08018008 	.word	0x08018008
 8009670:	0801834c 	.word	0x0801834c
 8009674:	0801804c 	.word	0x0801804c
 8009678:	08018378 	.word	0x08018378
 800967c:	080183a4 	.word	0x080183a4
 8009680:	080183d4 	.word	0x080183d4
 8009684:	08018408 	.word	0x08018408
 8009688:	0801a3c4 	.word	0x0801a3c4
 800968c:	0801a3b4 	.word	0x0801a3b4
 8009690:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969c:	2200      	movs	r2, #0
 800969e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096ac:	4293      	cmp	r3, r2
 80096ae:	bf28      	it	cs
 80096b0:	4613      	movcs	r3, r2
 80096b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80096b4:	8a7b      	ldrh	r3, [r7, #18]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d206      	bcs.n	80096e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80096f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096f4:	f004 f81e 	bl	800d734 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	7d1b      	ldrb	r3, [r3, #20]
 80096fc:	2b06      	cmp	r3, #6
 80096fe:	d111      	bne.n	8009724 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	8b5b      	ldrh	r3, [r3, #26]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800970c:	4b9d      	ldr	r3, [pc, #628]	; (8009984 <tcp_slowtmr+0x584>)
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b28      	cmp	r3, #40	; 0x28
 8009718:	d904      	bls.n	8009724 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800971a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800971e:	3301      	adds	r3, #1
 8009720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	7a5b      	ldrb	r3, [r3, #9]
 8009728:	f003 0308 	and.w	r3, r3, #8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d04c      	beq.n	80097ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009734:	2b04      	cmp	r3, #4
 8009736:	d003      	beq.n	8009740 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800973c:	2b07      	cmp	r3, #7
 800973e:	d144      	bne.n	80097ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009740:	4b90      	ldr	r3, [pc, #576]	; (8009984 <tcp_slowtmr+0x584>)
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009750:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009754:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009758:	498b      	ldr	r1, [pc, #556]	; (8009988 <tcp_slowtmr+0x588>)
 800975a:	fba1 1303 	umull	r1, r3, r1, r3
 800975e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009760:	429a      	cmp	r2, r3
 8009762:	d90a      	bls.n	800977a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009768:	3301      	adds	r3, #1
 800976a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800976e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009772:	3301      	adds	r3, #1
 8009774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009778:	e027      	b.n	80097ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800977a:	4b82      	ldr	r3, [pc, #520]	; (8009984 <tcp_slowtmr+0x584>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009790:	4618      	mov	r0, r3
 8009792:	4b7e      	ldr	r3, [pc, #504]	; (800998c <tcp_slowtmr+0x58c>)
 8009794:	fb00 f303 	mul.w	r3, r0, r3
 8009798:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800979a:	497b      	ldr	r1, [pc, #492]	; (8009988 <tcp_slowtmr+0x588>)
 800979c:	fba1 1303 	umull	r1, r3, r1, r3
 80097a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d911      	bls.n	80097ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80097a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097a8:	f004 fac8 	bl	800dd3c <tcp_keepalive>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80097b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80097c0:	3301      	adds	r3, #1
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d011      	beq.n	80097f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80097d2:	4b6c      	ldr	r3, [pc, #432]	; (8009984 <tcp_slowtmr+0x584>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	1ad2      	subs	r2, r2, r3
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80097e2:	4619      	mov	r1, r3
 80097e4:	460b      	mov	r3, r1
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	440b      	add	r3, r1
 80097ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d302      	bcc.n	80097f6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80097f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097f2:	f000 fddb 	bl	800a3ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	7d1b      	ldrb	r3, [r3, #20]
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d10b      	bne.n	8009816 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097fe:	4b61      	ldr	r3, [pc, #388]	; (8009984 <tcp_slowtmr+0x584>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	2b28      	cmp	r3, #40	; 0x28
 800980a:	d904      	bls.n	8009816 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800980c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009810:	3301      	adds	r3, #1
 8009812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	7d1b      	ldrb	r3, [r3, #20]
 800981a:	2b09      	cmp	r3, #9
 800981c:	d10b      	bne.n	8009836 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800981e:	4b59      	ldr	r3, [pc, #356]	; (8009984 <tcp_slowtmr+0x584>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2bf0      	cmp	r3, #240	; 0xf0
 800982a:	d904      	bls.n	8009836 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800982c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009830:	3301      	adds	r3, #1
 8009832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800983a:	2b00      	cmp	r3, #0
 800983c:	d060      	beq.n	8009900 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009844:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009848:	f000 fbfc 	bl	800a044 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d010      	beq.n	8009874 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009852:	4b4f      	ldr	r3, [pc, #316]	; (8009990 <tcp_slowtmr+0x590>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009858:	429a      	cmp	r2, r3
 800985a:	d106      	bne.n	800986a <tcp_slowtmr+0x46a>
 800985c:	4b4d      	ldr	r3, [pc, #308]	; (8009994 <tcp_slowtmr+0x594>)
 800985e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009862:	494d      	ldr	r1, [pc, #308]	; (8009998 <tcp_slowtmr+0x598>)
 8009864:	484d      	ldr	r0, [pc, #308]	; (800999c <tcp_slowtmr+0x59c>)
 8009866:	f00a fb07 	bl	8013e78 <iprintf>
        prev->next = pcb->next;
 800986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	60da      	str	r2, [r3, #12]
 8009872:	e00f      	b.n	8009894 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009874:	4b46      	ldr	r3, [pc, #280]	; (8009990 <tcp_slowtmr+0x590>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800987a:	429a      	cmp	r2, r3
 800987c:	d006      	beq.n	800988c <tcp_slowtmr+0x48c>
 800987e:	4b45      	ldr	r3, [pc, #276]	; (8009994 <tcp_slowtmr+0x594>)
 8009880:	f240 5271 	movw	r2, #1393	; 0x571
 8009884:	4946      	ldr	r1, [pc, #280]	; (80099a0 <tcp_slowtmr+0x5a0>)
 8009886:	4845      	ldr	r0, [pc, #276]	; (800999c <tcp_slowtmr+0x59c>)
 8009888:	f00a faf6 	bl	8013e78 <iprintf>
        tcp_active_pcbs = pcb->next;
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	4a3f      	ldr	r2, [pc, #252]	; (8009990 <tcp_slowtmr+0x590>)
 8009892:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009898:	2b00      	cmp	r3, #0
 800989a:	d013      	beq.n	80098c4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80098a4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	3304      	adds	r3, #4
 80098aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ac:	8ad2      	ldrh	r2, [r2, #22]
 80098ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098b0:	8b09      	ldrh	r1, [r1, #24]
 80098b2:	9102      	str	r1, [sp, #8]
 80098b4:	9201      	str	r2, [sp, #4]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	462b      	mov	r3, r5
 80098ba:	4622      	mov	r2, r4
 80098bc:	4601      	mov	r1, r0
 80098be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098c0:	f004 f988 	bl	800dbd4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80098ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098cc:	7d1b      	ldrb	r3, [r3, #20]
 80098ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80098da:	6838      	ldr	r0, [r7, #0]
 80098dc:	f7ff f9f2 	bl	8008cc4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80098e0:	4b30      	ldr	r3, [pc, #192]	; (80099a4 <tcp_slowtmr+0x5a4>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <tcp_slowtmr+0x4f6>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f06f 010c 	mvn.w	r1, #12
 80098f2:	68b8      	ldr	r0, [r7, #8]
 80098f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80098f6:	4b2b      	ldr	r3, [pc, #172]	; (80099a4 <tcp_slowtmr+0x5a4>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d037      	beq.n	800996e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80098fe:	e590      	b.n	8009422 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	7f1b      	ldrb	r3, [r3, #28]
 800990e:	3301      	adds	r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	7f1a      	ldrb	r2, [r3, #28]
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	7f5b      	ldrb	r3, [r3, #29]
 800991e:	429a      	cmp	r2, r3
 8009920:	d325      	bcc.n	800996e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	2200      	movs	r2, #0
 8009926:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009928:	4b1e      	ldr	r3, [pc, #120]	; (80099a4 <tcp_slowtmr+0x5a4>)
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <tcp_slowtmr+0x550>
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009940:	6912      	ldr	r2, [r2, #16]
 8009942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800994e:	e002      	b.n	8009956 <tcp_slowtmr+0x556>
 8009950:	2300      	movs	r3, #0
 8009952:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009956:	4b13      	ldr	r3, [pc, #76]	; (80099a4 <tcp_slowtmr+0x5a4>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d000      	beq.n	8009960 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800995e:	e560      	b.n	8009422 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009960:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996a:	f003 fb7f 	bl	800d06c <tcp_output>
  while (pcb != NULL) {
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	2b00      	cmp	r3, #0
 8009972:	f47f ad5c 	bne.w	800942e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <tcp_slowtmr+0x5a8>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009980:	e067      	b.n	8009a52 <tcp_slowtmr+0x652>
 8009982:	bf00      	nop
 8009984:	2000c418 	.word	0x2000c418
 8009988:	10624dd3 	.word	0x10624dd3
 800998c:	000124f8 	.word	0x000124f8
 8009990:	2000c424 	.word	0x2000c424
 8009994:	08018008 	.word	0x08018008
 8009998:	08018440 	.word	0x08018440
 800999c:	0801804c 	.word	0x0801804c
 80099a0:	0801846c 	.word	0x0801846c
 80099a4:	2000c42c 	.word	0x2000c42c
 80099a8:	2000c428 	.word	0x2000c428
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	7d1b      	ldrb	r3, [r3, #20]
 80099b0:	2b0a      	cmp	r3, #10
 80099b2:	d006      	beq.n	80099c2 <tcp_slowtmr+0x5c2>
 80099b4:	4b2b      	ldr	r3, [pc, #172]	; (8009a64 <tcp_slowtmr+0x664>)
 80099b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80099ba:	492b      	ldr	r1, [pc, #172]	; (8009a68 <tcp_slowtmr+0x668>)
 80099bc:	482b      	ldr	r0, [pc, #172]	; (8009a6c <tcp_slowtmr+0x66c>)
 80099be:	f00a fa5b 	bl	8013e78 <iprintf>
    pcb_remove = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80099c8:	4b29      	ldr	r3, [pc, #164]	; (8009a70 <tcp_slowtmr+0x670>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2bf0      	cmp	r3, #240	; 0xf0
 80099d4:	d904      	bls.n	80099e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80099d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099da:	3301      	adds	r3, #1
 80099dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80099e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d02f      	beq.n	8009a48 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80099e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099ea:	f000 fb2b 	bl	800a044 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d010      	beq.n	8009a16 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80099f4:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <tcp_slowtmr+0x674>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d106      	bne.n	8009a0c <tcp_slowtmr+0x60c>
 80099fe:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <tcp_slowtmr+0x664>)
 8009a00:	f240 52af 	movw	r2, #1455	; 0x5af
 8009a04:	491c      	ldr	r1, [pc, #112]	; (8009a78 <tcp_slowtmr+0x678>)
 8009a06:	4819      	ldr	r0, [pc, #100]	; (8009a6c <tcp_slowtmr+0x66c>)
 8009a08:	f00a fa36 	bl	8013e78 <iprintf>
        prev->next = pcb->next;
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	60da      	str	r2, [r3, #12]
 8009a14:	e00f      	b.n	8009a36 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a16:	4b17      	ldr	r3, [pc, #92]	; (8009a74 <tcp_slowtmr+0x674>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d006      	beq.n	8009a2e <tcp_slowtmr+0x62e>
 8009a20:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <tcp_slowtmr+0x664>)
 8009a22:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009a26:	4915      	ldr	r1, [pc, #84]	; (8009a7c <tcp_slowtmr+0x67c>)
 8009a28:	4810      	ldr	r0, [pc, #64]	; (8009a6c <tcp_slowtmr+0x66c>)
 8009a2a:	f00a fa25 	bl	8013e78 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	4a10      	ldr	r2, [pc, #64]	; (8009a74 <tcp_slowtmr+0x674>)
 8009a34:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a40:	69f8      	ldr	r0, [r7, #28]
 8009a42:	f7ff f93f 	bl	8008cc4 <tcp_free>
 8009a46:	e004      	b.n	8009a52 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1a9      	bne.n	80099ac <tcp_slowtmr+0x5ac>
    }
  }
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	3730      	adds	r7, #48	; 0x30
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bdb0      	pop	{r4, r5, r7, pc}
 8009a62:	bf00      	nop
 8009a64:	08018008 	.word	0x08018008
 8009a68:	08018498 	.word	0x08018498
 8009a6c:	0801804c 	.word	0x0801804c
 8009a70:	2000c418 	.word	0x2000c418
 8009a74:	2000c428 	.word	0x2000c428
 8009a78:	080184c8 	.word	0x080184c8
 8009a7c:	080184f0 	.word	0x080184f0

08009a80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009a86:	4b2d      	ldr	r3, [pc, #180]	; (8009b3c <tcp_fasttmr+0xbc>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	4b2b      	ldr	r3, [pc, #172]	; (8009b3c <tcp_fasttmr+0xbc>)
 8009a90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009a92:	4b2b      	ldr	r3, [pc, #172]	; (8009b40 <tcp_fasttmr+0xc0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009a98:	e048      	b.n	8009b2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7f9a      	ldrb	r2, [r3, #30]
 8009a9e:	4b27      	ldr	r3, [pc, #156]	; (8009b3c <tcp_fasttmr+0xbc>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d03f      	beq.n	8009b26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009aa6:	4b25      	ldr	r3, [pc, #148]	; (8009b3c <tcp_fasttmr+0xbc>)
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	8b5b      	ldrh	r3, [r3, #26]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d010      	beq.n	8009adc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	8b5b      	ldrh	r3, [r3, #26]
 8009abe:	f043 0302 	orr.w	r3, r3, #2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f003 facf 	bl	800d06c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	8b5b      	ldrh	r3, [r3, #26]
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	8b5b      	ldrh	r3, [r3, #26]
 8009ae0:	f003 0308 	and.w	r3, r3, #8
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	8b5b      	ldrh	r3, [r3, #26]
 8009aec:	f023 0308 	bic.w	r3, r3, #8
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fa78 	bl	8008fec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <tcp_fasttmr+0xc4>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f819 	bl	8009b48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <tcp_fasttmr+0xc4>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d000      	beq.n	8009b20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009b1e:	e7b8      	b.n	8009a92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	e002      	b.n	8009b2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1b3      	bne.n	8009a9a <tcp_fasttmr+0x1a>
    }
  }
}
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	2000c42e 	.word	0x2000c42e
 8009b40:	2000c424 	.word	0x2000c424
 8009b44:	2000c42c 	.word	0x2000c42c

08009b48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <tcp_process_refused_data+0x22>
 8009b56:	4b37      	ldr	r3, [pc, #220]	; (8009c34 <tcp_process_refused_data+0xec>)
 8009b58:	f240 6209 	movw	r2, #1545	; 0x609
 8009b5c:	4936      	ldr	r1, [pc, #216]	; (8009c38 <tcp_process_refused_data+0xf0>)
 8009b5e:	4837      	ldr	r0, [pc, #220]	; (8009c3c <tcp_process_refused_data+0xf4>)
 8009b60:	f00a f98a 	bl	8013e78 <iprintf>
 8009b64:	f06f 030f 	mvn.w	r3, #15
 8009b68:	e060      	b.n	8009c2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b6e:	7b5b      	ldrb	r3, [r3, #13]
 8009b70:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b76:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <tcp_process_refused_data+0x58>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6918      	ldr	r0, [r3, #16]
 8009b92:	2300      	movs	r3, #0
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	47a0      	blx	r4
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
 8009b9e:	e007      	b.n	8009bb0 <tcp_process_refused_data+0x68>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f000 f8a4 	bl	8009cf4 <tcp_recv_null>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d12a      	bne.n	8009c0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	f003 0320 	and.w	r3, r3, #32
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d033      	beq.n	8009c2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009bca:	d005      	beq.n	8009bd8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <tcp_process_refused_data+0xb2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6918      	ldr	r0, [r3, #16]
 8009bec:	2300      	movs	r3, #0
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	47a0      	blx	r4
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]
 8009bf8:	e001      	b.n	8009bfe <tcp_process_refused_data+0xb6>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c02:	f113 0f0d 	cmn.w	r3, #13
 8009c06:	d110      	bne.n	8009c2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009c08:	f06f 030c 	mvn.w	r3, #12
 8009c0c:	e00e      	b.n	8009c2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c12:	f113 0f0d 	cmn.w	r3, #13
 8009c16:	d102      	bne.n	8009c1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009c18:	f06f 030c 	mvn.w	r3, #12
 8009c1c:	e006      	b.n	8009c2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009c24:	f06f 0304 	mvn.w	r3, #4
 8009c28:	e000      	b.n	8009c2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd90      	pop	{r4, r7, pc}
 8009c34:	08018008 	.word	0x08018008
 8009c38:	08018518 	.word	0x08018518
 8009c3c:	0801804c 	.word	0x0801804c

08009c40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009c48:	e007      	b.n	8009c5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f80a 	bl	8009c6a <tcp_seg_free>
    seg = next;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1f4      	bne.n	8009c4a <tcp_segs_free+0xa>
  }
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00c      	beq.n	8009c92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fd61 	bl	800874c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	2003      	movs	r0, #3
 8009c8e:	f7fd fead 	bl	80079ec <memp_free>
  }
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <tcp_seg_copy+0x1c>
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <tcp_seg_copy+0x4c>)
 8009cac:	f240 6282 	movw	r2, #1666	; 0x682
 8009cb0:	490e      	ldr	r1, [pc, #56]	; (8009cec <tcp_seg_copy+0x50>)
 8009cb2:	480f      	ldr	r0, [pc, #60]	; (8009cf0 <tcp_seg_copy+0x54>)
 8009cb4:	f00a f8e0 	bl	8013e78 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009cb8:	2003      	movs	r0, #3
 8009cba:	f7fd fe21 	bl	8007900 <memp_malloc>
 8009cbe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <tcp_seg_copy+0x2e>
    return NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e00a      	b.n	8009ce0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009cca:	2210      	movs	r2, #16
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f00a f9bd 	bl	801404e <memcpy>
  pbuf_ref(cseg->p);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fddd 	bl	8008898 <pbuf_ref>
  return cseg;
 8009cde:	68fb      	ldr	r3, [r7, #12]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	08018008 	.word	0x08018008
 8009cec:	0801855c 	.word	0x0801855c
 8009cf0:	0801804c 	.word	0x0801804c

08009cf4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <tcp_recv_null+0x28>
 8009d08:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <tcp_recv_null+0x60>)
 8009d0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009d0e:	4912      	ldr	r1, [pc, #72]	; (8009d58 <tcp_recv_null+0x64>)
 8009d10:	4812      	ldr	r0, [pc, #72]	; (8009d5c <tcp_recv_null+0x68>)
 8009d12:	f00a f8b1 	bl	8013e78 <iprintf>
 8009d16:	f06f 030f 	mvn.w	r3, #15
 8009d1a:	e016      	b.n	8009d4a <tcp_recv_null+0x56>

  if (p != NULL) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	891b      	ldrh	r3, [r3, #8]
 8009d26:	4619      	mov	r1, r3
 8009d28:	68b8      	ldr	r0, [r7, #8]
 8009d2a:	f7ff fb19 	bl	8009360 <tcp_recved>
    pbuf_free(p);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7fe fd0c 	bl	800874c <pbuf_free>
 8009d34:	e008      	b.n	8009d48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d104      	bne.n	8009d48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009d3e:	68b8      	ldr	r0, [r7, #8]
 8009d40:	f7ff f9be 	bl	80090c0 <tcp_close>
 8009d44:	4603      	mov	r3, r0
 8009d46:	e000      	b.n	8009d4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	08018008 	.word	0x08018008
 8009d58:	08018578 	.word	0x08018578
 8009d5c:	0801804c 	.word	0x0801804c

08009d60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	db01      	blt.n	8009d76 <tcp_kill_prio+0x16>
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	e000      	b.n	8009d78 <tcp_kill_prio+0x18>
 8009d76:	237f      	movs	r3, #127	; 0x7f
 8009d78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d034      	beq.n	8009dea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d8e:	4b19      	ldr	r3, [pc, #100]	; (8009df4 <tcp_kill_prio+0x94>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	e01f      	b.n	8009dd6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	7d5b      	ldrb	r3, [r3, #21]
 8009d9a:	7afa      	ldrb	r2, [r7, #11]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d80c      	bhi.n	8009dba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009da4:	7afa      	ldrb	r2, [r7, #11]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d112      	bne.n	8009dd0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009daa:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <tcp_kill_prio+0x98>)
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d80a      	bhi.n	8009dd0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009dba:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <tcp_kill_prio+0x98>)
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	7d5b      	ldrb	r3, [r3, #21]
 8009dce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1dc      	bne.n	8009d96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009de2:	6938      	ldr	r0, [r7, #16]
 8009de4:	f7ff fa56 	bl	8009294 <tcp_abort>
 8009de8:	e000      	b.n	8009dec <tcp_kill_prio+0x8c>
    return;
 8009dea:	bf00      	nop
  }
}
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000c424 	.word	0x2000c424
 8009df8:	2000c418 	.word	0x2000c418

08009dfc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	d009      	beq.n	8009e20 <tcp_kill_state+0x24>
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	2b09      	cmp	r3, #9
 8009e10:	d006      	beq.n	8009e20 <tcp_kill_state+0x24>
 8009e12:	4b1a      	ldr	r3, [pc, #104]	; (8009e7c <tcp_kill_state+0x80>)
 8009e14:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009e18:	4919      	ldr	r1, [pc, #100]	; (8009e80 <tcp_kill_state+0x84>)
 8009e1a:	481a      	ldr	r0, [pc, #104]	; (8009e84 <tcp_kill_state+0x88>)
 8009e1c:	f00a f82c 	bl	8013e78 <iprintf>

  inactivity = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e28:	4b17      	ldr	r3, [pc, #92]	; (8009e88 <tcp_kill_state+0x8c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	e017      	b.n	8009e60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	7d1b      	ldrb	r3, [r3, #20]
 8009e34:	79fa      	ldrb	r2, [r7, #7]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d10f      	bne.n	8009e5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <tcp_kill_state+0x90>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d807      	bhi.n	8009e5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009e4a:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <tcp_kill_state+0x90>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e4      	bne.n	8009e30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6938      	ldr	r0, [r7, #16]
 8009e70:	f7ff f952 	bl	8009118 <tcp_abandon>
  }
}
 8009e74:	bf00      	nop
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	08018008 	.word	0x08018008
 8009e80:	08018594 	.word	0x08018594
 8009e84:	0801804c 	.word	0x0801804c
 8009e88:	2000c424 	.word	0x2000c424
 8009e8c:	2000c418 	.word	0x2000c418

08009e90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e9e:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <tcp_kill_timewait+0x58>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e012      	b.n	8009ecc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ea6:	4b11      	ldr	r3, [pc, #68]	; (8009eec <tcp_kill_timewait+0x5c>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d807      	bhi.n	8009ec6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <tcp_kill_timewait+0x5c>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e9      	bne.n	8009ea6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009ed8:	68b8      	ldr	r0, [r7, #8]
 8009eda:	f7ff f9db 	bl	8009294 <tcp_abort>
  }
}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	2000c428 	.word	0x2000c428
 8009eec:	2000c418 	.word	0x2000c418

08009ef0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009ef6:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <tcp_handle_closepend+0x48>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009efc:	e014      	b.n	8009f28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8b5b      	ldrh	r3, [r3, #26]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d009      	beq.n	8009f24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8b5b      	ldrh	r3, [r3, #26]
 8009f14:	f023 0308 	bic.w	r3, r3, #8
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff f864 	bl	8008fec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e7      	bne.n	8009efe <tcp_handle_closepend+0xe>
  }
}
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	2000c424 	.word	0x2000c424

08009f3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f46:	2001      	movs	r0, #1
 8009f48:	f7fd fcda 	bl	8007900 <memp_malloc>
 8009f4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d126      	bne.n	8009fa2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009f54:	f7ff ffcc 	bl	8009ef0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009f58:	f7ff ff9a 	bl	8009e90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	f7fd fccf 	bl	8007900 <memp_malloc>
 8009f62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d11b      	bne.n	8009fa2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009f6a:	2009      	movs	r0, #9
 8009f6c:	f7ff ff46 	bl	8009dfc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f70:	2001      	movs	r0, #1
 8009f72:	f7fd fcc5 	bl	8007900 <memp_malloc>
 8009f76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d111      	bne.n	8009fa2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009f7e:	2008      	movs	r0, #8
 8009f80:	f7ff ff3c 	bl	8009dfc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f84:	2001      	movs	r0, #1
 8009f86:	f7fd fcbb 	bl	8007900 <memp_malloc>
 8009f8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d107      	bne.n	8009fa2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff fee3 	bl	8009d60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	f7fd fcb0 	bl	8007900 <memp_malloc>
 8009fa0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d03f      	beq.n	800a028 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009fa8:	229c      	movs	r2, #156	; 0x9c
 8009faa:	2100      	movs	r1, #0
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f009 ffc8 	bl	8013f42 <memset>
    pcb->prio = prio;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	79fa      	ldrb	r2, [r7, #7]
 8009fb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009fbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009fde:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2206      	movs	r2, #6
 8009fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2206      	movs	r2, #6
 8009fec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ff4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <tcp_alloc+0xf8>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <tcp_alloc+0xfc>)
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a014:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4a08      	ldr	r2, [pc, #32]	; (800a03c <tcp_alloc+0x100>)
 800a01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a07      	ldr	r2, [pc, #28]	; (800a040 <tcp_alloc+0x104>)
 800a024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a028:	68fb      	ldr	r3, [r7, #12]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	2000c418 	.word	0x2000c418
 800a038:	2000c42e 	.word	0x2000c42e
 800a03c:	08009cf5 	.word	0x08009cf5
 800a040:	006ddd00 	.word	0x006ddd00

0800a044 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d107      	bne.n	800a062 <tcp_pcb_purge+0x1e>
 800a052:	4b21      	ldr	r3, [pc, #132]	; (800a0d8 <tcp_pcb_purge+0x94>)
 800a054:	f640 0251 	movw	r2, #2129	; 0x851
 800a058:	4920      	ldr	r1, [pc, #128]	; (800a0dc <tcp_pcb_purge+0x98>)
 800a05a:	4821      	ldr	r0, [pc, #132]	; (800a0e0 <tcp_pcb_purge+0x9c>)
 800a05c:	f009 ff0c 	bl	8013e78 <iprintf>
 800a060:	e037      	b.n	800a0d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	7d1b      	ldrb	r3, [r3, #20]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d033      	beq.n	800a0d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a06e:	2b0a      	cmp	r3, #10
 800a070:	d02f      	beq.n	800a0d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a076:	2b01      	cmp	r3, #1
 800a078:	d02b      	beq.n	800a0d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d007      	beq.n	800a092 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fb60 	bl	800874c <pbuf_free>
      pcb->refused_data = NULL;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f986 	bl	800a3ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fdc7 	bl	8009c40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fdc2 	bl	8009c40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	08018008 	.word	0x08018008
 800a0dc:	08018654 	.word	0x08018654
 800a0e0:	0801804c 	.word	0x0801804c

0800a0e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <tcp_pcb_remove+0x1e>
 800a0f4:	4b3e      	ldr	r3, [pc, #248]	; (800a1f0 <tcp_pcb_remove+0x10c>)
 800a0f6:	f640 0283 	movw	r2, #2179	; 0x883
 800a0fa:	493e      	ldr	r1, [pc, #248]	; (800a1f4 <tcp_pcb_remove+0x110>)
 800a0fc:	483e      	ldr	r0, [pc, #248]	; (800a1f8 <tcp_pcb_remove+0x114>)
 800a0fe:	f009 febb 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d106      	bne.n	800a116 <tcp_pcb_remove+0x32>
 800a108:	4b39      	ldr	r3, [pc, #228]	; (800a1f0 <tcp_pcb_remove+0x10c>)
 800a10a:	f640 0284 	movw	r2, #2180	; 0x884
 800a10e:	493b      	ldr	r1, [pc, #236]	; (800a1fc <tcp_pcb_remove+0x118>)
 800a110:	4839      	ldr	r0, [pc, #228]	; (800a1f8 <tcp_pcb_remove+0x114>)
 800a112:	f009 feb1 	bl	8013e78 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d105      	bne.n	800a12c <tcp_pcb_remove+0x48>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e013      	b.n	800a154 <tcp_pcb_remove+0x70>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	e00c      	b.n	800a14e <tcp_pcb_remove+0x6a>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d104      	bne.n	800a148 <tcp_pcb_remove+0x64>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	60da      	str	r2, [r3, #12]
 800a146:	e005      	b.n	800a154 <tcp_pcb_remove+0x70>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1ef      	bne.n	800a134 <tcp_pcb_remove+0x50>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	2200      	movs	r2, #0
 800a158:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a15a:	6838      	ldr	r0, [r7, #0]
 800a15c:	f7ff ff72 	bl	800a044 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	7d1b      	ldrb	r3, [r3, #20]
 800a164:	2b0a      	cmp	r3, #10
 800a166:	d013      	beq.n	800a190 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d00f      	beq.n	800a190 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	8b5b      	ldrh	r3, [r3, #26]
 800a174:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	8b5b      	ldrh	r3, [r3, #26]
 800a180:	f043 0302 	orr.w	r3, r3, #2
 800a184:	b29a      	uxth	r2, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a18a:	6838      	ldr	r0, [r7, #0]
 800a18c:	f002 ff6e 	bl	800d06c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	7d1b      	ldrb	r3, [r3, #20]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d020      	beq.n	800a1da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d006      	beq.n	800a1ae <tcp_pcb_remove+0xca>
 800a1a0:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <tcp_pcb_remove+0x10c>)
 800a1a2:	f640 0293 	movw	r2, #2195	; 0x893
 800a1a6:	4916      	ldr	r1, [pc, #88]	; (800a200 <tcp_pcb_remove+0x11c>)
 800a1a8:	4813      	ldr	r0, [pc, #76]	; (800a1f8 <tcp_pcb_remove+0x114>)
 800a1aa:	f009 fe65 	bl	8013e78 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d006      	beq.n	800a1c4 <tcp_pcb_remove+0xe0>
 800a1b6:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <tcp_pcb_remove+0x10c>)
 800a1b8:	f640 0294 	movw	r2, #2196	; 0x894
 800a1bc:	4911      	ldr	r1, [pc, #68]	; (800a204 <tcp_pcb_remove+0x120>)
 800a1be:	480e      	ldr	r0, [pc, #56]	; (800a1f8 <tcp_pcb_remove+0x114>)
 800a1c0:	f009 fe5a 	bl	8013e78 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d006      	beq.n	800a1da <tcp_pcb_remove+0xf6>
 800a1cc:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <tcp_pcb_remove+0x10c>)
 800a1ce:	f640 0296 	movw	r2, #2198	; 0x896
 800a1d2:	490d      	ldr	r1, [pc, #52]	; (800a208 <tcp_pcb_remove+0x124>)
 800a1d4:	4808      	ldr	r0, [pc, #32]	; (800a1f8 <tcp_pcb_remove+0x114>)
 800a1d6:	f009 fe4f 	bl	8013e78 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08018008 	.word	0x08018008
 800a1f4:	08018670 	.word	0x08018670
 800a1f8:	0801804c 	.word	0x0801804c
 800a1fc:	0801868c 	.word	0x0801868c
 800a200:	080186ac 	.word	0x080186ac
 800a204:	080186c4 	.word	0x080186c4
 800a208:	080186e0 	.word	0x080186e0

0800a20c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d106      	bne.n	800a228 <tcp_next_iss+0x1c>
 800a21a:	4b0a      	ldr	r3, [pc, #40]	; (800a244 <tcp_next_iss+0x38>)
 800a21c:	f640 02af 	movw	r2, #2223	; 0x8af
 800a220:	4909      	ldr	r1, [pc, #36]	; (800a248 <tcp_next_iss+0x3c>)
 800a222:	480a      	ldr	r0, [pc, #40]	; (800a24c <tcp_next_iss+0x40>)
 800a224:	f009 fe28 	bl	8013e78 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a228:	4b09      	ldr	r3, [pc, #36]	; (800a250 <tcp_next_iss+0x44>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	4b09      	ldr	r3, [pc, #36]	; (800a254 <tcp_next_iss+0x48>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4413      	add	r3, r2
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <tcp_next_iss+0x44>)
 800a234:	6013      	str	r3, [r2, #0]
  return iss;
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <tcp_next_iss+0x44>)
 800a238:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	08018008 	.word	0x08018008
 800a248:	080186f8 	.word	0x080186f8
 800a24c:	0801804c 	.word	0x0801804c
 800a250:	20000028 	.word	0x20000028
 800a254:	2000c418 	.word	0x2000c418

0800a258 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <tcp_eff_send_mss_netif+0x22>
 800a26c:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <tcp_eff_send_mss_netif+0x68>)
 800a26e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a272:	4914      	ldr	r1, [pc, #80]	; (800a2c4 <tcp_eff_send_mss_netif+0x6c>)
 800a274:	4814      	ldr	r0, [pc, #80]	; (800a2c8 <tcp_eff_send_mss_netif+0x70>)
 800a276:	f009 fdff 	bl	8013e78 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a280:	89fb      	ldrh	r3, [r7, #14]
 800a282:	e019      	b.n	800a2b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a288:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a28a:	8afb      	ldrh	r3, [r7, #22]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d012      	beq.n	800a2b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a290:	2328      	movs	r3, #40	; 0x28
 800a292:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a294:	8afa      	ldrh	r2, [r7, #22]
 800a296:	8abb      	ldrh	r3, [r7, #20]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d904      	bls.n	800a2a6 <tcp_eff_send_mss_netif+0x4e>
 800a29c:	8afa      	ldrh	r2, [r7, #22]
 800a29e:	8abb      	ldrh	r3, [r7, #20]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	e000      	b.n	800a2a8 <tcp_eff_send_mss_netif+0x50>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a2aa:	8a7a      	ldrh	r2, [r7, #18]
 800a2ac:	89fb      	ldrh	r3, [r7, #14]
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	bf28      	it	cs
 800a2b2:	4613      	movcs	r3, r2
 800a2b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a2b6:	89fb      	ldrh	r3, [r7, #14]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	08018008 	.word	0x08018008
 800a2c4:	08018714 	.word	0x08018714
 800a2c8:	0801804c 	.word	0x0801804c

0800a2cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d119      	bne.n	800a314 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a2e0:	4b10      	ldr	r3, [pc, #64]	; (800a324 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a2e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a2e6:	4910      	ldr	r1, [pc, #64]	; (800a328 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a2e8:	4810      	ldr	r0, [pc, #64]	; (800a32c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a2ea:	f009 fdc5 	bl	8013e78 <iprintf>

  while (pcb != NULL) {
 800a2ee:	e011      	b.n	800a314 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d108      	bne.n	800a30e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7fe ffc6 	bl	8009294 <tcp_abort>
      pcb = next;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	e002      	b.n	800a314 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1ea      	bne.n	800a2f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a31a:	bf00      	nop
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	08018008 	.word	0x08018008
 800a328:	0801873c 	.word	0x0801873c
 800a32c:	0801804c 	.word	0x0801804c

0800a330 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d02a      	beq.n	800a396 <tcp_netif_ip_addr_changed+0x66>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d026      	beq.n	800a396 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a348:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <tcp_netif_ip_addr_changed+0x70>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff ffbc 	bl	800a2cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a354:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <tcp_netif_ip_addr_changed+0x74>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff ffb6 	bl	800a2cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d017      	beq.n	800a396 <tcp_netif_ip_addr_changed+0x66>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d013      	beq.n	800a396 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a36e:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <tcp_netif_ip_addr_changed+0x78>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	e00c      	b.n	800a390 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d103      	bne.n	800a38a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1ef      	bne.n	800a376 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	2000c424 	.word	0x2000c424
 800a3a4:	2000c41c 	.word	0x2000c41c
 800a3a8:	2000c420 	.word	0x2000c420

0800a3ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d007      	beq.n	800a3cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff fc3d 	bl	8009c40 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a3d4:	b590      	push	{r4, r7, lr}
 800a3d6:	b08d      	sub	sp, #52	; 0x34
 800a3d8:	af04      	add	r7, sp, #16
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d105      	bne.n	800a3f0 <tcp_input+0x1c>
 800a3e4:	4b9b      	ldr	r3, [pc, #620]	; (800a654 <tcp_input+0x280>)
 800a3e6:	2283      	movs	r2, #131	; 0x83
 800a3e8:	499b      	ldr	r1, [pc, #620]	; (800a658 <tcp_input+0x284>)
 800a3ea:	489c      	ldr	r0, [pc, #624]	; (800a65c <tcp_input+0x288>)
 800a3ec:	f009 fd44 	bl	8013e78 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4a9a      	ldr	r2, [pc, #616]	; (800a660 <tcp_input+0x28c>)
 800a3f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	895b      	ldrh	r3, [r3, #10]
 800a3fc:	2b13      	cmp	r3, #19
 800a3fe:	f240 83d1 	bls.w	800aba4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a402:	4b98      	ldr	r3, [pc, #608]	; (800a664 <tcp_input+0x290>)
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	4a97      	ldr	r2, [pc, #604]	; (800a664 <tcp_input+0x290>)
 800a408:	6812      	ldr	r2, [r2, #0]
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f007 fdfd 	bl	801200c <ip4_addr_isbroadcast_u32>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 83c7 	bne.w	800aba8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a41a:	4b92      	ldr	r3, [pc, #584]	; (800a664 <tcp_input+0x290>)
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a422:	2be0      	cmp	r3, #224	; 0xe0
 800a424:	f000 83c0 	beq.w	800aba8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a428:	4b8d      	ldr	r3, [pc, #564]	; (800a660 <tcp_input+0x28c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	899b      	ldrh	r3, [r3, #12]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	4618      	mov	r0, r3
 800a432:	f7fc fd8d 	bl	8006f50 <lwip_htons>
 800a436:	4603      	mov	r3, r0
 800a438:	0b1b      	lsrs	r3, r3, #12
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a442:	7cbb      	ldrb	r3, [r7, #18]
 800a444:	2b13      	cmp	r3, #19
 800a446:	f240 83b1 	bls.w	800abac <tcp_input+0x7d8>
 800a44a:	7cbb      	ldrb	r3, [r7, #18]
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	891b      	ldrh	r3, [r3, #8]
 800a452:	429a      	cmp	r2, r3
 800a454:	f200 83aa 	bhi.w	800abac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a458:	7cbb      	ldrb	r3, [r7, #18]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	3b14      	subs	r3, #20
 800a45e:	b29a      	uxth	r2, r3
 800a460:	4b81      	ldr	r3, [pc, #516]	; (800a668 <tcp_input+0x294>)
 800a462:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a464:	4b81      	ldr	r3, [pc, #516]	; (800a66c <tcp_input+0x298>)
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	895a      	ldrh	r2, [r3, #10]
 800a46e:	7cbb      	ldrb	r3, [r7, #18]
 800a470:	b29b      	uxth	r3, r3
 800a472:	429a      	cmp	r2, r3
 800a474:	d309      	bcc.n	800a48a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a476:	4b7c      	ldr	r3, [pc, #496]	; (800a668 <tcp_input+0x294>)
 800a478:	881a      	ldrh	r2, [r3, #0]
 800a47a:	4b7d      	ldr	r3, [pc, #500]	; (800a670 <tcp_input+0x29c>)
 800a47c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a47e:	7cbb      	ldrb	r3, [r7, #18]
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fe f8dc 	bl	8008640 <pbuf_remove_header>
 800a488:	e04e      	b.n	800a528 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <tcp_input+0xca>
 800a492:	4b70      	ldr	r3, [pc, #448]	; (800a654 <tcp_input+0x280>)
 800a494:	22c2      	movs	r2, #194	; 0xc2
 800a496:	4977      	ldr	r1, [pc, #476]	; (800a674 <tcp_input+0x2a0>)
 800a498:	4870      	ldr	r0, [pc, #448]	; (800a65c <tcp_input+0x288>)
 800a49a:	f009 fced 	bl	8013e78 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a49e:	2114      	movs	r1, #20
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7fe f8cd 	bl	8008640 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	895a      	ldrh	r2, [r3, #10]
 800a4aa:	4b71      	ldr	r3, [pc, #452]	; (800a670 <tcp_input+0x29c>)
 800a4ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a4ae:	4b6e      	ldr	r3, [pc, #440]	; (800a668 <tcp_input+0x294>)
 800a4b0:	881a      	ldrh	r2, [r3, #0]
 800a4b2:	4b6f      	ldr	r3, [pc, #444]	; (800a670 <tcp_input+0x29c>)
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a4ba:	4b6d      	ldr	r3, [pc, #436]	; (800a670 <tcp_input+0x29c>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7fe f8bd 	bl	8008640 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	895b      	ldrh	r3, [r3, #10]
 800a4cc:	8a3a      	ldrh	r2, [r7, #16]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	f200 836e 	bhi.w	800abb0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	4a64      	ldr	r2, [pc, #400]	; (800a66c <tcp_input+0x298>)
 800a4dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	8a3a      	ldrh	r2, [r7, #16]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe f8aa 	bl	8008640 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	891a      	ldrh	r2, [r3, #8]
 800a4f0:	8a3b      	ldrh	r3, [r7, #16]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	895b      	ldrh	r3, [r3, #10]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <tcp_input+0x13a>
 800a502:	4b54      	ldr	r3, [pc, #336]	; (800a654 <tcp_input+0x280>)
 800a504:	22df      	movs	r2, #223	; 0xdf
 800a506:	495c      	ldr	r1, [pc, #368]	; (800a678 <tcp_input+0x2a4>)
 800a508:	4854      	ldr	r0, [pc, #336]	; (800a65c <tcp_input+0x288>)
 800a50a:	f009 fcb5 	bl	8013e78 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	891a      	ldrh	r2, [r3, #8]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	891b      	ldrh	r3, [r3, #8]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d005      	beq.n	800a528 <tcp_input+0x154>
 800a51c:	4b4d      	ldr	r3, [pc, #308]	; (800a654 <tcp_input+0x280>)
 800a51e:	22e0      	movs	r2, #224	; 0xe0
 800a520:	4956      	ldr	r1, [pc, #344]	; (800a67c <tcp_input+0x2a8>)
 800a522:	484e      	ldr	r0, [pc, #312]	; (800a65c <tcp_input+0x288>)
 800a524:	f009 fca8 	bl	8013e78 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a528:	4b4d      	ldr	r3, [pc, #308]	; (800a660 <tcp_input+0x28c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	4a4b      	ldr	r2, [pc, #300]	; (800a660 <tcp_input+0x28c>)
 800a532:	6814      	ldr	r4, [r2, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f7fc fd0b 	bl	8006f50 <lwip_htons>
 800a53a:	4603      	mov	r3, r0
 800a53c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a53e:	4b48      	ldr	r3, [pc, #288]	; (800a660 <tcp_input+0x28c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	885b      	ldrh	r3, [r3, #2]
 800a544:	b29b      	uxth	r3, r3
 800a546:	4a46      	ldr	r2, [pc, #280]	; (800a660 <tcp_input+0x28c>)
 800a548:	6814      	ldr	r4, [r2, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fc fd00 	bl	8006f50 <lwip_htons>
 800a550:	4603      	mov	r3, r0
 800a552:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a554:	4b42      	ldr	r3, [pc, #264]	; (800a660 <tcp_input+0x28c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4a41      	ldr	r2, [pc, #260]	; (800a660 <tcp_input+0x28c>)
 800a55c:	6814      	ldr	r4, [r2, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fc fd0b 	bl	8006f7a <lwip_htonl>
 800a564:	4603      	mov	r3, r0
 800a566:	6063      	str	r3, [r4, #4]
 800a568:	6863      	ldr	r3, [r4, #4]
 800a56a:	4a45      	ldr	r2, [pc, #276]	; (800a680 <tcp_input+0x2ac>)
 800a56c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a56e:	4b3c      	ldr	r3, [pc, #240]	; (800a660 <tcp_input+0x28c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4a3a      	ldr	r2, [pc, #232]	; (800a660 <tcp_input+0x28c>)
 800a576:	6814      	ldr	r4, [r2, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fc fcfe 	bl	8006f7a <lwip_htonl>
 800a57e:	4603      	mov	r3, r0
 800a580:	60a3      	str	r3, [r4, #8]
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	4a3f      	ldr	r2, [pc, #252]	; (800a684 <tcp_input+0x2b0>)
 800a586:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a588:	4b35      	ldr	r3, [pc, #212]	; (800a660 <tcp_input+0x28c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	89db      	ldrh	r3, [r3, #14]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	4a33      	ldr	r2, [pc, #204]	; (800a660 <tcp_input+0x28c>)
 800a592:	6814      	ldr	r4, [r2, #0]
 800a594:	4618      	mov	r0, r3
 800a596:	f7fc fcdb 	bl	8006f50 <lwip_htons>
 800a59a:	4603      	mov	r3, r0
 800a59c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a59e:	4b30      	ldr	r3, [pc, #192]	; (800a660 <tcp_input+0x28c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	899b      	ldrh	r3, [r3, #12]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fc fcd2 	bl	8006f50 <lwip_htons>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	4b34      	ldr	r3, [pc, #208]	; (800a688 <tcp_input+0x2b4>)
 800a5b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	891a      	ldrh	r2, [r3, #8]
 800a5be:	4b33      	ldr	r3, [pc, #204]	; (800a68c <tcp_input+0x2b8>)
 800a5c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a5c2:	4b31      	ldr	r3, [pc, #196]	; (800a688 <tcp_input+0x2b4>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00c      	beq.n	800a5e8 <tcp_input+0x214>
    tcplen++;
 800a5ce:	4b2f      	ldr	r3, [pc, #188]	; (800a68c <tcp_input+0x2b8>)
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	4b2d      	ldr	r3, [pc, #180]	; (800a68c <tcp_input+0x2b8>)
 800a5d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	891a      	ldrh	r2, [r3, #8]
 800a5de:	4b2b      	ldr	r3, [pc, #172]	; (800a68c <tcp_input+0x2b8>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	f200 82e6 	bhi.w	800abb4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ec:	4b28      	ldr	r3, [pc, #160]	; (800a690 <tcp_input+0x2bc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	e09d      	b.n	800a730 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	7d1b      	ldrb	r3, [r3, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d105      	bne.n	800a608 <tcp_input+0x234>
 800a5fc:	4b15      	ldr	r3, [pc, #84]	; (800a654 <tcp_input+0x280>)
 800a5fe:	22fb      	movs	r2, #251	; 0xfb
 800a600:	4924      	ldr	r1, [pc, #144]	; (800a694 <tcp_input+0x2c0>)
 800a602:	4816      	ldr	r0, [pc, #88]	; (800a65c <tcp_input+0x288>)
 800a604:	f009 fc38 	bl	8013e78 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	7d1b      	ldrb	r3, [r3, #20]
 800a60c:	2b0a      	cmp	r3, #10
 800a60e:	d105      	bne.n	800a61c <tcp_input+0x248>
 800a610:	4b10      	ldr	r3, [pc, #64]	; (800a654 <tcp_input+0x280>)
 800a612:	22fc      	movs	r2, #252	; 0xfc
 800a614:	4920      	ldr	r1, [pc, #128]	; (800a698 <tcp_input+0x2c4>)
 800a616:	4811      	ldr	r0, [pc, #68]	; (800a65c <tcp_input+0x288>)
 800a618:	f009 fc2e 	bl	8013e78 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	7d1b      	ldrb	r3, [r3, #20]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d105      	bne.n	800a630 <tcp_input+0x25c>
 800a624:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <tcp_input+0x280>)
 800a626:	22fd      	movs	r2, #253	; 0xfd
 800a628:	491c      	ldr	r1, [pc, #112]	; (800a69c <tcp_input+0x2c8>)
 800a62a:	480c      	ldr	r0, [pc, #48]	; (800a65c <tcp_input+0x288>)
 800a62c:	f009 fc24 	bl	8013e78 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	7a1b      	ldrb	r3, [r3, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d033      	beq.n	800a6a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	7a1a      	ldrb	r2, [r3, #8]
 800a63c:	4b09      	ldr	r3, [pc, #36]	; (800a664 <tcp_input+0x290>)
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a644:	3301      	adds	r3, #1
 800a646:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a648:	429a      	cmp	r2, r3
 800a64a:	d029      	beq.n	800a6a0 <tcp_input+0x2cc>
      prev = pcb;
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	61bb      	str	r3, [r7, #24]
      continue;
 800a650:	e06b      	b.n	800a72a <tcp_input+0x356>
 800a652:	bf00      	nop
 800a654:	08018770 	.word	0x08018770
 800a658:	080187a4 	.word	0x080187a4
 800a65c:	080187bc 	.word	0x080187bc
 800a660:	2000c440 	.word	0x2000c440
 800a664:	20008ca4 	.word	0x20008ca4
 800a668:	2000c444 	.word	0x2000c444
 800a66c:	2000c448 	.word	0x2000c448
 800a670:	2000c446 	.word	0x2000c446
 800a674:	080187e4 	.word	0x080187e4
 800a678:	080187f4 	.word	0x080187f4
 800a67c:	08018800 	.word	0x08018800
 800a680:	2000c450 	.word	0x2000c450
 800a684:	2000c454 	.word	0x2000c454
 800a688:	2000c45c 	.word	0x2000c45c
 800a68c:	2000c45a 	.word	0x2000c45a
 800a690:	2000c424 	.word	0x2000c424
 800a694:	08018820 	.word	0x08018820
 800a698:	08018848 	.word	0x08018848
 800a69c:	08018874 	.word	0x08018874
    }

    if (pcb->remote_port == tcphdr->src &&
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	8b1a      	ldrh	r2, [r3, #24]
 800a6a4:	4b72      	ldr	r3, [pc, #456]	; (800a870 <tcp_input+0x49c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d13a      	bne.n	800a726 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	8ada      	ldrh	r2, [r3, #22]
 800a6b4:	4b6e      	ldr	r3, [pc, #440]	; (800a870 <tcp_input+0x49c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	885b      	ldrh	r3, [r3, #2]
 800a6ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d132      	bne.n	800a726 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	4b6b      	ldr	r3, [pc, #428]	; (800a874 <tcp_input+0x4a0>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d12c      	bne.n	800a726 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	4b68      	ldr	r3, [pc, #416]	; (800a874 <tcp_input+0x4a0>)
 800a6d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d126      	bne.n	800a726 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d106      	bne.n	800a6f0 <tcp_input+0x31c>
 800a6e2:	4b65      	ldr	r3, [pc, #404]	; (800a878 <tcp_input+0x4a4>)
 800a6e4:	f240 120d 	movw	r2, #269	; 0x10d
 800a6e8:	4964      	ldr	r1, [pc, #400]	; (800a87c <tcp_input+0x4a8>)
 800a6ea:	4865      	ldr	r0, [pc, #404]	; (800a880 <tcp_input+0x4ac>)
 800a6ec:	f009 fbc4 	bl	8013e78 <iprintf>
      if (prev != NULL) {
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <tcp_input+0x338>
        prev->next = pcb->next;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a6fe:	4b61      	ldr	r3, [pc, #388]	; (800a884 <tcp_input+0x4b0>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a706:	4a5f      	ldr	r2, [pc, #380]	; (800a884 <tcp_input+0x4b0>)
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	429a      	cmp	r2, r3
 800a714:	d111      	bne.n	800a73a <tcp_input+0x366>
 800a716:	4b58      	ldr	r3, [pc, #352]	; (800a878 <tcp_input+0x4a4>)
 800a718:	f240 1215 	movw	r2, #277	; 0x115
 800a71c:	495a      	ldr	r1, [pc, #360]	; (800a888 <tcp_input+0x4b4>)
 800a71e:	4858      	ldr	r0, [pc, #352]	; (800a880 <tcp_input+0x4ac>)
 800a720:	f009 fbaa 	bl	8013e78 <iprintf>
      break;
 800a724:	e009      	b.n	800a73a <tcp_input+0x366>
    }
    prev = pcb;
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	61fb      	str	r3, [r7, #28]
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f47f af5e 	bne.w	800a5f4 <tcp_input+0x220>
 800a738:	e000      	b.n	800a73c <tcp_input+0x368>
      break;
 800a73a:	bf00      	nop
  }

  if (pcb == NULL) {
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f040 80aa 	bne.w	800a898 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a744:	4b51      	ldr	r3, [pc, #324]	; (800a88c <tcp_input+0x4b8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	e03f      	b.n	800a7cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	7d1b      	ldrb	r3, [r3, #20]
 800a750:	2b0a      	cmp	r3, #10
 800a752:	d006      	beq.n	800a762 <tcp_input+0x38e>
 800a754:	4b48      	ldr	r3, [pc, #288]	; (800a878 <tcp_input+0x4a4>)
 800a756:	f240 121f 	movw	r2, #287	; 0x11f
 800a75a:	494d      	ldr	r1, [pc, #308]	; (800a890 <tcp_input+0x4bc>)
 800a75c:	4848      	ldr	r0, [pc, #288]	; (800a880 <tcp_input+0x4ac>)
 800a75e:	f009 fb8b 	bl	8013e78 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	7a1b      	ldrb	r3, [r3, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	7a1a      	ldrb	r2, [r3, #8]
 800a76e:	4b41      	ldr	r3, [pc, #260]	; (800a874 <tcp_input+0x4a0>)
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a776:	3301      	adds	r3, #1
 800a778:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d122      	bne.n	800a7c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	8b1a      	ldrh	r2, [r3, #24]
 800a782:	4b3b      	ldr	r3, [pc, #236]	; (800a870 <tcp_input+0x49c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d11b      	bne.n	800a7c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	8ada      	ldrh	r2, [r3, #22]
 800a792:	4b37      	ldr	r3, [pc, #220]	; (800a870 <tcp_input+0x49c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	885b      	ldrh	r3, [r3, #2]
 800a798:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d113      	bne.n	800a7c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	4b34      	ldr	r3, [pc, #208]	; (800a874 <tcp_input+0x4a0>)
 800a7a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d10d      	bne.n	800a7c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	4b31      	ldr	r3, [pc, #196]	; (800a874 <tcp_input+0x4a0>)
 800a7b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d107      	bne.n	800a7c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a7b6:	69f8      	ldr	r0, [r7, #28]
 800a7b8:	f000 fb56 	bl	800ae68 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7fd ffc5 	bl	800874c <pbuf_free>
        return;
 800a7c2:	e1fd      	b.n	800abc0 <tcp_input+0x7ec>
        continue;
 800a7c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	61fb      	str	r3, [r7, #28]
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1bc      	bne.n	800a74c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7d6:	4b2f      	ldr	r3, [pc, #188]	; (800a894 <tcp_input+0x4c0>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	e02a      	b.n	800a834 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	7a1b      	ldrb	r3, [r3, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00c      	beq.n	800a800 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	7a1a      	ldrb	r2, [r3, #8]
 800a7ea:	4b22      	ldr	r3, [pc, #136]	; (800a874 <tcp_input+0x4a0>)
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d002      	beq.n	800a800 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	61bb      	str	r3, [r7, #24]
        continue;
 800a7fe:	e016      	b.n	800a82e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	8ada      	ldrh	r2, [r3, #22]
 800a804:	4b1a      	ldr	r3, [pc, #104]	; (800a870 <tcp_input+0x49c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	885b      	ldrh	r3, [r3, #2]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d10c      	bne.n	800a82a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	4b17      	ldr	r3, [pc, #92]	; (800a874 <tcp_input+0x4a0>)
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d00f      	beq.n	800a83c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00d      	beq.n	800a83e <tcp_input+0x46a>
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d009      	beq.n	800a83e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1d1      	bne.n	800a7de <tcp_input+0x40a>
 800a83a:	e000      	b.n	800a83e <tcp_input+0x46a>
            break;
 800a83c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d029      	beq.n	800a898 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	68da      	ldr	r2, [r3, #12]
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a852:	4b10      	ldr	r3, [pc, #64]	; (800a894 <tcp_input+0x4c0>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a85a:	4a0e      	ldr	r2, [pc, #56]	; (800a894 <tcp_input+0x4c0>)
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a860:	6978      	ldr	r0, [r7, #20]
 800a862:	f000 fa03 	bl	800ac6c <tcp_listen_input>
      }
      pbuf_free(p);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7fd ff70 	bl	800874c <pbuf_free>
      return;
 800a86c:	e1a8      	b.n	800abc0 <tcp_input+0x7ec>
 800a86e:	bf00      	nop
 800a870:	2000c440 	.word	0x2000c440
 800a874:	20008ca4 	.word	0x20008ca4
 800a878:	08018770 	.word	0x08018770
 800a87c:	0801889c 	.word	0x0801889c
 800a880:	080187bc 	.word	0x080187bc
 800a884:	2000c424 	.word	0x2000c424
 800a888:	080188c8 	.word	0x080188c8
 800a88c:	2000c428 	.word	0x2000c428
 800a890:	080188f4 	.word	0x080188f4
 800a894:	2000c420 	.word	0x2000c420
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 8158 	beq.w	800ab50 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a8a0:	4b95      	ldr	r3, [pc, #596]	; (800aaf8 <tcp_input+0x724>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	891a      	ldrh	r2, [r3, #8]
 800a8aa:	4b93      	ldr	r3, [pc, #588]	; (800aaf8 <tcp_input+0x724>)
 800a8ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a8ae:	4a92      	ldr	r2, [pc, #584]	; (800aaf8 <tcp_input+0x724>)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a8b4:	4b91      	ldr	r3, [pc, #580]	; (800aafc <tcp_input+0x728>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a8f      	ldr	r2, [pc, #572]	; (800aaf8 <tcp_input+0x724>)
 800a8ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a8bc:	4b90      	ldr	r3, [pc, #576]	; (800ab00 <tcp_input+0x72c>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a8c2:	4b90      	ldr	r3, [pc, #576]	; (800ab04 <tcp_input+0x730>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a8c8:	4b8f      	ldr	r3, [pc, #572]	; (800ab08 <tcp_input+0x734>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a8ce:	4b8f      	ldr	r3, [pc, #572]	; (800ab0c <tcp_input+0x738>)
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0308 	and.w	r3, r3, #8
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d006      	beq.n	800a8e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	7b5b      	ldrb	r3, [r3, #13]
 800a8de:	f043 0301 	orr.w	r3, r3, #1
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d017      	beq.n	800a920 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a8f0:	69f8      	ldr	r0, [r7, #28]
 800a8f2:	f7ff f929 	bl	8009b48 <tcp_process_refused_data>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	f113 0f0d 	cmn.w	r3, #13
 800a8fc:	d007      	beq.n	800a90e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00c      	beq.n	800a920 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a906:	4b82      	ldr	r3, [pc, #520]	; (800ab10 <tcp_input+0x73c>)
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d008      	beq.n	800a920 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a912:	2b00      	cmp	r3, #0
 800a914:	f040 80e3 	bne.w	800aade <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a918:	69f8      	ldr	r0, [r7, #28]
 800a91a:	f003 f9ad 	bl	800dc78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a91e:	e0de      	b.n	800aade <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a920:	4a7c      	ldr	r2, [pc, #496]	; (800ab14 <tcp_input+0x740>)
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a926:	69f8      	ldr	r0, [r7, #28]
 800a928:	f000 fb18 	bl	800af5c <tcp_process>
 800a92c:	4603      	mov	r3, r0
 800a92e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a934:	f113 0f0d 	cmn.w	r3, #13
 800a938:	f000 80d3 	beq.w	800aae2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a93c:	4b71      	ldr	r3, [pc, #452]	; (800ab04 <tcp_input+0x730>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 0308 	and.w	r3, r3, #8
 800a944:	2b00      	cmp	r3, #0
 800a946:	d015      	beq.n	800a974 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d008      	beq.n	800a964 <tcp_input+0x590>
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	6912      	ldr	r2, [r2, #16]
 800a95c:	f06f 010d 	mvn.w	r1, #13
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a964:	69f9      	ldr	r1, [r7, #28]
 800a966:	486c      	ldr	r0, [pc, #432]	; (800ab18 <tcp_input+0x744>)
 800a968:	f7ff fbbc 	bl	800a0e4 <tcp_pcb_remove>
        tcp_free(pcb);
 800a96c:	69f8      	ldr	r0, [r7, #28]
 800a96e:	f7fe f9a9 	bl	8008cc4 <tcp_free>
 800a972:	e0da      	b.n	800ab2a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a978:	4b63      	ldr	r3, [pc, #396]	; (800ab08 <tcp_input+0x734>)
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01d      	beq.n	800a9bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a980:	4b61      	ldr	r3, [pc, #388]	; (800ab08 <tcp_input+0x734>)
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00a      	beq.n	800a9a6 <tcp_input+0x5d2>
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a996:	69fa      	ldr	r2, [r7, #28]
 800a998:	6910      	ldr	r0, [r2, #16]
 800a99a:	89fa      	ldrh	r2, [r7, #14]
 800a99c:	69f9      	ldr	r1, [r7, #28]
 800a99e:	4798      	blx	r3
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	74fb      	strb	r3, [r7, #19]
 800a9a4:	e001      	b.n	800a9aa <tcp_input+0x5d6>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a9aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a9ae:	f113 0f0d 	cmn.w	r3, #13
 800a9b2:	f000 8098 	beq.w	800aae6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a9b6:	4b54      	ldr	r3, [pc, #336]	; (800ab08 <tcp_input+0x734>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a9bc:	69f8      	ldr	r0, [r7, #28]
 800a9be:	f000 f915 	bl	800abec <tcp_input_delayed_close>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 8090 	bne.w	800aaea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a9ca:	4b4d      	ldr	r3, [pc, #308]	; (800ab00 <tcp_input+0x72c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d041      	beq.n	800aa56 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d006      	beq.n	800a9e8 <tcp_input+0x614>
 800a9da:	4b50      	ldr	r3, [pc, #320]	; (800ab1c <tcp_input+0x748>)
 800a9dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a9e0:	494f      	ldr	r1, [pc, #316]	; (800ab20 <tcp_input+0x74c>)
 800a9e2:	4850      	ldr	r0, [pc, #320]	; (800ab24 <tcp_input+0x750>)
 800a9e4:	f009 fa48 	bl	8013e78 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	8b5b      	ldrh	r3, [r3, #26]
 800a9ec:	f003 0310 	and.w	r3, r3, #16
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a9f4:	4b42      	ldr	r3, [pc, #264]	; (800ab00 <tcp_input+0x72c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fd fea7 	bl	800874c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a9fe:	69f8      	ldr	r0, [r7, #28]
 800aa00:	f7fe fc48 	bl	8009294 <tcp_abort>
            goto aborted;
 800aa04:	e091      	b.n	800ab2a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00c      	beq.n	800aa2a <tcp_input+0x656>
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	6918      	ldr	r0, [r3, #16]
 800aa1a:	4b39      	ldr	r3, [pc, #228]	; (800ab00 <tcp_input+0x72c>)
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	69f9      	ldr	r1, [r7, #28]
 800aa22:	47a0      	blx	r4
 800aa24:	4603      	mov	r3, r0
 800aa26:	74fb      	strb	r3, [r7, #19]
 800aa28:	e008      	b.n	800aa3c <tcp_input+0x668>
 800aa2a:	4b35      	ldr	r3, [pc, #212]	; (800ab00 <tcp_input+0x72c>)
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	69f9      	ldr	r1, [r7, #28]
 800aa32:	2000      	movs	r0, #0
 800aa34:	f7ff f95e 	bl	8009cf4 <tcp_recv_null>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800aa3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa40:	f113 0f0d 	cmn.w	r3, #13
 800aa44:	d053      	beq.n	800aaee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800aa46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800aa4e:	4b2c      	ldr	r3, [pc, #176]	; (800ab00 <tcp_input+0x72c>)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800aa56:	4b2b      	ldr	r3, [pc, #172]	; (800ab04 <tcp_input+0x730>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f003 0320 	and.w	r3, r3, #32
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d030      	beq.n	800aac4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa6e:	7b5a      	ldrb	r2, [r3, #13]
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa74:	f042 0220 	orr.w	r2, r2, #32
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	735a      	strb	r2, [r3, #13]
 800aa7c:	e022      	b.n	800aac4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa86:	d005      	beq.n	800aa94 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <tcp_input+0x6e2>
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	6918      	ldr	r0, [r3, #16]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	2200      	movs	r2, #0
 800aaac:	69f9      	ldr	r1, [r7, #28]
 800aaae:	47a0      	blx	r4
 800aab0:	4603      	mov	r3, r0
 800aab2:	74fb      	strb	r3, [r7, #19]
 800aab4:	e001      	b.n	800aaba <tcp_input+0x6e6>
 800aab6:	2300      	movs	r3, #0
 800aab8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aaba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aabe:	f113 0f0d 	cmn.w	r3, #13
 800aac2:	d016      	beq.n	800aaf2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800aac4:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <tcp_input+0x740>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800aaca:	69f8      	ldr	r0, [r7, #28]
 800aacc:	f000 f88e 	bl	800abec <tcp_input_delayed_close>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d128      	bne.n	800ab28 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800aad6:	69f8      	ldr	r0, [r7, #28]
 800aad8:	f002 fac8 	bl	800d06c <tcp_output>
 800aadc:	e025      	b.n	800ab2a <tcp_input+0x756>
        goto aborted;
 800aade:	bf00      	nop
 800aae0:	e023      	b.n	800ab2a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800aae2:	bf00      	nop
 800aae4:	e021      	b.n	800ab2a <tcp_input+0x756>
              goto aborted;
 800aae6:	bf00      	nop
 800aae8:	e01f      	b.n	800ab2a <tcp_input+0x756>
          goto aborted;
 800aaea:	bf00      	nop
 800aaec:	e01d      	b.n	800ab2a <tcp_input+0x756>
            goto aborted;
 800aaee:	bf00      	nop
 800aaf0:	e01b      	b.n	800ab2a <tcp_input+0x756>
              goto aborted;
 800aaf2:	bf00      	nop
 800aaf4:	e019      	b.n	800ab2a <tcp_input+0x756>
 800aaf6:	bf00      	nop
 800aaf8:	2000c430 	.word	0x2000c430
 800aafc:	2000c440 	.word	0x2000c440
 800ab00:	2000c460 	.word	0x2000c460
 800ab04:	2000c45d 	.word	0x2000c45d
 800ab08:	2000c458 	.word	0x2000c458
 800ab0c:	2000c45c 	.word	0x2000c45c
 800ab10:	2000c45a 	.word	0x2000c45a
 800ab14:	2000c464 	.word	0x2000c464
 800ab18:	2000c424 	.word	0x2000c424
 800ab1c:	08018770 	.word	0x08018770
 800ab20:	08018924 	.word	0x08018924
 800ab24:	080187bc 	.word	0x080187bc
          goto aborted;
 800ab28:	bf00      	nop
    tcp_input_pcb = NULL;
 800ab2a:	4b27      	ldr	r3, [pc, #156]	; (800abc8 <tcp_input+0x7f4>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ab30:	4b26      	ldr	r3, [pc, #152]	; (800abcc <tcp_input+0x7f8>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ab36:	4b26      	ldr	r3, [pc, #152]	; (800abd0 <tcp_input+0x7fc>)
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d03f      	beq.n	800abbe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ab3e:	4b24      	ldr	r3, [pc, #144]	; (800abd0 <tcp_input+0x7fc>)
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fd fe02 	bl	800874c <pbuf_free>
      inseg.p = NULL;
 800ab48:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <tcp_input+0x7fc>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ab4e:	e036      	b.n	800abbe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ab50:	4b20      	ldr	r3, [pc, #128]	; (800abd4 <tcp_input+0x800>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	899b      	ldrh	r3, [r3, #12]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fc f9f9 	bl	8006f50 <lwip_htons>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	f003 0304 	and.w	r3, r3, #4
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d118      	bne.n	800ab9c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <tcp_input+0x804>)
 800ab6c:	6819      	ldr	r1, [r3, #0]
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <tcp_input+0x808>)
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	4b1a      	ldr	r3, [pc, #104]	; (800abe0 <tcp_input+0x80c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab7a:	4b16      	ldr	r3, [pc, #88]	; (800abd4 <tcp_input+0x800>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab7e:	885b      	ldrh	r3, [r3, #2]
 800ab80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab82:	4a14      	ldr	r2, [pc, #80]	; (800abd4 <tcp_input+0x800>)
 800ab84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab86:	8812      	ldrh	r2, [r2, #0]
 800ab88:	b292      	uxth	r2, r2
 800ab8a:	9202      	str	r2, [sp, #8]
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	4b15      	ldr	r3, [pc, #84]	; (800abe4 <tcp_input+0x810>)
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <tcp_input+0x814>)
 800ab94:	4602      	mov	r2, r0
 800ab96:	2000      	movs	r0, #0
 800ab98:	f003 f81c 	bl	800dbd4 <tcp_rst>
    pbuf_free(p);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7fd fdd5 	bl	800874c <pbuf_free>
  return;
 800aba2:	e00c      	b.n	800abbe <tcp_input+0x7ea>
    goto dropped;
 800aba4:	bf00      	nop
 800aba6:	e006      	b.n	800abb6 <tcp_input+0x7e2>
    goto dropped;
 800aba8:	bf00      	nop
 800abaa:	e004      	b.n	800abb6 <tcp_input+0x7e2>
    goto dropped;
 800abac:	bf00      	nop
 800abae:	e002      	b.n	800abb6 <tcp_input+0x7e2>
      goto dropped;
 800abb0:	bf00      	nop
 800abb2:	e000      	b.n	800abb6 <tcp_input+0x7e2>
      goto dropped;
 800abb4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fd fdc8 	bl	800874c <pbuf_free>
 800abbc:	e000      	b.n	800abc0 <tcp_input+0x7ec>
  return;
 800abbe:	bf00      	nop
}
 800abc0:	3724      	adds	r7, #36	; 0x24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd90      	pop	{r4, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	2000c464 	.word	0x2000c464
 800abcc:	2000c460 	.word	0x2000c460
 800abd0:	2000c430 	.word	0x2000c430
 800abd4:	2000c440 	.word	0x2000c440
 800abd8:	2000c454 	.word	0x2000c454
 800abdc:	2000c45a 	.word	0x2000c45a
 800abe0:	2000c450 	.word	0x2000c450
 800abe4:	20008cb4 	.word	0x20008cb4
 800abe8:	20008cb8 	.word	0x20008cb8

0800abec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <tcp_input_delayed_close+0x1c>
 800abfa:	4b17      	ldr	r3, [pc, #92]	; (800ac58 <tcp_input_delayed_close+0x6c>)
 800abfc:	f240 225a 	movw	r2, #602	; 0x25a
 800ac00:	4916      	ldr	r1, [pc, #88]	; (800ac5c <tcp_input_delayed_close+0x70>)
 800ac02:	4817      	ldr	r0, [pc, #92]	; (800ac60 <tcp_input_delayed_close+0x74>)
 800ac04:	f009 f938 	bl	8013e78 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ac08:	4b16      	ldr	r3, [pc, #88]	; (800ac64 <tcp_input_delayed_close+0x78>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 0310 	and.w	r3, r3, #16
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d01c      	beq.n	800ac4e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	8b5b      	ldrh	r3, [r3, #26]
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10d      	bne.n	800ac3c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d008      	beq.n	800ac3c <tcp_input_delayed_close+0x50>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6912      	ldr	r2, [r2, #16]
 800ac34:	f06f 010e 	mvn.w	r1, #14
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	480a      	ldr	r0, [pc, #40]	; (800ac68 <tcp_input_delayed_close+0x7c>)
 800ac40:	f7ff fa50 	bl	800a0e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7fe f83d 	bl	8008cc4 <tcp_free>
    return 1;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	08018770 	.word	0x08018770
 800ac5c:	08018940 	.word	0x08018940
 800ac60:	080187bc 	.word	0x080187bc
 800ac64:	2000c45d 	.word	0x2000c45d
 800ac68:	2000c424 	.word	0x2000c424

0800ac6c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b08b      	sub	sp, #44	; 0x2c
 800ac70:	af04      	add	r7, sp, #16
 800ac72:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ac74:	4b6f      	ldr	r3, [pc, #444]	; (800ae34 <tcp_listen_input+0x1c8>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f040 80d2 	bne.w	800ae26 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d106      	bne.n	800ac96 <tcp_listen_input+0x2a>
 800ac88:	4b6b      	ldr	r3, [pc, #428]	; (800ae38 <tcp_listen_input+0x1cc>)
 800ac8a:	f240 2281 	movw	r2, #641	; 0x281
 800ac8e:	496b      	ldr	r1, [pc, #428]	; (800ae3c <tcp_listen_input+0x1d0>)
 800ac90:	486b      	ldr	r0, [pc, #428]	; (800ae40 <tcp_listen_input+0x1d4>)
 800ac92:	f009 f8f1 	bl	8013e78 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ac96:	4b67      	ldr	r3, [pc, #412]	; (800ae34 <tcp_listen_input+0x1c8>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 0310 	and.w	r3, r3, #16
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d019      	beq.n	800acd6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aca2:	4b68      	ldr	r3, [pc, #416]	; (800ae44 <tcp_listen_input+0x1d8>)
 800aca4:	6819      	ldr	r1, [r3, #0]
 800aca6:	4b68      	ldr	r3, [pc, #416]	; (800ae48 <tcp_listen_input+0x1dc>)
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	4b67      	ldr	r3, [pc, #412]	; (800ae4c <tcp_listen_input+0x1e0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acb2:	4b67      	ldr	r3, [pc, #412]	; (800ae50 <tcp_listen_input+0x1e4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acb6:	885b      	ldrh	r3, [r3, #2]
 800acb8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acba:	4a65      	ldr	r2, [pc, #404]	; (800ae50 <tcp_listen_input+0x1e4>)
 800acbc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acbe:	8812      	ldrh	r2, [r2, #0]
 800acc0:	b292      	uxth	r2, r2
 800acc2:	9202      	str	r2, [sp, #8]
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	4b63      	ldr	r3, [pc, #396]	; (800ae54 <tcp_listen_input+0x1e8>)
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	4b63      	ldr	r3, [pc, #396]	; (800ae58 <tcp_listen_input+0x1ec>)
 800accc:	4602      	mov	r2, r0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f002 ff80 	bl	800dbd4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800acd4:	e0a9      	b.n	800ae2a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800acd6:	4b57      	ldr	r3, [pc, #348]	; (800ae34 <tcp_listen_input+0x1c8>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 0302 	and.w	r3, r3, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80a3 	beq.w	800ae2a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	7d5b      	ldrb	r3, [r3, #21]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff f927 	bl	8009f3c <tcp_alloc>
 800acee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d111      	bne.n	800ad1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <tcp_listen_input+0xa8>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	6910      	ldr	r0, [r2, #16]
 800ad06:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4798      	blx	r3
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]
      return;
 800ad12:	e08b      	b.n	800ae2c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ad14:	23f0      	movs	r3, #240	; 0xf0
 800ad16:	73bb      	strb	r3, [r7, #14]
      return;
 800ad18:	e088      	b.n	800ae2c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ad1a:	4b50      	ldr	r3, [pc, #320]	; (800ae5c <tcp_listen_input+0x1f0>)
 800ad1c:	695a      	ldr	r2, [r3, #20]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ad22:	4b4e      	ldr	r3, [pc, #312]	; (800ae5c <tcp_listen_input+0x1f0>)
 800ad24:	691a      	ldr	r2, [r3, #16]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	8ada      	ldrh	r2, [r3, #22]
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ad32:	4b47      	ldr	r3, [pc, #284]	; (800ae50 <tcp_listen_input+0x1e4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2203      	movs	r2, #3
 800ad42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ad44:	4b41      	ldr	r3, [pc, #260]	; (800ae4c <tcp_listen_input+0x1e0>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ad56:	6978      	ldr	r0, [r7, #20]
 800ad58:	f7ff fa58 	bl	800a20c <tcp_next_iss>
 800ad5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ad76:	4b35      	ldr	r3, [pc, #212]	; (800ae4c <tcp_listen_input+0x1e0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	1e5a      	subs	r2, r3, #1
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	691a      	ldr	r2, [r3, #16]
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	7a5b      	ldrb	r3, [r3, #9]
 800ad92:	f003 030c 	and.w	r3, r3, #12
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	7a1a      	ldrb	r2, [r3, #8]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ada4:	4b2e      	ldr	r3, [pc, #184]	; (800ae60 <tcp_listen_input+0x1f4>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	60da      	str	r2, [r3, #12]
 800adac:	4a2c      	ldr	r2, [pc, #176]	; (800ae60 <tcp_listen_input+0x1f4>)
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	f003 f8d1 	bl	800df58 <tcp_timer_needed>
 800adb6:	4b2b      	ldr	r3, [pc, #172]	; (800ae64 <tcp_listen_input+0x1f8>)
 800adb8:	2201      	movs	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800adbc:	6978      	ldr	r0, [r7, #20]
 800adbe:	f001 fd8f 	bl	800c8e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800adc2:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <tcp_listen_input+0x1e4>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	89db      	ldrh	r3, [r3, #14]
 800adc8:	b29a      	uxth	r2, r3
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4618      	mov	r0, r3
 800ade6:	f006 fe5d 	bl	8011aa4 <ip4_route>
 800adea:	4601      	mov	r1, r0
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	3304      	adds	r3, #4
 800adf0:	461a      	mov	r2, r3
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7ff fa30 	bl	800a258 <tcp_eff_send_mss_netif>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ae00:	2112      	movs	r1, #18
 800ae02:	6978      	ldr	r0, [r7, #20]
 800ae04:	f002 f844 	bl	800ce90 <tcp_enqueue_flags>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ae0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ae14:	2100      	movs	r1, #0
 800ae16:	6978      	ldr	r0, [r7, #20]
 800ae18:	f7fe f97e 	bl	8009118 <tcp_abandon>
      return;
 800ae1c:	e006      	b.n	800ae2c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ae1e:	6978      	ldr	r0, [r7, #20]
 800ae20:	f002 f924 	bl	800d06c <tcp_output>
  return;
 800ae24:	e001      	b.n	800ae2a <tcp_listen_input+0x1be>
    return;
 800ae26:	bf00      	nop
 800ae28:	e000      	b.n	800ae2c <tcp_listen_input+0x1c0>
  return;
 800ae2a:	bf00      	nop
}
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd90      	pop	{r4, r7, pc}
 800ae32:	bf00      	nop
 800ae34:	2000c45c 	.word	0x2000c45c
 800ae38:	08018770 	.word	0x08018770
 800ae3c:	08018968 	.word	0x08018968
 800ae40:	080187bc 	.word	0x080187bc
 800ae44:	2000c454 	.word	0x2000c454
 800ae48:	2000c45a 	.word	0x2000c45a
 800ae4c:	2000c450 	.word	0x2000c450
 800ae50:	2000c440 	.word	0x2000c440
 800ae54:	20008cb4 	.word	0x20008cb4
 800ae58:	20008cb8 	.word	0x20008cb8
 800ae5c:	20008ca4 	.word	0x20008ca4
 800ae60:	2000c424 	.word	0x2000c424
 800ae64:	2000c42c 	.word	0x2000c42c

0800ae68 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af04      	add	r7, sp, #16
 800ae6e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ae70:	4b2f      	ldr	r3, [pc, #188]	; (800af30 <tcp_timewait_input+0xc8>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d153      	bne.n	800af24 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <tcp_timewait_input+0x28>
 800ae82:	4b2c      	ldr	r3, [pc, #176]	; (800af34 <tcp_timewait_input+0xcc>)
 800ae84:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ae88:	492b      	ldr	r1, [pc, #172]	; (800af38 <tcp_timewait_input+0xd0>)
 800ae8a:	482c      	ldr	r0, [pc, #176]	; (800af3c <tcp_timewait_input+0xd4>)
 800ae8c:	f008 fff4 	bl	8013e78 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ae90:	4b27      	ldr	r3, [pc, #156]	; (800af30 <tcp_timewait_input+0xc8>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d02a      	beq.n	800aef2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ae9c:	4b28      	ldr	r3, [pc, #160]	; (800af40 <tcp_timewait_input+0xd8>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	db2d      	blt.n	800af06 <tcp_timewait_input+0x9e>
 800aeaa:	4b25      	ldr	r3, [pc, #148]	; (800af40 <tcp_timewait_input+0xd8>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aeb6:	440b      	add	r3, r1
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dc23      	bgt.n	800af06 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aebe:	4b21      	ldr	r3, [pc, #132]	; (800af44 <tcp_timewait_input+0xdc>)
 800aec0:	6819      	ldr	r1, [r3, #0]
 800aec2:	4b21      	ldr	r3, [pc, #132]	; (800af48 <tcp_timewait_input+0xe0>)
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <tcp_timewait_input+0xd8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aece:	4b1f      	ldr	r3, [pc, #124]	; (800af4c <tcp_timewait_input+0xe4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aed2:	885b      	ldrh	r3, [r3, #2]
 800aed4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aed6:	4a1d      	ldr	r2, [pc, #116]	; (800af4c <tcp_timewait_input+0xe4>)
 800aed8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aeda:	8812      	ldrh	r2, [r2, #0]
 800aedc:	b292      	uxth	r2, r2
 800aede:	9202      	str	r2, [sp, #8]
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	4b1b      	ldr	r3, [pc, #108]	; (800af50 <tcp_timewait_input+0xe8>)
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	4b1b      	ldr	r3, [pc, #108]	; (800af54 <tcp_timewait_input+0xec>)
 800aee8:	4602      	mov	r2, r0
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f002 fe72 	bl	800dbd4 <tcp_rst>
      return;
 800aef0:	e01b      	b.n	800af2a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800aef2:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <tcp_timewait_input+0xc8>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800aefe:	4b16      	ldr	r3, [pc, #88]	; (800af58 <tcp_timewait_input+0xf0>)
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800af06:	4b10      	ldr	r3, [pc, #64]	; (800af48 <tcp_timewait_input+0xe0>)
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00c      	beq.n	800af28 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	8b5b      	ldrh	r3, [r3, #26]
 800af12:	f043 0302 	orr.w	r3, r3, #2
 800af16:	b29a      	uxth	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f002 f8a5 	bl	800d06c <tcp_output>
  }
  return;
 800af22:	e001      	b.n	800af28 <tcp_timewait_input+0xc0>
    return;
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <tcp_timewait_input+0xc2>
  return;
 800af28:	bf00      	nop
}
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	2000c45c 	.word	0x2000c45c
 800af34:	08018770 	.word	0x08018770
 800af38:	08018988 	.word	0x08018988
 800af3c:	080187bc 	.word	0x080187bc
 800af40:	2000c450 	.word	0x2000c450
 800af44:	2000c454 	.word	0x2000c454
 800af48:	2000c45a 	.word	0x2000c45a
 800af4c:	2000c440 	.word	0x2000c440
 800af50:	20008cb4 	.word	0x20008cb4
 800af54:	20008cb8 	.word	0x20008cb8
 800af58:	2000c418 	.word	0x2000c418

0800af5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b08d      	sub	sp, #52	; 0x34
 800af60:	af04      	add	r7, sp, #16
 800af62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <tcp_process+0x24>
 800af72:	4b9d      	ldr	r3, [pc, #628]	; (800b1e8 <tcp_process+0x28c>)
 800af74:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800af78:	499c      	ldr	r1, [pc, #624]	; (800b1ec <tcp_process+0x290>)
 800af7a:	489d      	ldr	r0, [pc, #628]	; (800b1f0 <tcp_process+0x294>)
 800af7c:	f008 ff7c 	bl	8013e78 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800af80:	4b9c      	ldr	r3, [pc, #624]	; (800b1f4 <tcp_process+0x298>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d04e      	beq.n	800b02a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7d1b      	ldrb	r3, [r3, #20]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d108      	bne.n	800afa6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af98:	4b97      	ldr	r3, [pc, #604]	; (800b1f8 <tcp_process+0x29c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d123      	bne.n	800afe8 <tcp_process+0x8c>
        acceptable = 1;
 800afa0:	2301      	movs	r3, #1
 800afa2:	76fb      	strb	r3, [r7, #27]
 800afa4:	e020      	b.n	800afe8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afaa:	4b94      	ldr	r3, [pc, #592]	; (800b1fc <tcp_process+0x2a0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d102      	bne.n	800afb8 <tcp_process+0x5c>
        acceptable = 1;
 800afb2:	2301      	movs	r3, #1
 800afb4:	76fb      	strb	r3, [r7, #27]
 800afb6:	e017      	b.n	800afe8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afb8:	4b90      	ldr	r3, [pc, #576]	; (800b1fc <tcp_process+0x2a0>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	db10      	blt.n	800afe8 <tcp_process+0x8c>
 800afc6:	4b8d      	ldr	r3, [pc, #564]	; (800b1fc <tcp_process+0x2a0>)
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afd2:	440b      	add	r3, r1
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dc06      	bgt.n	800afe8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	8b5b      	ldrh	r3, [r3, #26]
 800afde:	f043 0302 	orr.w	r3, r3, #2
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800afe8:	7efb      	ldrb	r3, [r7, #27]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d01b      	beq.n	800b026 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	7d1b      	ldrb	r3, [r3, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <tcp_process+0xa8>
 800aff6:	4b7c      	ldr	r3, [pc, #496]	; (800b1e8 <tcp_process+0x28c>)
 800aff8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800affc:	4980      	ldr	r1, [pc, #512]	; (800b200 <tcp_process+0x2a4>)
 800affe:	487c      	ldr	r0, [pc, #496]	; (800b1f0 <tcp_process+0x294>)
 800b000:	f008 ff3a 	bl	8013e78 <iprintf>
      recv_flags |= TF_RESET;
 800b004:	4b7f      	ldr	r3, [pc, #508]	; (800b204 <tcp_process+0x2a8>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f043 0308 	orr.w	r3, r3, #8
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b7d      	ldr	r3, [pc, #500]	; (800b204 <tcp_process+0x2a8>)
 800b010:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8b5b      	ldrh	r3, [r3, #26]
 800b016:	f023 0301 	bic.w	r3, r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b020:	f06f 030d 	mvn.w	r3, #13
 800b024:	e37a      	b.n	800b71c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	e378      	b.n	800b71c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b02a:	4b72      	ldr	r3, [pc, #456]	; (800b1f4 <tcp_process+0x298>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	2b00      	cmp	r3, #0
 800b034:	d010      	beq.n	800b058 <tcp_process+0xfc>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7d1b      	ldrb	r3, [r3, #20]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d00c      	beq.n	800b058 <tcp_process+0xfc>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7d1b      	ldrb	r3, [r3, #20]
 800b042:	2b03      	cmp	r3, #3
 800b044:	d008      	beq.n	800b058 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	8b5b      	ldrh	r3, [r3, #26]
 800b04a:	f043 0302 	orr.w	r3, r3, #2
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	e361      	b.n	800b71c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	8b5b      	ldrh	r3, [r3, #26]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b00      	cmp	r3, #0
 800b062:	d103      	bne.n	800b06c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b064:	4b68      	ldr	r3, [pc, #416]	; (800b208 <tcp_process+0x2ac>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 fc2f 	bl	800c8e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	7d1b      	ldrb	r3, [r3, #20]
 800b086:	3b02      	subs	r3, #2
 800b088:	2b07      	cmp	r3, #7
 800b08a:	f200 8337 	bhi.w	800b6fc <tcp_process+0x7a0>
 800b08e:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <tcp_process+0x138>)
 800b090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b094:	0800b0b5 	.word	0x0800b0b5
 800b098:	0800b2e5 	.word	0x0800b2e5
 800b09c:	0800b45d 	.word	0x0800b45d
 800b0a0:	0800b487 	.word	0x0800b487
 800b0a4:	0800b5ab 	.word	0x0800b5ab
 800b0a8:	0800b45d 	.word	0x0800b45d
 800b0ac:	0800b637 	.word	0x0800b637
 800b0b0:	0800b6c7 	.word	0x0800b6c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b0b4:	4b4f      	ldr	r3, [pc, #316]	; (800b1f4 <tcp_process+0x298>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 0310 	and.w	r3, r3, #16
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 80e4 	beq.w	800b28a <tcp_process+0x32e>
 800b0c2:	4b4c      	ldr	r3, [pc, #304]	; (800b1f4 <tcp_process+0x298>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 80dd 	beq.w	800b28a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	4b48      	ldr	r3, [pc, #288]	; (800b1f8 <tcp_process+0x29c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	f040 80d5 	bne.w	800b28a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b0e0:	4b46      	ldr	r3, [pc, #280]	; (800b1fc <tcp_process+0x2a0>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b0f2:	4b41      	ldr	r3, [pc, #260]	; (800b1f8 <tcp_process+0x29c>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b0fa:	4b44      	ldr	r3, [pc, #272]	; (800b20c <tcp_process+0x2b0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	89db      	ldrh	r3, [r3, #14]
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b114:	4b39      	ldr	r3, [pc, #228]	; (800b1fc <tcp_process+0x2a0>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	1e5a      	subs	r2, r3, #1
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2204      	movs	r2, #4
 800b122:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4618      	mov	r0, r3
 800b12e:	f006 fcb9 	bl	8011aa4 <ip4_route>
 800b132:	4601      	mov	r1, r0
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3304      	adds	r3, #4
 800b138:	461a      	mov	r2, r3
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff f88c 	bl	800a258 <tcp_eff_send_mss_netif>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b14c:	009a      	lsls	r2, r3, #2
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	f241 111c 	movw	r1, #4380	; 0x111c
 800b158:	428b      	cmp	r3, r1
 800b15a:	bf38      	it	cc
 800b15c:	460b      	movcc	r3, r1
 800b15e:	429a      	cmp	r2, r3
 800b160:	d204      	bcs.n	800b16c <tcp_process+0x210>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	b29b      	uxth	r3, r3
 800b16a:	e00d      	b.n	800b188 <tcp_process+0x22c>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	f241 121c 	movw	r2, #4380	; 0x111c
 800b176:	4293      	cmp	r3, r2
 800b178:	d904      	bls.n	800b184 <tcp_process+0x228>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	b29b      	uxth	r3, r3
 800b182:	e001      	b.n	800b188 <tcp_process+0x22c>
 800b184:	f241 131c 	movw	r3, #4380	; 0x111c
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <tcp_process+0x24a>
 800b198:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <tcp_process+0x28c>)
 800b19a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b19e:	491c      	ldr	r1, [pc, #112]	; (800b210 <tcp_process+0x2b4>)
 800b1a0:	4813      	ldr	r0, [pc, #76]	; (800b1f0 <tcp_process+0x294>)
 800b1a2:	f008 fe69 	bl	8013e78 <iprintf>
        --pcb->snd_queuelen;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d12a      	bne.n	800b218 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <tcp_process+0x280>
 800b1ce:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <tcp_process+0x28c>)
 800b1d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b1d4:	490f      	ldr	r1, [pc, #60]	; (800b214 <tcp_process+0x2b8>)
 800b1d6:	4806      	ldr	r0, [pc, #24]	; (800b1f0 <tcp_process+0x294>)
 800b1d8:	f008 fe4e 	bl	8013e78 <iprintf>
          pcb->unsent = rseg->next;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	66da      	str	r2, [r3, #108]	; 0x6c
 800b1e4:	e01c      	b.n	800b220 <tcp_process+0x2c4>
 800b1e6:	bf00      	nop
 800b1e8:	08018770 	.word	0x08018770
 800b1ec:	080189a8 	.word	0x080189a8
 800b1f0:	080187bc 	.word	0x080187bc
 800b1f4:	2000c45c 	.word	0x2000c45c
 800b1f8:	2000c454 	.word	0x2000c454
 800b1fc:	2000c450 	.word	0x2000c450
 800b200:	080189c4 	.word	0x080189c4
 800b204:	2000c45d 	.word	0x2000c45d
 800b208:	2000c418 	.word	0x2000c418
 800b20c:	2000c440 	.word	0x2000c440
 800b210:	080189e4 	.word	0x080189e4
 800b214:	080189fc 	.word	0x080189fc
        } else {
          pcb->unacked = rseg->next;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b220:	69f8      	ldr	r0, [r7, #28]
 800b222:	f7fe fd22 	bl	8009c6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b234:	861a      	strh	r2, [r3, #48]	; 0x30
 800b236:	e006      	b.n	800b246 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <tcp_process+0x30a>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6910      	ldr	r0, [r2, #16]
 800b25a:	2200      	movs	r2, #0
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4798      	blx	r3
 800b260:	4603      	mov	r3, r0
 800b262:	76bb      	strb	r3, [r7, #26]
 800b264:	e001      	b.n	800b26a <tcp_process+0x30e>
 800b266:	2300      	movs	r3, #0
 800b268:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b26a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b26e:	f113 0f0d 	cmn.w	r3, #13
 800b272:	d102      	bne.n	800b27a <tcp_process+0x31e>
          return ERR_ABRT;
 800b274:	f06f 030c 	mvn.w	r3, #12
 800b278:	e250      	b.n	800b71c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	8b5b      	ldrh	r3, [r3, #26]
 800b27e:	f043 0302 	orr.w	r3, r3, #2
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b288:	e23a      	b.n	800b700 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b28a:	4b98      	ldr	r3, [pc, #608]	; (800b4ec <tcp_process+0x590>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	f003 0310 	and.w	r3, r3, #16
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 8234 	beq.w	800b700 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b298:	4b95      	ldr	r3, [pc, #596]	; (800b4f0 <tcp_process+0x594>)
 800b29a:	6819      	ldr	r1, [r3, #0]
 800b29c:	4b95      	ldr	r3, [pc, #596]	; (800b4f4 <tcp_process+0x598>)
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4b95      	ldr	r3, [pc, #596]	; (800b4f8 <tcp_process+0x59c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2a8:	4b94      	ldr	r3, [pc, #592]	; (800b4fc <tcp_process+0x5a0>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2ac:	885b      	ldrh	r3, [r3, #2]
 800b2ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2b0:	4a92      	ldr	r2, [pc, #584]	; (800b4fc <tcp_process+0x5a0>)
 800b2b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2b4:	8812      	ldrh	r2, [r2, #0]
 800b2b6:	b292      	uxth	r2, r2
 800b2b8:	9202      	str	r2, [sp, #8]
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	4b90      	ldr	r3, [pc, #576]	; (800b500 <tcp_process+0x5a4>)
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	4b90      	ldr	r3, [pc, #576]	; (800b504 <tcp_process+0x5a8>)
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f002 fc85 	bl	800dbd4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2d0:	2b05      	cmp	r3, #5
 800b2d2:	f200 8215 	bhi.w	800b700 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f002 fa51 	bl	800d784 <tcp_rexmit_rto>
      break;
 800b2e2:	e20d      	b.n	800b700 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b2e4:	4b81      	ldr	r3, [pc, #516]	; (800b4ec <tcp_process+0x590>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 80a1 	beq.w	800b434 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2f2:	4b7f      	ldr	r3, [pc, #508]	; (800b4f0 <tcp_process+0x594>)
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	db7e      	blt.n	800b400 <tcp_process+0x4a4>
 800b302:	4b7b      	ldr	r3, [pc, #492]	; (800b4f0 <tcp_process+0x594>)
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dc77      	bgt.n	800b400 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2204      	movs	r2, #4
 800b314:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b31e:	23fa      	movs	r3, #250	; 0xfa
 800b320:	76bb      	strb	r3, [r7, #26]
 800b322:	e01d      	b.n	800b360 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <tcp_process+0x3e0>
 800b32e:	4b76      	ldr	r3, [pc, #472]	; (800b508 <tcp_process+0x5ac>)
 800b330:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b334:	4975      	ldr	r1, [pc, #468]	; (800b50c <tcp_process+0x5b0>)
 800b336:	4876      	ldr	r0, [pc, #472]	; (800b510 <tcp_process+0x5b4>)
 800b338:	f008 fd9e 	bl	8013e78 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <tcp_process+0x400>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6910      	ldr	r0, [r2, #16]
 800b350:	2200      	movs	r2, #0
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	4798      	blx	r3
 800b356:	4603      	mov	r3, r0
 800b358:	76bb      	strb	r3, [r7, #26]
 800b35a:	e001      	b.n	800b360 <tcp_process+0x404>
 800b35c:	23f0      	movs	r3, #240	; 0xf0
 800b35e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b360:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00a      	beq.n	800b37e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b368:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b36c:	f113 0f0d 	cmn.w	r3, #13
 800b370:	d002      	beq.n	800b378 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7fd ff8e 	bl	8009294 <tcp_abort>
            }
            return ERR_ABRT;
 800b378:	f06f 030c 	mvn.w	r3, #12
 800b37c:	e1ce      	b.n	800b71c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fae0 	bl	800b944 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b384:	4b63      	ldr	r3, [pc, #396]	; (800b514 <tcp_process+0x5b8>)
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <tcp_process+0x43c>
            recv_acked--;
 800b38c:	4b61      	ldr	r3, [pc, #388]	; (800b514 <tcp_process+0x5b8>)
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	3b01      	subs	r3, #1
 800b392:	b29a      	uxth	r2, r3
 800b394:	4b5f      	ldr	r3, [pc, #380]	; (800b514 <tcp_process+0x5b8>)
 800b396:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39c:	009a      	lsls	r2, r3, #2
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	f241 111c 	movw	r1, #4380	; 0x111c
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	bf38      	it	cc
 800b3ac:	460b      	movcc	r3, r1
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d204      	bcs.n	800b3bc <tcp_process+0x460>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	e00d      	b.n	800b3d8 <tcp_process+0x47c>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d904      	bls.n	800b3d4 <tcp_process+0x478>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	e001      	b.n	800b3d8 <tcp_process+0x47c>
 800b3d4:	f241 131c 	movw	r3, #4380	; 0x111c
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b3de:	4b4e      	ldr	r3, [pc, #312]	; (800b518 <tcp_process+0x5bc>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	f003 0320 	and.w	r3, r3, #32
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d037      	beq.n	800b45a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8b5b      	ldrh	r3, [r3, #26]
 800b3ee:	f043 0302 	orr.w	r3, r3, #2
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2207      	movs	r2, #7
 800b3fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b3fe:	e02c      	b.n	800b45a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b400:	4b3b      	ldr	r3, [pc, #236]	; (800b4f0 <tcp_process+0x594>)
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	4b3b      	ldr	r3, [pc, #236]	; (800b4f4 <tcp_process+0x598>)
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	4b3b      	ldr	r3, [pc, #236]	; (800b4f8 <tcp_process+0x59c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b410:	4b3a      	ldr	r3, [pc, #232]	; (800b4fc <tcp_process+0x5a0>)
 800b412:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b414:	885b      	ldrh	r3, [r3, #2]
 800b416:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b418:	4a38      	ldr	r2, [pc, #224]	; (800b4fc <tcp_process+0x5a0>)
 800b41a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b41c:	8812      	ldrh	r2, [r2, #0]
 800b41e:	b292      	uxth	r2, r2
 800b420:	9202      	str	r2, [sp, #8]
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	4b36      	ldr	r3, [pc, #216]	; (800b500 <tcp_process+0x5a4>)
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	4b36      	ldr	r3, [pc, #216]	; (800b504 <tcp_process+0x5a8>)
 800b42a:	4602      	mov	r2, r0
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f002 fbd1 	bl	800dbd4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b432:	e167      	b.n	800b704 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b434:	4b2d      	ldr	r3, [pc, #180]	; (800b4ec <tcp_process+0x590>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8161 	beq.w	800b704 <tcp_process+0x7a8>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	1e5a      	subs	r2, r3, #1
 800b448:	4b2b      	ldr	r3, [pc, #172]	; (800b4f8 <tcp_process+0x59c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	f040 8159 	bne.w	800b704 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f002 f9b8 	bl	800d7c8 <tcp_rexmit>
      break;
 800b458:	e154      	b.n	800b704 <tcp_process+0x7a8>
 800b45a:	e153      	b.n	800b704 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa71 	bl	800b944 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b462:	4b2d      	ldr	r3, [pc, #180]	; (800b518 <tcp_process+0x5bc>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f003 0320 	and.w	r3, r3, #32
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 814c 	beq.w	800b708 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8b5b      	ldrh	r3, [r3, #26]
 800b474:	f043 0302 	orr.w	r3, r3, #2
 800b478:	b29a      	uxth	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2207      	movs	r2, #7
 800b482:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b484:	e140      	b.n	800b708 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fa5c 	bl	800b944 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b48c:	4b22      	ldr	r3, [pc, #136]	; (800b518 <tcp_process+0x5bc>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 0320 	and.w	r3, r3, #32
 800b494:	2b00      	cmp	r3, #0
 800b496:	d071      	beq.n	800b57c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b498:	4b14      	ldr	r3, [pc, #80]	; (800b4ec <tcp_process+0x590>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d060      	beq.n	800b566 <tcp_process+0x60a>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4a8:	4b11      	ldr	r3, [pc, #68]	; (800b4f0 <tcp_process+0x594>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d15a      	bne.n	800b566 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d156      	bne.n	800b566 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	8b5b      	ldrh	r3, [r3, #26]
 800b4bc:	f043 0302 	orr.w	r3, r3, #2
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fe fdbc 	bl	800a044 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b4cc:	4b13      	ldr	r3, [pc, #76]	; (800b51c <tcp_process+0x5c0>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d105      	bne.n	800b4e2 <tcp_process+0x586>
 800b4d6:	4b11      	ldr	r3, [pc, #68]	; (800b51c <tcp_process+0x5c0>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4a0f      	ldr	r2, [pc, #60]	; (800b51c <tcp_process+0x5c0>)
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	e02e      	b.n	800b540 <tcp_process+0x5e4>
 800b4e2:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <tcp_process+0x5c0>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	617b      	str	r3, [r7, #20]
 800b4e8:	e027      	b.n	800b53a <tcp_process+0x5de>
 800b4ea:	bf00      	nop
 800b4ec:	2000c45c 	.word	0x2000c45c
 800b4f0:	2000c454 	.word	0x2000c454
 800b4f4:	2000c45a 	.word	0x2000c45a
 800b4f8:	2000c450 	.word	0x2000c450
 800b4fc:	2000c440 	.word	0x2000c440
 800b500:	20008cb4 	.word	0x20008cb4
 800b504:	20008cb8 	.word	0x20008cb8
 800b508:	08018770 	.word	0x08018770
 800b50c:	08018a10 	.word	0x08018a10
 800b510:	080187bc 	.word	0x080187bc
 800b514:	2000c458 	.word	0x2000c458
 800b518:	2000c45d 	.word	0x2000c45d
 800b51c:	2000c424 	.word	0x2000c424
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	429a      	cmp	r2, r3
 800b528:	d104      	bne.n	800b534 <tcp_process+0x5d8>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68da      	ldr	r2, [r3, #12]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	e005      	b.n	800b540 <tcp_process+0x5e4>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1ef      	bne.n	800b520 <tcp_process+0x5c4>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	60da      	str	r2, [r3, #12]
 800b546:	4b77      	ldr	r3, [pc, #476]	; (800b724 <tcp_process+0x7c8>)
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	220a      	movs	r2, #10
 800b550:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b552:	4b75      	ldr	r3, [pc, #468]	; (800b728 <tcp_process+0x7cc>)
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60da      	str	r2, [r3, #12]
 800b55a:	4a73      	ldr	r2, [pc, #460]	; (800b728 <tcp_process+0x7cc>)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	f002 fcfa 	bl	800df58 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b564:	e0d2      	b.n	800b70c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8b5b      	ldrh	r3, [r3, #26]
 800b56a:	f043 0302 	orr.w	r3, r3, #2
 800b56e:	b29a      	uxth	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2208      	movs	r2, #8
 800b578:	751a      	strb	r2, [r3, #20]
      break;
 800b57a:	e0c7      	b.n	800b70c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b57c:	4b6b      	ldr	r3, [pc, #428]	; (800b72c <tcp_process+0x7d0>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	f003 0310 	and.w	r3, r3, #16
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 80c1 	beq.w	800b70c <tcp_process+0x7b0>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b58e:	4b68      	ldr	r3, [pc, #416]	; (800b730 <tcp_process+0x7d4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	f040 80ba 	bne.w	800b70c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 80b5 	bne.w	800b70c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2206      	movs	r2, #6
 800b5a6:	751a      	strb	r2, [r3, #20]
      break;
 800b5a8:	e0b0      	b.n	800b70c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f9ca 	bl	800b944 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5b0:	4b60      	ldr	r3, [pc, #384]	; (800b734 <tcp_process+0x7d8>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	f003 0320 	and.w	r3, r3, #32
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 80a9 	beq.w	800b710 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	8b5b      	ldrh	r3, [r3, #26]
 800b5c2:	f043 0302 	orr.w	r3, r3, #2
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7fe fd39 	bl	800a044 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b5d2:	4b59      	ldr	r3, [pc, #356]	; (800b738 <tcp_process+0x7dc>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d105      	bne.n	800b5e8 <tcp_process+0x68c>
 800b5dc:	4b56      	ldr	r3, [pc, #344]	; (800b738 <tcp_process+0x7dc>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	4a55      	ldr	r2, [pc, #340]	; (800b738 <tcp_process+0x7dc>)
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	e013      	b.n	800b610 <tcp_process+0x6b4>
 800b5e8:	4b53      	ldr	r3, [pc, #332]	; (800b738 <tcp_process+0x7dc>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	613b      	str	r3, [r7, #16]
 800b5ee:	e00c      	b.n	800b60a <tcp_process+0x6ae>
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d104      	bne.n	800b604 <tcp_process+0x6a8>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	e005      	b.n	800b610 <tcp_process+0x6b4>
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	613b      	str	r3, [r7, #16]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1ef      	bne.n	800b5f0 <tcp_process+0x694>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	60da      	str	r2, [r3, #12]
 800b616:	4b43      	ldr	r3, [pc, #268]	; (800b724 <tcp_process+0x7c8>)
 800b618:	2201      	movs	r2, #1
 800b61a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	220a      	movs	r2, #10
 800b620:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b622:	4b41      	ldr	r3, [pc, #260]	; (800b728 <tcp_process+0x7cc>)
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60da      	str	r2, [r3, #12]
 800b62a:	4a3f      	ldr	r2, [pc, #252]	; (800b728 <tcp_process+0x7cc>)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	f002 fc92 	bl	800df58 <tcp_timer_needed>
      }
      break;
 800b634:	e06c      	b.n	800b710 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f984 	bl	800b944 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b63c:	4b3b      	ldr	r3, [pc, #236]	; (800b72c <tcp_process+0x7d0>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b00      	cmp	r3, #0
 800b646:	d065      	beq.n	800b714 <tcp_process+0x7b8>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b64c:	4b38      	ldr	r3, [pc, #224]	; (800b730 <tcp_process+0x7d4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d15f      	bne.n	800b714 <tcp_process+0x7b8>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d15b      	bne.n	800b714 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7fe fcf1 	bl	800a044 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b662:	4b35      	ldr	r3, [pc, #212]	; (800b738 <tcp_process+0x7dc>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d105      	bne.n	800b678 <tcp_process+0x71c>
 800b66c:	4b32      	ldr	r3, [pc, #200]	; (800b738 <tcp_process+0x7dc>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4a31      	ldr	r2, [pc, #196]	; (800b738 <tcp_process+0x7dc>)
 800b674:	6013      	str	r3, [r2, #0]
 800b676:	e013      	b.n	800b6a0 <tcp_process+0x744>
 800b678:	4b2f      	ldr	r3, [pc, #188]	; (800b738 <tcp_process+0x7dc>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60fb      	str	r3, [r7, #12]
 800b67e:	e00c      	b.n	800b69a <tcp_process+0x73e>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d104      	bne.n	800b694 <tcp_process+0x738>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68da      	ldr	r2, [r3, #12]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	60da      	str	r2, [r3, #12]
 800b692:	e005      	b.n	800b6a0 <tcp_process+0x744>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1ef      	bne.n	800b680 <tcp_process+0x724>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	60da      	str	r2, [r3, #12]
 800b6a6:	4b1f      	ldr	r3, [pc, #124]	; (800b724 <tcp_process+0x7c8>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	220a      	movs	r2, #10
 800b6b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <tcp_process+0x7cc>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60da      	str	r2, [r3, #12]
 800b6ba:	4a1b      	ldr	r2, [pc, #108]	; (800b728 <tcp_process+0x7cc>)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	f002 fc4a 	bl	800df58 <tcp_timer_needed>
      }
      break;
 800b6c4:	e026      	b.n	800b714 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f93c 	bl	800b944 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b6cc:	4b17      	ldr	r3, [pc, #92]	; (800b72c <tcp_process+0x7d0>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 0310 	and.w	r3, r3, #16
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01f      	beq.n	800b718 <tcp_process+0x7bc>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6dc:	4b14      	ldr	r3, [pc, #80]	; (800b730 <tcp_process+0x7d4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d119      	bne.n	800b718 <tcp_process+0x7bc>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d115      	bne.n	800b718 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b6ec:	4b11      	ldr	r3, [pc, #68]	; (800b734 <tcp_process+0x7d8>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	f043 0310 	orr.w	r3, r3, #16
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <tcp_process+0x7d8>)
 800b6f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b6fa:	e00d      	b.n	800b718 <tcp_process+0x7bc>
    default:
      break;
 800b6fc:	bf00      	nop
 800b6fe:	e00c      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b700:	bf00      	nop
 800b702:	e00a      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b704:	bf00      	nop
 800b706:	e008      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b708:	bf00      	nop
 800b70a:	e006      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b70c:	bf00      	nop
 800b70e:	e004      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b710:	bf00      	nop
 800b712:	e002      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b714:	bf00      	nop
 800b716:	e000      	b.n	800b71a <tcp_process+0x7be>
      break;
 800b718:	bf00      	nop
  }
  return ERR_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3724      	adds	r7, #36	; 0x24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd90      	pop	{r4, r7, pc}
 800b724:	2000c42c 	.word	0x2000c42c
 800b728:	2000c428 	.word	0x2000c428
 800b72c:	2000c45c 	.word	0x2000c45c
 800b730:	2000c454 	.word	0x2000c454
 800b734:	2000c45d 	.word	0x2000c45d
 800b738:	2000c424 	.word	0x2000c424

0800b73c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b73c:	b590      	push	{r4, r7, lr}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <tcp_oos_insert_segment+0x1e>
 800b74c:	4b3b      	ldr	r3, [pc, #236]	; (800b83c <tcp_oos_insert_segment+0x100>)
 800b74e:	f240 421f 	movw	r2, #1055	; 0x41f
 800b752:	493b      	ldr	r1, [pc, #236]	; (800b840 <tcp_oos_insert_segment+0x104>)
 800b754:	483b      	ldr	r0, [pc, #236]	; (800b844 <tcp_oos_insert_segment+0x108>)
 800b756:	f008 fb8f 	bl	8013e78 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	899b      	ldrh	r3, [r3, #12]
 800b760:	b29b      	uxth	r3, r3
 800b762:	4618      	mov	r0, r3
 800b764:	f7fb fbf4 	bl	8006f50 <lwip_htons>
 800b768:	4603      	mov	r3, r0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b00      	cmp	r3, #0
 800b772:	d028      	beq.n	800b7c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b774:	6838      	ldr	r0, [r7, #0]
 800b776:	f7fe fa63 	bl	8009c40 <tcp_segs_free>
    next = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	e056      	b.n	800b82e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	899b      	ldrh	r3, [r3, #12]
 800b786:	b29b      	uxth	r3, r3
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fb fbe1 	bl	8006f50 <lwip_htons>
 800b78e:	4603      	mov	r3, r0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00d      	beq.n	800b7b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	899b      	ldrh	r3, [r3, #12]
 800b7a0:	b29c      	uxth	r4, r3
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	f7fb fbd4 	bl	8006f50 <lwip_htons>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	4322      	orrs	r2, r4
 800b7b2:	b292      	uxth	r2, r2
 800b7b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f7fe fa52 	bl	8009c6a <tcp_seg_free>
    while (next &&
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00e      	beq.n	800b7ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	891b      	ldrh	r3, [r3, #8]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b1d      	ldr	r3, [pc, #116]	; (800b848 <tcp_oos_insert_segment+0x10c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	8909      	ldrh	r1, [r1, #8]
 800b7e2:	440b      	add	r3, r1
 800b7e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	daca      	bge.n	800b780 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01e      	beq.n	800b82e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	891b      	ldrh	r3, [r3, #8]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	4b14      	ldr	r3, [pc, #80]	; (800b848 <tcp_oos_insert_segment+0x10c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	441a      	add	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b804:	2b00      	cmp	r3, #0
 800b806:	dd12      	ble.n	800b82e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <tcp_oos_insert_segment+0x10c>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	b29b      	uxth	r3, r3
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	b29a      	uxth	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	891b      	ldrh	r3, [r3, #8]
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	f7fc fe09 	bl	8008440 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	601a      	str	r2, [r3, #0]
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd90      	pop	{r4, r7, pc}
 800b83c:	08018770 	.word	0x08018770
 800b840:	08018a30 	.word	0x08018a30
 800b844:	080187bc 	.word	0x080187bc
 800b848:	2000c450 	.word	0x2000c450

0800b84c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b84c:	b5b0      	push	{r4, r5, r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b85a:	e03e      	b.n	800b8da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fc fffc 	bl	8008868 <pbuf_clen>
 800b870:	4603      	mov	r3, r0
 800b872:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b87a:	8a7a      	ldrh	r2, [r7, #18]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d906      	bls.n	800b88e <tcp_free_acked_segments+0x42>
 800b880:	4b2a      	ldr	r3, [pc, #168]	; (800b92c <tcp_free_acked_segments+0xe0>)
 800b882:	f240 4257 	movw	r2, #1111	; 0x457
 800b886:	492a      	ldr	r1, [pc, #168]	; (800b930 <tcp_free_acked_segments+0xe4>)
 800b888:	482a      	ldr	r0, [pc, #168]	; (800b934 <tcp_free_acked_segments+0xe8>)
 800b88a:	f008 faf5 	bl	8013e78 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b894:	8a7b      	ldrh	r3, [r7, #18]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	b29a      	uxth	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	891a      	ldrh	r2, [r3, #8]
 800b8a4:	4b24      	ldr	r3, [pc, #144]	; (800b938 <tcp_free_acked_segments+0xec>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	4b22      	ldr	r3, [pc, #136]	; (800b938 <tcp_free_acked_segments+0xec>)
 800b8ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b8b0:	6978      	ldr	r0, [r7, #20]
 800b8b2:	f7fe f9da 	bl	8009c6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00c      	beq.n	800b8da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d109      	bne.n	800b8da <tcp_free_acked_segments+0x8e>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <tcp_free_acked_segments+0x8e>
 800b8cc:	4b17      	ldr	r3, [pc, #92]	; (800b92c <tcp_free_acked_segments+0xe0>)
 800b8ce:	f240 4261 	movw	r2, #1121	; 0x461
 800b8d2:	491a      	ldr	r1, [pc, #104]	; (800b93c <tcp_free_acked_segments+0xf0>)
 800b8d4:	4817      	ldr	r0, [pc, #92]	; (800b934 <tcp_free_acked_segments+0xe8>)
 800b8d6:	f008 facf 	bl	8013e78 <iprintf>
  while (seg_list != NULL &&
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d020      	beq.n	800b922 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fb fb47 	bl	8006f7a <lwip_htonl>
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	891b      	ldrh	r3, [r3, #8]
 800b8f2:	461d      	mov	r5, r3
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	899b      	ldrh	r3, [r3, #12]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fb fb27 	bl	8006f50 <lwip_htons>
 800b902:	4603      	mov	r3, r0
 800b904:	b2db      	uxtb	r3, r3
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <tcp_free_acked_segments+0xc6>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <tcp_free_acked_segments+0xc8>
 800b912:	2300      	movs	r3, #0
 800b914:	442b      	add	r3, r5
 800b916:	18e2      	adds	r2, r4, r3
 800b918:	4b09      	ldr	r3, [pc, #36]	; (800b940 <tcp_free_acked_segments+0xf4>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b91e:	2b00      	cmp	r3, #0
 800b920:	dd9c      	ble.n	800b85c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b922:	68bb      	ldr	r3, [r7, #8]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bdb0      	pop	{r4, r5, r7, pc}
 800b92c:	08018770 	.word	0x08018770
 800b930:	08018a58 	.word	0x08018a58
 800b934:	080187bc 	.word	0x080187bc
 800b938:	2000c458 	.word	0x2000c458
 800b93c:	08018a80 	.word	0x08018a80
 800b940:	2000c454 	.word	0x2000c454

0800b944 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b944:	b5b0      	push	{r4, r5, r7, lr}
 800b946:	b094      	sub	sp, #80	; 0x50
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d106      	bne.n	800b964 <tcp_receive+0x20>
 800b956:	4b91      	ldr	r3, [pc, #580]	; (800bb9c <tcp_receive+0x258>)
 800b958:	f240 427b 	movw	r2, #1147	; 0x47b
 800b95c:	4990      	ldr	r1, [pc, #576]	; (800bba0 <tcp_receive+0x25c>)
 800b95e:	4891      	ldr	r0, [pc, #580]	; (800bba4 <tcp_receive+0x260>)
 800b960:	f008 fa8a 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	7d1b      	ldrb	r3, [r3, #20]
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d806      	bhi.n	800b97a <tcp_receive+0x36>
 800b96c:	4b8b      	ldr	r3, [pc, #556]	; (800bb9c <tcp_receive+0x258>)
 800b96e:	f240 427c 	movw	r2, #1148	; 0x47c
 800b972:	498d      	ldr	r1, [pc, #564]	; (800bba8 <tcp_receive+0x264>)
 800b974:	488b      	ldr	r0, [pc, #556]	; (800bba4 <tcp_receive+0x260>)
 800b976:	f008 fa7f 	bl	8013e78 <iprintf>

  if (flags & TCP_ACK) {
 800b97a:	4b8c      	ldr	r3, [pc, #560]	; (800bbac <tcp_receive+0x268>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	f003 0310 	and.w	r3, r3, #16
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 8264 	beq.w	800be50 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b98e:	461a      	mov	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b994:	4413      	add	r3, r2
 800b996:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b99c:	4b84      	ldr	r3, [pc, #528]	; (800bbb0 <tcp_receive+0x26c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	db1b      	blt.n	800b9de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9aa:	4b81      	ldr	r3, [pc, #516]	; (800bbb0 <tcp_receive+0x26c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d106      	bne.n	800b9c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9b6:	4b7f      	ldr	r3, [pc, #508]	; (800bbb4 <tcp_receive+0x270>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	db0e      	blt.n	800b9de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9c4:	4b7b      	ldr	r3, [pc, #492]	; (800bbb4 <tcp_receive+0x270>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d125      	bne.n	800ba18 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9cc:	4b7a      	ldr	r3, [pc, #488]	; (800bbb8 <tcp_receive+0x274>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	89db      	ldrh	r3, [r3, #14]
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d91c      	bls.n	800ba18 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b9de:	4b76      	ldr	r3, [pc, #472]	; (800bbb8 <tcp_receive+0x274>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	89db      	ldrh	r3, [r3, #14]
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d205      	bcs.n	800ba08 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ba08:	4b69      	ldr	r3, [pc, #420]	; (800bbb0 <tcp_receive+0x26c>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ba10:	4b68      	ldr	r3, [pc, #416]	; (800bbb4 <tcp_receive+0x270>)
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ba18:	4b66      	ldr	r3, [pc, #408]	; (800bbb4 <tcp_receive+0x270>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dc58      	bgt.n	800bad8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ba26:	4b65      	ldr	r3, [pc, #404]	; (800bbbc <tcp_receive+0x278>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d14b      	bne.n	800bac6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ba38:	4413      	add	r3, r2
 800ba3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d142      	bne.n	800bac6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	db3d      	blt.n	800bac6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba4e:	4b59      	ldr	r3, [pc, #356]	; (800bbb4 <tcp_receive+0x270>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d137      	bne.n	800bac6 <tcp_receive+0x182>
              found_dupack = 1;
 800ba56:	2301      	movs	r3, #1
 800ba58:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba60:	2bff      	cmp	r3, #255	; 0xff
 800ba62:	d007      	beq.n	800ba74 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	b2da      	uxtb	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d91b      	bls.n	800bab6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba88:	4413      	add	r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d30a      	bcc.n	800baac <tcp_receive+0x168>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baa0:	4413      	add	r3, r2
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800baaa:	e004      	b.n	800bab6 <tcp_receive+0x172>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800babc:	2b02      	cmp	r3, #2
 800babe:	d902      	bls.n	800bac6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 feed 	bl	800d8a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f040 8161 	bne.w	800bd90 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bad6:	e15b      	b.n	800bd90 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bad8:	4b36      	ldr	r3, [pc, #216]	; (800bbb4 <tcp_receive+0x270>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f2c0 814e 	blt.w	800bd86 <tcp_receive+0x442>
 800baea:	4b32      	ldr	r3, [pc, #200]	; (800bbb4 <tcp_receive+0x270>)
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f300 8146 	bgt.w	800bd86 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	8b5b      	ldrh	r3, [r3, #26]
 800bafe:	f003 0304 	and.w	r3, r3, #4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d010      	beq.n	800bb28 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8b5b      	ldrh	r3, [r3, #26]
 800bb0a:	f023 0304 	bic.w	r3, r3, #4
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb36:	10db      	asrs	r3, r3, #3
 800bb38:	b21b      	sxth	r3, r3
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4413      	add	r3, r2
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	b21a      	sxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bb50:	4b18      	ldr	r3, [pc, #96]	; (800bbb4 <tcp_receive+0x270>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bb68:	4b12      	ldr	r3, [pc, #72]	; (800bbb4 <tcp_receive+0x270>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	7d1b      	ldrb	r3, [r3, #20]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	f240 8097 	bls.w	800bca8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d245      	bcs.n	800bc16 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	8b5b      	ldrh	r3, [r3, #26]
 800bb8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d014      	beq.n	800bbc0 <tcp_receive+0x27c>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e013      	b.n	800bbc2 <tcp_receive+0x27e>
 800bb9a:	bf00      	nop
 800bb9c:	08018770 	.word	0x08018770
 800bba0:	08018aa0 	.word	0x08018aa0
 800bba4:	080187bc 	.word	0x080187bc
 800bba8:	08018abc 	.word	0x08018abc
 800bbac:	2000c45c 	.word	0x2000c45c
 800bbb0:	2000c450 	.word	0x2000c450
 800bbb4:	2000c454 	.word	0x2000c454
 800bbb8:	2000c440 	.word	0x2000c440
 800bbbc:	2000c45a 	.word	0x2000c45a
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bbc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbd0:	fb12 f303 	smulbb	r3, r2, r3
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	bf28      	it	cs
 800bbdc:	4613      	movcs	r3, r2
 800bbde:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bbe8:	4413      	add	r3, r2
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d309      	bcc.n	800bc0a <tcp_receive+0x2c6>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bbfe:	4413      	add	r3, r2
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc08:	e04e      	b.n	800bca8 <tcp_receive+0x364>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc14:	e048      	b.n	800bca8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc1e:	4413      	add	r3, r2
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d309      	bcc.n	800bc40 <tcp_receive+0x2fc>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc34:	4413      	add	r3, r2
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc3e:	e004      	b.n	800bc4a <tcp_receive+0x306>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d326      	bcc.n	800bca8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc7a:	4413      	add	r3, r2
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d30a      	bcc.n	800bc9e <tcp_receive+0x35a>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc92:	4413      	add	r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc9c:	e004      	b.n	800bca8 <tcp_receive+0x364>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb0:	4a98      	ldr	r2, [pc, #608]	; (800bf14 <tcp_receive+0x5d0>)
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fdca 	bl	800b84c <tcp_free_acked_segments>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc6:	4a94      	ldr	r2, [pc, #592]	; (800bf18 <tcp_receive+0x5d4>)
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff fdbf 	bl	800b84c <tcp_free_acked_segments>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d104      	bne.n	800bce6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bce2:	861a      	strh	r2, [r3, #48]	; 0x30
 800bce4:	e002      	b.n	800bcec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d103      	bne.n	800bd02 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bd08:	4b84      	ldr	r3, [pc, #528]	; (800bf1c <tcp_receive+0x5d8>)
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	8b5b      	ldrh	r3, [r3, #26]
 800bd1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d035      	beq.n	800bd8e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d118      	bne.n	800bd5c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00c      	beq.n	800bd4c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fb f91b 	bl	8006f7a <lwip_htonl>
 800bd44:	4603      	mov	r3, r0
 800bd46:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dc20      	bgt.n	800bd8e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	8b5b      	ldrh	r3, [r3, #26]
 800bd50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd5a:	e018      	b.n	800bd8e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fb f906 	bl	8006f7a <lwip_htonl>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	1ae3      	subs	r3, r4, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	dc0b      	bgt.n	800bd8e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	8b5b      	ldrh	r3, [r3, #26]
 800bd7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd84:	e003      	b.n	800bd8e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 ff76 	bl	800dc78 <tcp_send_empty_ack>
 800bd8c:	e000      	b.n	800bd90 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd8e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d05b      	beq.n	800be50 <tcp_receive+0x50c>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd9c:	4b60      	ldr	r3, [pc, #384]	; (800bf20 <tcp_receive+0x5dc>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	da54      	bge.n	800be50 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bda6:	4b5f      	ldr	r3, [pc, #380]	; (800bf24 <tcp_receive+0x5e0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bdba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bdc4:	10db      	asrs	r3, r3, #3
 800bdc6:	b21b      	sxth	r3, r3
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bdde:	4413      	add	r3, r2
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	b21a      	sxth	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bde8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	da05      	bge.n	800bdfc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bdf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bdf4:	425b      	negs	r3, r3
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bdfc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be06:	109b      	asrs	r3, r3, #2
 800be08:	b21b      	sxth	r3, r3
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	b29b      	uxth	r3, r3
 800be10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be20:	4413      	add	r3, r2
 800be22:	b29b      	uxth	r3, r3
 800be24:	b21a      	sxth	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be30:	10db      	asrs	r3, r3, #3
 800be32:	b21b      	sxth	r3, r3
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	4413      	add	r3, r2
 800be40:	b29b      	uxth	r3, r3
 800be42:	b21a      	sxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800be50:	4b35      	ldr	r3, [pc, #212]	; (800bf28 <tcp_receive+0x5e4>)
 800be52:	881b      	ldrh	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 84e2 	beq.w	800c81e <tcp_receive+0xeda>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	7d1b      	ldrb	r3, [r3, #20]
 800be5e:	2b06      	cmp	r3, #6
 800be60:	f200 84dd 	bhi.w	800c81e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be68:	4b30      	ldr	r3, [pc, #192]	; (800bf2c <tcp_receive+0x5e8>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	3b01      	subs	r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	f2c0 808f 	blt.w	800bf94 <tcp_receive+0x650>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be7a:	4b2b      	ldr	r3, [pc, #172]	; (800bf28 <tcp_receive+0x5e4>)
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	4619      	mov	r1, r3
 800be80:	4b2a      	ldr	r3, [pc, #168]	; (800bf2c <tcp_receive+0x5e8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	440b      	add	r3, r1
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	3301      	adds	r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f300 8082 	bgt.w	800bf94 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800be90:	4b27      	ldr	r3, [pc, #156]	; (800bf30 <tcp_receive+0x5ec>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be9a:	4b24      	ldr	r3, [pc, #144]	; (800bf2c <tcp_receive+0x5e8>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bea2:	4b23      	ldr	r3, [pc, #140]	; (800bf30 <tcp_receive+0x5ec>)
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <tcp_receive+0x574>
 800beaa:	4b22      	ldr	r3, [pc, #136]	; (800bf34 <tcp_receive+0x5f0>)
 800beac:	f240 5294 	movw	r2, #1428	; 0x594
 800beb0:	4921      	ldr	r1, [pc, #132]	; (800bf38 <tcp_receive+0x5f4>)
 800beb2:	4822      	ldr	r0, [pc, #136]	; (800bf3c <tcp_receive+0x5f8>)
 800beb4:	f007 ffe0 	bl	8013e78 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d906      	bls.n	800bed0 <tcp_receive+0x58c>
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <tcp_receive+0x5f0>)
 800bec4:	f240 5295 	movw	r2, #1429	; 0x595
 800bec8:	491d      	ldr	r1, [pc, #116]	; (800bf40 <tcp_receive+0x5fc>)
 800beca:	481c      	ldr	r0, [pc, #112]	; (800bf3c <tcp_receive+0x5f8>)
 800becc:	f007 ffd4 	bl	8013e78 <iprintf>
      off = (u16_t)off32;
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bed6:	4b16      	ldr	r3, [pc, #88]	; (800bf30 <tcp_receive+0x5ec>)
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	891b      	ldrh	r3, [r3, #8]
 800bedc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d906      	bls.n	800bef2 <tcp_receive+0x5ae>
 800bee4:	4b13      	ldr	r3, [pc, #76]	; (800bf34 <tcp_receive+0x5f0>)
 800bee6:	f240 5297 	movw	r2, #1431	; 0x597
 800beea:	4916      	ldr	r1, [pc, #88]	; (800bf44 <tcp_receive+0x600>)
 800beec:	4813      	ldr	r0, [pc, #76]	; (800bf3c <tcp_receive+0x5f8>)
 800beee:	f007 ffc3 	bl	8013e78 <iprintf>
      inseg.len -= off;
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <tcp_receive+0x5ec>)
 800bef4:	891a      	ldrh	r2, [r3, #8]
 800bef6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	b29a      	uxth	r2, r3
 800befe:	4b0c      	ldr	r3, [pc, #48]	; (800bf30 <tcp_receive+0x5ec>)
 800bf00:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <tcp_receive+0x5ec>)
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	891a      	ldrh	r2, [r3, #8]
 800bf08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bf10:	e02a      	b.n	800bf68 <tcp_receive+0x624>
 800bf12:	bf00      	nop
 800bf14:	08018ad8 	.word	0x08018ad8
 800bf18:	08018ae0 	.word	0x08018ae0
 800bf1c:	2000c458 	.word	0x2000c458
 800bf20:	2000c454 	.word	0x2000c454
 800bf24:	2000c418 	.word	0x2000c418
 800bf28:	2000c45a 	.word	0x2000c45a
 800bf2c:	2000c450 	.word	0x2000c450
 800bf30:	2000c430 	.word	0x2000c430
 800bf34:	08018770 	.word	0x08018770
 800bf38:	08018ae8 	.word	0x08018ae8
 800bf3c:	080187bc 	.word	0x080187bc
 800bf40:	08018af8 	.word	0x08018af8
 800bf44:	08018b08 	.word	0x08018b08
        off -= p->len;
 800bf48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf4a:	895b      	ldrh	r3, [r3, #10]
 800bf4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bf56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf5a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bf5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf5e:	2200      	movs	r2, #0
 800bf60:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bf62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bf68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf6a:	895b      	ldrh	r3, [r3, #10]
 800bf6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d8e9      	bhi.n	800bf48 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bf74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf7c:	f7fc fb60 	bl	8008640 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	4a91      	ldr	r2, [pc, #580]	; (800c1cc <tcp_receive+0x888>)
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	4b91      	ldr	r3, [pc, #580]	; (800c1d0 <tcp_receive+0x88c>)
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	4a8f      	ldr	r2, [pc, #572]	; (800c1cc <tcp_receive+0x888>)
 800bf8e:	6812      	ldr	r2, [r2, #0]
 800bf90:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf92:	e00d      	b.n	800bfb0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bf94:	4b8d      	ldr	r3, [pc, #564]	; (800c1cc <tcp_receive+0x888>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	da06      	bge.n	800bfb0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	8b5b      	ldrh	r3, [r3, #26]
 800bfa6:	f043 0302 	orr.w	r3, r3, #2
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bfb0:	4b86      	ldr	r3, [pc, #536]	; (800c1cc <tcp_receive+0x888>)
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f2c0 842a 	blt.w	800c814 <tcp_receive+0xed0>
 800bfc0:	4b82      	ldr	r3, [pc, #520]	; (800c1cc <tcp_receive+0x888>)
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bfcc:	440b      	add	r3, r1
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f300 841e 	bgt.w	800c814 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfdc:	4b7b      	ldr	r3, [pc, #492]	; (800c1cc <tcp_receive+0x888>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	f040 829a 	bne.w	800c51a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bfe6:	4b7a      	ldr	r3, [pc, #488]	; (800c1d0 <tcp_receive+0x88c>)
 800bfe8:	891c      	ldrh	r4, [r3, #8]
 800bfea:	4b79      	ldr	r3, [pc, #484]	; (800c1d0 <tcp_receive+0x88c>)
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	899b      	ldrh	r3, [r3, #12]
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fa ffac 	bl	8006f50 <lwip_htons>
 800bff8:	4603      	mov	r3, r0
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	f003 0303 	and.w	r3, r3, #3
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <tcp_receive+0x6c4>
 800c004:	2301      	movs	r3, #1
 800c006:	e000      	b.n	800c00a <tcp_receive+0x6c6>
 800c008:	2300      	movs	r3, #0
 800c00a:	4423      	add	r3, r4
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	4b71      	ldr	r3, [pc, #452]	; (800c1d4 <tcp_receive+0x890>)
 800c010:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c016:	4b6f      	ldr	r3, [pc, #444]	; (800c1d4 <tcp_receive+0x890>)
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d275      	bcs.n	800c10a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c01e:	4b6c      	ldr	r3, [pc, #432]	; (800c1d0 <tcp_receive+0x88c>)
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	899b      	ldrh	r3, [r3, #12]
 800c024:	b29b      	uxth	r3, r3
 800c026:	4618      	mov	r0, r3
 800c028:	f7fa ff92 	bl	8006f50 <lwip_htons>
 800c02c:	4603      	mov	r3, r0
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01f      	beq.n	800c078 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c038:	4b65      	ldr	r3, [pc, #404]	; (800c1d0 <tcp_receive+0x88c>)
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	899b      	ldrh	r3, [r3, #12]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	b21b      	sxth	r3, r3
 800c042:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c046:	b21c      	sxth	r4, r3
 800c048:	4b61      	ldr	r3, [pc, #388]	; (800c1d0 <tcp_receive+0x88c>)
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	899b      	ldrh	r3, [r3, #12]
 800c04e:	b29b      	uxth	r3, r3
 800c050:	4618      	mov	r0, r3
 800c052:	f7fa ff7d 	bl	8006f50 <lwip_htons>
 800c056:	4603      	mov	r3, r0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c060:	b29b      	uxth	r3, r3
 800c062:	4618      	mov	r0, r3
 800c064:	f7fa ff74 	bl	8006f50 <lwip_htons>
 800c068:	4603      	mov	r3, r0
 800c06a:	b21b      	sxth	r3, r3
 800c06c:	4323      	orrs	r3, r4
 800c06e:	b21a      	sxth	r2, r3
 800c070:	4b57      	ldr	r3, [pc, #348]	; (800c1d0 <tcp_receive+0x88c>)
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	b292      	uxth	r2, r2
 800c076:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c07c:	4b54      	ldr	r3, [pc, #336]	; (800c1d0 <tcp_receive+0x88c>)
 800c07e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c080:	4b53      	ldr	r3, [pc, #332]	; (800c1d0 <tcp_receive+0x88c>)
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	899b      	ldrh	r3, [r3, #12]
 800c086:	b29b      	uxth	r3, r3
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fa ff61 	bl	8006f50 <lwip_htons>
 800c08e:	4603      	mov	r3, r0
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 0302 	and.w	r3, r3, #2
 800c096:	2b00      	cmp	r3, #0
 800c098:	d005      	beq.n	800c0a6 <tcp_receive+0x762>
            inseg.len -= 1;
 800c09a:	4b4d      	ldr	r3, [pc, #308]	; (800c1d0 <tcp_receive+0x88c>)
 800c09c:	891b      	ldrh	r3, [r3, #8]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	4b4b      	ldr	r3, [pc, #300]	; (800c1d0 <tcp_receive+0x88c>)
 800c0a4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c0a6:	4b4a      	ldr	r3, [pc, #296]	; (800c1d0 <tcp_receive+0x88c>)
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	4a49      	ldr	r2, [pc, #292]	; (800c1d0 <tcp_receive+0x88c>)
 800c0ac:	8912      	ldrh	r2, [r2, #8]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fc f9c5 	bl	8008440 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c0b6:	4b46      	ldr	r3, [pc, #280]	; (800c1d0 <tcp_receive+0x88c>)
 800c0b8:	891c      	ldrh	r4, [r3, #8]
 800c0ba:	4b45      	ldr	r3, [pc, #276]	; (800c1d0 <tcp_receive+0x88c>)
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	899b      	ldrh	r3, [r3, #12]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fa ff44 	bl	8006f50 <lwip_htons>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	f003 0303 	and.w	r3, r3, #3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d001      	beq.n	800c0d8 <tcp_receive+0x794>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e000      	b.n	800c0da <tcp_receive+0x796>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4423      	add	r3, r4
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	4b3d      	ldr	r3, [pc, #244]	; (800c1d4 <tcp_receive+0x890>)
 800c0e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c0e2:	4b3c      	ldr	r3, [pc, #240]	; (800c1d4 <tcp_receive+0x890>)
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	4b38      	ldr	r3, [pc, #224]	; (800c1cc <tcp_receive+0x888>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	441a      	add	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0f6:	440b      	add	r3, r1
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d006      	beq.n	800c10a <tcp_receive+0x7c6>
 800c0fc:	4b36      	ldr	r3, [pc, #216]	; (800c1d8 <tcp_receive+0x894>)
 800c0fe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c102:	4936      	ldr	r1, [pc, #216]	; (800c1dc <tcp_receive+0x898>)
 800c104:	4836      	ldr	r0, [pc, #216]	; (800c1e0 <tcp_receive+0x89c>)
 800c106:	f007 feb7 	bl	8013e78 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 80e7 	beq.w	800c2e2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c114:	4b2e      	ldr	r3, [pc, #184]	; (800c1d0 <tcp_receive+0x88c>)
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	899b      	ldrh	r3, [r3, #12]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fa ff17 	bl	8006f50 <lwip_htons>
 800c122:	4603      	mov	r3, r0
 800c124:	b2db      	uxtb	r3, r3
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d010      	beq.n	800c150 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c12e:	e00a      	b.n	800c146 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c134:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f7fd fd92 	bl	8009c6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1f0      	bne.n	800c130 <tcp_receive+0x7ec>
 800c14e:	e0c8      	b.n	800c2e2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c156:	e052      	b.n	800c1fe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	899b      	ldrh	r3, [r3, #12]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4618      	mov	r0, r3
 800c162:	f7fa fef5 	bl	8006f50 <lwip_htons>
 800c166:	4603      	mov	r3, r0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d03d      	beq.n	800c1ee <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c172:	4b17      	ldr	r3, [pc, #92]	; (800c1d0 <tcp_receive+0x88c>)
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	899b      	ldrh	r3, [r3, #12]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fa fee8 	bl	8006f50 <lwip_htons>
 800c180:	4603      	mov	r3, r0
 800c182:	b2db      	uxtb	r3, r3
 800c184:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d130      	bne.n	800c1ee <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <tcp_receive+0x88c>)
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	899b      	ldrh	r3, [r3, #12]
 800c192:	b29c      	uxth	r4, r3
 800c194:	2001      	movs	r0, #1
 800c196:	f7fa fedb 	bl	8006f50 <lwip_htons>
 800c19a:	4603      	mov	r3, r0
 800c19c:	461a      	mov	r2, r3
 800c19e:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <tcp_receive+0x88c>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	4322      	orrs	r2, r4
 800c1a4:	b292      	uxth	r2, r2
 800c1a6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c1a8:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <tcp_receive+0x88c>)
 800c1aa:	891c      	ldrh	r4, [r3, #8]
 800c1ac:	4b08      	ldr	r3, [pc, #32]	; (800c1d0 <tcp_receive+0x88c>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	899b      	ldrh	r3, [r3, #12]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fa fecb 	bl	8006f50 <lwip_htons>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f003 0303 	and.w	r3, r3, #3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00e      	beq.n	800c1e4 <tcp_receive+0x8a0>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e00d      	b.n	800c1e6 <tcp_receive+0x8a2>
 800c1ca:	bf00      	nop
 800c1cc:	2000c450 	.word	0x2000c450
 800c1d0:	2000c430 	.word	0x2000c430
 800c1d4:	2000c45a 	.word	0x2000c45a
 800c1d8:	08018770 	.word	0x08018770
 800c1dc:	08018b18 	.word	0x08018b18
 800c1e0:	080187bc 	.word	0x080187bc
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4423      	add	r3, r4
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	4b98      	ldr	r3, [pc, #608]	; (800c44c <tcp_receive+0xb08>)
 800c1ec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c1f8:	6938      	ldr	r0, [r7, #16]
 800c1fa:	f7fd fd36 	bl	8009c6a <tcp_seg_free>
            while (next &&
 800c1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00e      	beq.n	800c222 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c204:	4b91      	ldr	r3, [pc, #580]	; (800c44c <tcp_receive+0xb08>)
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	461a      	mov	r2, r3
 800c20a:	4b91      	ldr	r3, [pc, #580]	; (800c450 <tcp_receive+0xb0c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	441a      	add	r2, r3
 800c210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c218:	8909      	ldrh	r1, [r1, #8]
 800c21a:	440b      	add	r3, r1
 800c21c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da9a      	bge.n	800c158 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d059      	beq.n	800c2dc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c228:	4b88      	ldr	r3, [pc, #544]	; (800c44c <tcp_receive+0xb08>)
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	461a      	mov	r2, r3
 800c22e:	4b88      	ldr	r3, [pc, #544]	; (800c450 <tcp_receive+0xb0c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	441a      	add	r2, r3
 800c234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dd4d      	ble.n	800c2dc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	b29a      	uxth	r2, r3
 800c248:	4b81      	ldr	r3, [pc, #516]	; (800c450 <tcp_receive+0xb0c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	b29a      	uxth	r2, r3
 800c252:	4b80      	ldr	r3, [pc, #512]	; (800c454 <tcp_receive+0xb10>)
 800c254:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c256:	4b7f      	ldr	r3, [pc, #508]	; (800c454 <tcp_receive+0xb10>)
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	899b      	ldrh	r3, [r3, #12]
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fa fe76 	bl	8006f50 <lwip_htons>
 800c264:	4603      	mov	r3, r0
 800c266:	b2db      	uxtb	r3, r3
 800c268:	f003 0302 	and.w	r3, r3, #2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d005      	beq.n	800c27c <tcp_receive+0x938>
                inseg.len -= 1;
 800c270:	4b78      	ldr	r3, [pc, #480]	; (800c454 <tcp_receive+0xb10>)
 800c272:	891b      	ldrh	r3, [r3, #8]
 800c274:	3b01      	subs	r3, #1
 800c276:	b29a      	uxth	r2, r3
 800c278:	4b76      	ldr	r3, [pc, #472]	; (800c454 <tcp_receive+0xb10>)
 800c27a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c27c:	4b75      	ldr	r3, [pc, #468]	; (800c454 <tcp_receive+0xb10>)
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	4a74      	ldr	r2, [pc, #464]	; (800c454 <tcp_receive+0xb10>)
 800c282:	8912      	ldrh	r2, [r2, #8]
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fc f8da 	bl	8008440 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c28c:	4b71      	ldr	r3, [pc, #452]	; (800c454 <tcp_receive+0xb10>)
 800c28e:	891c      	ldrh	r4, [r3, #8]
 800c290:	4b70      	ldr	r3, [pc, #448]	; (800c454 <tcp_receive+0xb10>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	899b      	ldrh	r3, [r3, #12]
 800c296:	b29b      	uxth	r3, r3
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fa fe59 	bl	8006f50 <lwip_htons>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	f003 0303 	and.w	r3, r3, #3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <tcp_receive+0x96a>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <tcp_receive+0x96c>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	4423      	add	r3, r4
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	4b65      	ldr	r3, [pc, #404]	; (800c44c <tcp_receive+0xb08>)
 800c2b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c2b8:	4b64      	ldr	r3, [pc, #400]	; (800c44c <tcp_receive+0xb08>)
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	4b64      	ldr	r3, [pc, #400]	; (800c450 <tcp_receive+0xb0c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	441a      	add	r2, r3
 800c2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d006      	beq.n	800c2dc <tcp_receive+0x998>
 800c2ce:	4b62      	ldr	r3, [pc, #392]	; (800c458 <tcp_receive+0xb14>)
 800c2d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c2d4:	4961      	ldr	r1, [pc, #388]	; (800c45c <tcp_receive+0xb18>)
 800c2d6:	4862      	ldr	r0, [pc, #392]	; (800c460 <tcp_receive+0xb1c>)
 800c2d8:	f007 fdce 	bl	8013e78 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c2e2:	4b5a      	ldr	r3, [pc, #360]	; (800c44c <tcp_receive+0xb08>)
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4b59      	ldr	r3, [pc, #356]	; (800c450 <tcp_receive+0xb0c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	441a      	add	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c2f6:	4b55      	ldr	r3, [pc, #340]	; (800c44c <tcp_receive+0xb08>)
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d206      	bcs.n	800c30c <tcp_receive+0x9c8>
 800c2fe:	4b56      	ldr	r3, [pc, #344]	; (800c458 <tcp_receive+0xb14>)
 800c300:	f240 6207 	movw	r2, #1543	; 0x607
 800c304:	4957      	ldr	r1, [pc, #348]	; (800c464 <tcp_receive+0xb20>)
 800c306:	4856      	ldr	r0, [pc, #344]	; (800c460 <tcp_receive+0xb1c>)
 800c308:	f007 fdb6 	bl	8013e78 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c310:	4b4e      	ldr	r3, [pc, #312]	; (800c44c <tcp_receive+0xb08>)
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7fc ffc5 	bl	80092ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c322:	4b4c      	ldr	r3, [pc, #304]	; (800c454 <tcp_receive+0xb10>)
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	891b      	ldrh	r3, [r3, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d006      	beq.n	800c33a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c32c:	4b49      	ldr	r3, [pc, #292]	; (800c454 <tcp_receive+0xb10>)
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4a4d      	ldr	r2, [pc, #308]	; (800c468 <tcp_receive+0xb24>)
 800c332:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c334:	4b47      	ldr	r3, [pc, #284]	; (800c454 <tcp_receive+0xb10>)
 800c336:	2200      	movs	r2, #0
 800c338:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c33a:	4b46      	ldr	r3, [pc, #280]	; (800c454 <tcp_receive+0xb10>)
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	899b      	ldrh	r3, [r3, #12]
 800c340:	b29b      	uxth	r3, r3
 800c342:	4618      	mov	r0, r3
 800c344:	f7fa fe04 	bl	8006f50 <lwip_htons>
 800c348:	4603      	mov	r3, r0
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 80b8 	beq.w	800c4c6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c356:	4b45      	ldr	r3, [pc, #276]	; (800c46c <tcp_receive+0xb28>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	f043 0320 	orr.w	r3, r3, #32
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	4b42      	ldr	r3, [pc, #264]	; (800c46c <tcp_receive+0xb28>)
 800c362:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c364:	e0af      	b.n	800c4c6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	4a36      	ldr	r2, [pc, #216]	; (800c450 <tcp_receive+0xb0c>)
 800c376:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	891b      	ldrh	r3, [r3, #8]
 800c37c:	461c      	mov	r4, r3
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	899b      	ldrh	r3, [r3, #12]
 800c384:	b29b      	uxth	r3, r3
 800c386:	4618      	mov	r0, r3
 800c388:	f7fa fde2 	bl	8006f50 <lwip_htons>
 800c38c:	4603      	mov	r3, r0
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	f003 0303 	and.w	r3, r3, #3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <tcp_receive+0xa58>
 800c398:	2301      	movs	r3, #1
 800c39a:	e000      	b.n	800c39e <tcp_receive+0xa5a>
 800c39c:	2300      	movs	r3, #0
 800c39e:	191a      	adds	r2, r3, r4
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ae:	461c      	mov	r4, r3
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	891b      	ldrh	r3, [r3, #8]
 800c3b4:	461d      	mov	r5, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	899b      	ldrh	r3, [r3, #12]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fa fdc6 	bl	8006f50 <lwip_htons>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	f003 0303 	and.w	r3, r3, #3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <tcp_receive+0xa90>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e000      	b.n	800c3d6 <tcp_receive+0xa92>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	442b      	add	r3, r5
 800c3d8:	429c      	cmp	r4, r3
 800c3da:	d206      	bcs.n	800c3ea <tcp_receive+0xaa6>
 800c3dc:	4b1e      	ldr	r3, [pc, #120]	; (800c458 <tcp_receive+0xb14>)
 800c3de:	f240 622b 	movw	r2, #1579	; 0x62b
 800c3e2:	4923      	ldr	r1, [pc, #140]	; (800c470 <tcp_receive+0xb2c>)
 800c3e4:	481e      	ldr	r0, [pc, #120]	; (800c460 <tcp_receive+0xb1c>)
 800c3e6:	f007 fd47 	bl	8013e78 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	891b      	ldrh	r3, [r3, #8]
 800c3ee:	461c      	mov	r4, r3
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	899b      	ldrh	r3, [r3, #12]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fa fda9 	bl	8006f50 <lwip_htons>
 800c3fe:	4603      	mov	r3, r0
 800c400:	b2db      	uxtb	r3, r3
 800c402:	f003 0303 	and.w	r3, r3, #3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <tcp_receive+0xaca>
 800c40a:	2301      	movs	r3, #1
 800c40c:	e000      	b.n	800c410 <tcp_receive+0xacc>
 800c40e:	2300      	movs	r3, #0
 800c410:	1919      	adds	r1, r3, r4
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c416:	b28b      	uxth	r3, r1
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7fc ff43 	bl	80092ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	891b      	ldrh	r3, [r3, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d028      	beq.n	800c482 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c430:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <tcp_receive+0xb24>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01d      	beq.n	800c474 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c438:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <tcp_receive+0xb24>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	4619      	mov	r1, r3
 800c442:	4610      	mov	r0, r2
 800c444:	f7fc fa50 	bl	80088e8 <pbuf_cat>
 800c448:	e018      	b.n	800c47c <tcp_receive+0xb38>
 800c44a:	bf00      	nop
 800c44c:	2000c45a 	.word	0x2000c45a
 800c450:	2000c450 	.word	0x2000c450
 800c454:	2000c430 	.word	0x2000c430
 800c458:	08018770 	.word	0x08018770
 800c45c:	08018b50 	.word	0x08018b50
 800c460:	080187bc 	.word	0x080187bc
 800c464:	08018b8c 	.word	0x08018b8c
 800c468:	2000c460 	.word	0x2000c460
 800c46c:	2000c45d 	.word	0x2000c45d
 800c470:	08018bac 	.word	0x08018bac
            } else {
              recv_data = cseg->p;
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	4a70      	ldr	r2, [pc, #448]	; (800c63c <tcp_receive+0xcf8>)
 800c47a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2200      	movs	r2, #0
 800c480:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	899b      	ldrh	r3, [r3, #12]
 800c488:	b29b      	uxth	r3, r3
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fa fd60 	bl	8006f50 <lwip_htons>
 800c490:	4603      	mov	r3, r0
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00d      	beq.n	800c4b8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c49c:	4b68      	ldr	r3, [pc, #416]	; (800c640 <tcp_receive+0xcfc>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	f043 0320 	orr.w	r3, r3, #32
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	4b66      	ldr	r3, [pc, #408]	; (800c640 <tcp_receive+0xcfc>)
 800c4a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7d1b      	ldrb	r3, [r3, #20]
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	d102      	bne.n	800c4b8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2207      	movs	r2, #7
 800c4b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c4c0:	68b8      	ldr	r0, [r7, #8]
 800c4c2:	f7fd fbd2 	bl	8009c6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d008      	beq.n	800c4e0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	f43f af43 	beq.w	800c366 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8b5b      	ldrh	r3, [r3, #26]
 800c4e4:	f003 0301 	and.w	r3, r3, #1
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00e      	beq.n	800c50a <tcp_receive+0xbc6>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	8b5b      	ldrh	r3, [r3, #26]
 800c4f0:	f023 0301 	bic.w	r3, r3, #1
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	835a      	strh	r2, [r3, #26]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	8b5b      	ldrh	r3, [r3, #26]
 800c4fe:	f043 0302 	orr.w	r3, r3, #2
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c508:	e188      	b.n	800c81c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	8b5b      	ldrh	r3, [r3, #26]
 800c50e:	f043 0301 	orr.w	r3, r3, #1
 800c512:	b29a      	uxth	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c518:	e180      	b.n	800c81c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d106      	bne.n	800c530 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c522:	4848      	ldr	r0, [pc, #288]	; (800c644 <tcp_receive+0xd00>)
 800c524:	f7fd fbba 	bl	8009c9c <tcp_seg_copy>
 800c528:	4602      	mov	r2, r0
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	675a      	str	r2, [r3, #116]	; 0x74
 800c52e:	e16d      	b.n	800c80c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c530:	2300      	movs	r3, #0
 800c532:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c538:	63bb      	str	r3, [r7, #56]	; 0x38
 800c53a:	e157      	b.n	800c7ec <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	685a      	ldr	r2, [r3, #4]
 800c542:	4b41      	ldr	r3, [pc, #260]	; (800c648 <tcp_receive+0xd04>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d11d      	bne.n	800c586 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c54a:	4b3e      	ldr	r3, [pc, #248]	; (800c644 <tcp_receive+0xd00>)
 800c54c:	891a      	ldrh	r2, [r3, #8]
 800c54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c550:	891b      	ldrh	r3, [r3, #8]
 800c552:	429a      	cmp	r2, r3
 800c554:	f240 814f 	bls.w	800c7f6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c558:	483a      	ldr	r0, [pc, #232]	; (800c644 <tcp_receive+0xd00>)
 800c55a:	f7fd fb9f 	bl	8009c9c <tcp_seg_copy>
 800c55e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 8149 	beq.w	800c7fa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	e002      	b.n	800c57c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c57c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c57e:	6978      	ldr	r0, [r7, #20]
 800c580:	f7ff f8dc 	bl	800b73c <tcp_oos_insert_segment>
                }
                break;
 800c584:	e139      	b.n	800c7fa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d117      	bne.n	800c5bc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c58c:	4b2e      	ldr	r3, [pc, #184]	; (800c648 <tcp_receive+0xd04>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	da57      	bge.n	800c64c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c59c:	4829      	ldr	r0, [pc, #164]	; (800c644 <tcp_receive+0xd00>)
 800c59e:	f7fd fb7d 	bl	8009c9c <tcp_seg_copy>
 800c5a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f000 8129 	beq.w	800c7fe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c5b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5b4:	69b8      	ldr	r0, [r7, #24]
 800c5b6:	f7ff f8c1 	bl	800b73c <tcp_oos_insert_segment>
                  }
                  break;
 800c5ba:	e120      	b.n	800c7fe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c5bc:	4b22      	ldr	r3, [pc, #136]	; (800c648 <tcp_receive+0xd04>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	db3e      	blt.n	800c64c <tcp_receive+0xd08>
 800c5ce:	4b1e      	ldr	r3, [pc, #120]	; (800c648 <tcp_receive+0xd04>)
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	3301      	adds	r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dc35      	bgt.n	800c64c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c5e0:	4818      	ldr	r0, [pc, #96]	; (800c644 <tcp_receive+0xd00>)
 800c5e2:	f7fd fb5b 	bl	8009c9c <tcp_seg_copy>
 800c5e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 8109 	beq.w	800c802 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f8:	8912      	ldrh	r2, [r2, #8]
 800c5fa:	441a      	add	r2, r3
 800c5fc:	4b12      	ldr	r3, [pc, #72]	; (800c648 <tcp_receive+0xd04>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	dd12      	ble.n	800c62c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c606:	4b10      	ldr	r3, [pc, #64]	; (800c648 <tcp_receive+0xd04>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	b29b      	uxth	r3, r3
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	b29a      	uxth	r2, r3
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	891b      	ldrh	r3, [r3, #8]
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f7fb ff0a 	bl	8008440 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c634:	69f8      	ldr	r0, [r7, #28]
 800c636:	f7ff f881 	bl	800b73c <tcp_oos_insert_segment>
                  }
                  break;
 800c63a:	e0e2      	b.n	800c802 <tcp_receive+0xebe>
 800c63c:	2000c460 	.word	0x2000c460
 800c640:	2000c45d 	.word	0x2000c45d
 800c644:	2000c430 	.word	0x2000c430
 800c648:	2000c450 	.word	0x2000c450
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	f040 80c6 	bne.w	800c7e6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c65a:	4b80      	ldr	r3, [pc, #512]	; (800c85c <tcp_receive+0xf18>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c666:	2b00      	cmp	r3, #0
 800c668:	f340 80bd 	ble.w	800c7e6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	899b      	ldrh	r3, [r3, #12]
 800c672:	b29b      	uxth	r3, r3
 800c674:	4618      	mov	r0, r3
 800c676:	f7fa fc6b 	bl	8006f50 <lwip_htons>
 800c67a:	4603      	mov	r3, r0
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	f040 80bf 	bne.w	800c806 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c688:	4875      	ldr	r0, [pc, #468]	; (800c860 <tcp_receive+0xf1c>)
 800c68a:	f7fd fb07 	bl	8009c9c <tcp_seg_copy>
 800c68e:	4602      	mov	r2, r0
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 80b6 	beq.w	800c80a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a6:	8912      	ldrh	r2, [r2, #8]
 800c6a8:	441a      	add	r2, r3
 800c6aa:	4b6c      	ldr	r3, [pc, #432]	; (800c85c <tcp_receive+0xf18>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	dd12      	ble.n	800c6da <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c6b4:	4b69      	ldr	r3, [pc, #420]	; (800c85c <tcp_receive+0xf18>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	891b      	ldrh	r3, [r3, #8]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f7fb feb3 	bl	8008440 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c6da:	4b62      	ldr	r3, [pc, #392]	; (800c864 <tcp_receive+0xf20>)
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4b5e      	ldr	r3, [pc, #376]	; (800c85c <tcp_receive+0xf18>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	441a      	add	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6ee:	440b      	add	r3, r1
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f340 8089 	ble.w	800c80a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	899b      	ldrh	r3, [r3, #12]
 800c700:	b29b      	uxth	r3, r3
 800c702:	4618      	mov	r0, r3
 800c704:	f7fa fc24 	bl	8006f50 <lwip_htons>
 800c708:	4603      	mov	r3, r0
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d022      	beq.n	800c75a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	899b      	ldrh	r3, [r3, #12]
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	b21b      	sxth	r3, r3
 800c720:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c724:	b21c      	sxth	r4, r3
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	899b      	ldrh	r3, [r3, #12]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	4618      	mov	r0, r3
 800c732:	f7fa fc0d 	bl	8006f50 <lwip_htons>
 800c736:	4603      	mov	r3, r0
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c740:	b29b      	uxth	r3, r3
 800c742:	4618      	mov	r0, r3
 800c744:	f7fa fc04 	bl	8006f50 <lwip_htons>
 800c748:	4603      	mov	r3, r0
 800c74a:	b21b      	sxth	r3, r3
 800c74c:	4323      	orrs	r3, r4
 800c74e:	b21a      	sxth	r2, r3
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	b292      	uxth	r2, r2
 800c758:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c764:	4413      	add	r3, r2
 800c766:	b299      	uxth	r1, r3
 800c768:	4b3c      	ldr	r3, [pc, #240]	; (800c85c <tcp_receive+0xf18>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	1a8a      	subs	r2, r1, r2
 800c774:	b292      	uxth	r2, r2
 800c776:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	891b      	ldrh	r3, [r3, #8]
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7fb fe5a 	bl	8008440 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	891c      	ldrh	r4, [r3, #8]
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	899b      	ldrh	r3, [r3, #12]
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fa fbd7 	bl	8006f50 <lwip_htons>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	f003 0303 	and.w	r3, r3, #3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d001      	beq.n	800c7b2 <tcp_receive+0xe6e>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e000      	b.n	800c7b4 <tcp_receive+0xe70>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4423      	add	r3, r4
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	4b2a      	ldr	r3, [pc, #168]	; (800c864 <tcp_receive+0xf20>)
 800c7ba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7bc:	4b29      	ldr	r3, [pc, #164]	; (800c864 <tcp_receive+0xf20>)
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b26      	ldr	r3, [pc, #152]	; (800c85c <tcp_receive+0xf18>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	441a      	add	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c7d0:	440b      	add	r3, r1
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d019      	beq.n	800c80a <tcp_receive+0xec6>
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <tcp_receive+0xf24>)
 800c7d8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c7dc:	4923      	ldr	r1, [pc, #140]	; (800c86c <tcp_receive+0xf28>)
 800c7de:	4824      	ldr	r0, [pc, #144]	; (800c870 <tcp_receive+0xf2c>)
 800c7e0:	f007 fb4a 	bl	8013e78 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c7e4:	e011      	b.n	800c80a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f47f aea4 	bne.w	800c53c <tcp_receive+0xbf8>
 800c7f4:	e00a      	b.n	800c80c <tcp_receive+0xec8>
                break;
 800c7f6:	bf00      	nop
 800c7f8:	e008      	b.n	800c80c <tcp_receive+0xec8>
                break;
 800c7fa:	bf00      	nop
 800c7fc:	e006      	b.n	800c80c <tcp_receive+0xec8>
                  break;
 800c7fe:	bf00      	nop
 800c800:	e004      	b.n	800c80c <tcp_receive+0xec8>
                  break;
 800c802:	bf00      	nop
 800c804:	e002      	b.n	800c80c <tcp_receive+0xec8>
                  break;
 800c806:	bf00      	nop
 800c808:	e000      	b.n	800c80c <tcp_receive+0xec8>
                break;
 800c80a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f001 fa33 	bl	800dc78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c812:	e003      	b.n	800c81c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f001 fa2f 	bl	800dc78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c81a:	e01a      	b.n	800c852 <tcp_receive+0xf0e>
 800c81c:	e019      	b.n	800c852 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c81e:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <tcp_receive+0xf18>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	db0a      	blt.n	800c842 <tcp_receive+0xefe>
 800c82c:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <tcp_receive+0xf18>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c838:	440b      	add	r3, r1
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	3301      	adds	r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dd07      	ble.n	800c852 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	8b5b      	ldrh	r3, [r3, #26]
 800c846:	f043 0302 	orr.w	r3, r3, #2
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c850:	e7ff      	b.n	800c852 <tcp_receive+0xf0e>
 800c852:	bf00      	nop
 800c854:	3750      	adds	r7, #80	; 0x50
 800c856:	46bd      	mov	sp, r7
 800c858:	bdb0      	pop	{r4, r5, r7, pc}
 800c85a:	bf00      	nop
 800c85c:	2000c450 	.word	0x2000c450
 800c860:	2000c430 	.word	0x2000c430
 800c864:	2000c45a 	.word	0x2000c45a
 800c868:	08018770 	.word	0x08018770
 800c86c:	08018b18 	.word	0x08018b18
 800c870:	080187bc 	.word	0x080187bc

0800c874 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c87a:	4b15      	ldr	r3, [pc, #84]	; (800c8d0 <tcp_get_next_optbyte+0x5c>)
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	1c5a      	adds	r2, r3, #1
 800c880:	b291      	uxth	r1, r2
 800c882:	4a13      	ldr	r2, [pc, #76]	; (800c8d0 <tcp_get_next_optbyte+0x5c>)
 800c884:	8011      	strh	r1, [r2, #0]
 800c886:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c888:	4b12      	ldr	r3, [pc, #72]	; (800c8d4 <tcp_get_next_optbyte+0x60>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d004      	beq.n	800c89a <tcp_get_next_optbyte+0x26>
 800c890:	4b11      	ldr	r3, [pc, #68]	; (800c8d8 <tcp_get_next_optbyte+0x64>)
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	88fa      	ldrh	r2, [r7, #6]
 800c896:	429a      	cmp	r2, r3
 800c898:	d208      	bcs.n	800c8ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c89a:	4b10      	ldr	r3, [pc, #64]	; (800c8dc <tcp_get_next_optbyte+0x68>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c8a2:	88fb      	ldrh	r3, [r7, #6]
 800c8a4:	683a      	ldr	r2, [r7, #0]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	e00b      	b.n	800c8c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8ac:	88fb      	ldrh	r3, [r7, #6]
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <tcp_get_next_optbyte+0x64>)
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c8ba:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <tcp_get_next_optbyte+0x60>)
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	797b      	ldrb	r3, [r7, #5]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	2000c44c 	.word	0x2000c44c
 800c8d4:	2000c448 	.word	0x2000c448
 800c8d8:	2000c446 	.word	0x2000c446
 800c8dc:	2000c440 	.word	0x2000c440

0800c8e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_parseopt+0x1c>
 800c8ee:	4b32      	ldr	r3, [pc, #200]	; (800c9b8 <tcp_parseopt+0xd8>)
 800c8f0:	f240 727d 	movw	r2, #1917	; 0x77d
 800c8f4:	4931      	ldr	r1, [pc, #196]	; (800c9bc <tcp_parseopt+0xdc>)
 800c8f6:	4832      	ldr	r0, [pc, #200]	; (800c9c0 <tcp_parseopt+0xe0>)
 800c8f8:	f007 fabe 	bl	8013e78 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c8fc:	4b31      	ldr	r3, [pc, #196]	; (800c9c4 <tcp_parseopt+0xe4>)
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d055      	beq.n	800c9b0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c904:	4b30      	ldr	r3, [pc, #192]	; (800c9c8 <tcp_parseopt+0xe8>)
 800c906:	2200      	movs	r2, #0
 800c908:	801a      	strh	r2, [r3, #0]
 800c90a:	e045      	b.n	800c998 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c90c:	f7ff ffb2 	bl	800c874 <tcp_get_next_optbyte>
 800c910:	4603      	mov	r3, r0
 800c912:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	2b02      	cmp	r3, #2
 800c918:	d006      	beq.n	800c928 <tcp_parseopt+0x48>
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	dc2b      	bgt.n	800c976 <tcp_parseopt+0x96>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d041      	beq.n	800c9a6 <tcp_parseopt+0xc6>
 800c922:	2b01      	cmp	r3, #1
 800c924:	d127      	bne.n	800c976 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c926:	e037      	b.n	800c998 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c928:	f7ff ffa4 	bl	800c874 <tcp_get_next_optbyte>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d13b      	bne.n	800c9aa <tcp_parseopt+0xca>
 800c932:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <tcp_parseopt+0xe8>)
 800c934:	881b      	ldrh	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	4a22      	ldr	r2, [pc, #136]	; (800c9c4 <tcp_parseopt+0xe4>)
 800c93a:	8812      	ldrh	r2, [r2, #0]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	da34      	bge.n	800c9aa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c940:	f7ff ff98 	bl	800c874 <tcp_get_next_optbyte>
 800c944:	4603      	mov	r3, r0
 800c946:	b29b      	uxth	r3, r3
 800c948:	021b      	lsls	r3, r3, #8
 800c94a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c94c:	f7ff ff92 	bl	800c874 <tcp_get_next_optbyte>
 800c950:	4603      	mov	r3, r0
 800c952:	b29a      	uxth	r2, r3
 800c954:	89bb      	ldrh	r3, [r7, #12]
 800c956:	4313      	orrs	r3, r2
 800c958:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c95a:	89bb      	ldrh	r3, [r7, #12]
 800c95c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c960:	d804      	bhi.n	800c96c <tcp_parseopt+0x8c>
 800c962:	89bb      	ldrh	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <tcp_parseopt+0x8c>
 800c968:	89ba      	ldrh	r2, [r7, #12]
 800c96a:	e001      	b.n	800c970 <tcp_parseopt+0x90>
 800c96c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c974:	e010      	b.n	800c998 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c976:	f7ff ff7d 	bl	800c874 <tcp_get_next_optbyte>
 800c97a:	4603      	mov	r3, r0
 800c97c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d914      	bls.n	800c9ae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c984:	7afb      	ldrb	r3, [r7, #11]
 800c986:	b29a      	uxth	r2, r3
 800c988:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <tcp_parseopt+0xe8>)
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	4413      	add	r3, r2
 800c98e:	b29b      	uxth	r3, r3
 800c990:	3b02      	subs	r3, #2
 800c992:	b29a      	uxth	r2, r3
 800c994:	4b0c      	ldr	r3, [pc, #48]	; (800c9c8 <tcp_parseopt+0xe8>)
 800c996:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c998:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <tcp_parseopt+0xe8>)
 800c99a:	881a      	ldrh	r2, [r3, #0]
 800c99c:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <tcp_parseopt+0xe4>)
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d3b3      	bcc.n	800c90c <tcp_parseopt+0x2c>
 800c9a4:	e004      	b.n	800c9b0 <tcp_parseopt+0xd0>
          return;
 800c9a6:	bf00      	nop
 800c9a8:	e002      	b.n	800c9b0 <tcp_parseopt+0xd0>
            return;
 800c9aa:	bf00      	nop
 800c9ac:	e000      	b.n	800c9b0 <tcp_parseopt+0xd0>
            return;
 800c9ae:	bf00      	nop
      }
    }
  }
}
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	08018770 	.word	0x08018770
 800c9bc:	08018bd4 	.word	0x08018bd4
 800c9c0:	080187bc 	.word	0x080187bc
 800c9c4:	2000c444 	.word	0x2000c444
 800c9c8:	2000c44c 	.word	0x2000c44c

0800c9cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c9d0:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <tcp_trigger_input_pcb_close+0x1c>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	f043 0310 	orr.w	r3, r3, #16
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	4b03      	ldr	r3, [pc, #12]	; (800c9e8 <tcp_trigger_input_pcb_close+0x1c>)
 800c9dc:	701a      	strb	r2, [r3, #0]
}
 800c9de:	bf00      	nop
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	2000c45d 	.word	0x2000c45d

0800c9ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00a      	beq.n	800ca14 <tcp_route+0x28>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	7a1b      	ldrb	r3, [r3, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d006      	beq.n	800ca14 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	7a1b      	ldrb	r3, [r3, #8]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fb fb10 	bl	8008030 <netif_get_by_index>
 800ca10:	4603      	mov	r3, r0
 800ca12:	e003      	b.n	800ca1c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f005 f845 	bl	8011aa4 <ip4_route>
 800ca1a:	4603      	mov	r3, r0
  }
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ca24:	b590      	push	{r4, r7, lr}
 800ca26:	b087      	sub	sp, #28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	603b      	str	r3, [r7, #0]
 800ca30:	4613      	mov	r3, r2
 800ca32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <tcp_create_segment+0x22>
 800ca3a:	4b44      	ldr	r3, [pc, #272]	; (800cb4c <tcp_create_segment+0x128>)
 800ca3c:	22a3      	movs	r2, #163	; 0xa3
 800ca3e:	4944      	ldr	r1, [pc, #272]	; (800cb50 <tcp_create_segment+0x12c>)
 800ca40:	4844      	ldr	r0, [pc, #272]	; (800cb54 <tcp_create_segment+0x130>)
 800ca42:	f007 fa19 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <tcp_create_segment+0x34>
 800ca4c:	4b3f      	ldr	r3, [pc, #252]	; (800cb4c <tcp_create_segment+0x128>)
 800ca4e:	22a4      	movs	r2, #164	; 0xa4
 800ca50:	4941      	ldr	r1, [pc, #260]	; (800cb58 <tcp_create_segment+0x134>)
 800ca52:	4840      	ldr	r0, [pc, #256]	; (800cb54 <tcp_create_segment+0x130>)
 800ca54:	f007 fa10 	bl	8013e78 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ca66:	2003      	movs	r0, #3
 800ca68:	f7fa ff4a 	bl	8007900 <memp_malloc>
 800ca6c:	6138      	str	r0, [r7, #16]
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d104      	bne.n	800ca7e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ca74:	68b8      	ldr	r0, [r7, #8]
 800ca76:	f7fb fe69 	bl	800874c <pbuf_free>
    return NULL;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e061      	b.n	800cb42 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ca84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	891a      	ldrh	r2, [r3, #8]
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d205      	bcs.n	800caaa <tcp_create_segment+0x86>
 800ca9e:	4b2b      	ldr	r3, [pc, #172]	; (800cb4c <tcp_create_segment+0x128>)
 800caa0:	22b0      	movs	r2, #176	; 0xb0
 800caa2:	492e      	ldr	r1, [pc, #184]	; (800cb5c <tcp_create_segment+0x138>)
 800caa4:	482b      	ldr	r0, [pc, #172]	; (800cb54 <tcp_create_segment+0x130>)
 800caa6:	f007 f9e7 	bl	8013e78 <iprintf>
  seg->len = p->tot_len - optlen;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	891a      	ldrh	r2, [r3, #8]
 800caae:	7dfb      	ldrb	r3, [r7, #23]
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800caba:	2114      	movs	r1, #20
 800cabc:	68b8      	ldr	r0, [r7, #8]
 800cabe:	f7fb fdaf 	bl	8008620 <pbuf_add_header>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d004      	beq.n	800cad2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cac8:	6938      	ldr	r0, [r7, #16]
 800caca:	f7fd f8ce 	bl	8009c6a <tcp_seg_free>
    return NULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	e037      	b.n	800cb42 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	8ada      	ldrh	r2, [r3, #22]
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	68dc      	ldr	r4, [r3, #12]
 800cae4:	4610      	mov	r0, r2
 800cae6:	f7fa fa33 	bl	8006f50 <lwip_htons>
 800caea:	4603      	mov	r3, r0
 800caec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8b1a      	ldrh	r2, [r3, #24]
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	68dc      	ldr	r4, [r3, #12]
 800caf6:	4610      	mov	r0, r2
 800caf8:	f7fa fa2a 	bl	8006f50 <lwip_htons>
 800cafc:	4603      	mov	r3, r0
 800cafe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	68dc      	ldr	r4, [r3, #12]
 800cb04:	6838      	ldr	r0, [r7, #0]
 800cb06:	f7fa fa38 	bl	8006f7a <lwip_htonl>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	089b      	lsrs	r3, r3, #2
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	3305      	adds	r3, #5
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	031b      	lsls	r3, r3, #12
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	79fb      	ldrb	r3, [r7, #7]
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	4313      	orrs	r3, r2
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	68dc      	ldr	r4, [r3, #12]
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	f7fa fa10 	bl	8006f50 <lwip_htons>
 800cb30:	4603      	mov	r3, r0
 800cb32:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	749a      	strb	r2, [r3, #18]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	74da      	strb	r2, [r3, #19]
  return seg;
 800cb40:	693b      	ldr	r3, [r7, #16]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd90      	pop	{r4, r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	08018bf0 	.word	0x08018bf0
 800cb50:	08018c24 	.word	0x08018c24
 800cb54:	08018c44 	.word	0x08018c44
 800cb58:	08018c6c 	.word	0x08018c6c
 800cb5c:	08018c90 	.word	0x08018c90

0800cb60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b08b      	sub	sp, #44	; 0x2c
 800cb64:	af02      	add	r7, sp, #8
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	61fb      	str	r3, [r7, #28]
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_split_unsent_seg+0x2c>
 800cb7e:	4b95      	ldr	r3, [pc, #596]	; (800cdd4 <tcp_split_unsent_seg+0x274>)
 800cb80:	f240 324b 	movw	r2, #843	; 0x34b
 800cb84:	4994      	ldr	r1, [pc, #592]	; (800cdd8 <tcp_split_unsent_seg+0x278>)
 800cb86:	4895      	ldr	r0, [pc, #596]	; (800cddc <tcp_split_unsent_seg+0x27c>)
 800cb88:	f007 f976 	bl	8013e78 <iprintf>

  useg = pcb->unsent;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cb98:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9c:	e116      	b.n	800cdcc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cb9e:	887b      	ldrh	r3, [r7, #2]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d109      	bne.n	800cbb8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cba4:	4b8b      	ldr	r3, [pc, #556]	; (800cdd4 <tcp_split_unsent_seg+0x274>)
 800cba6:	f240 3253 	movw	r2, #851	; 0x353
 800cbaa:	498d      	ldr	r1, [pc, #564]	; (800cde0 <tcp_split_unsent_seg+0x280>)
 800cbac:	488b      	ldr	r0, [pc, #556]	; (800cddc <tcp_split_unsent_seg+0x27c>)
 800cbae:	f007 f963 	bl	8013e78 <iprintf>
    return ERR_VAL;
 800cbb2:	f06f 0305 	mvn.w	r3, #5
 800cbb6:	e109      	b.n	800cdcc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	891b      	ldrh	r3, [r3, #8]
 800cbbc:	887a      	ldrh	r2, [r7, #2]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d301      	bcc.n	800cbc6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e102      	b.n	800cdcc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbca:	887a      	ldrh	r2, [r7, #2]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d906      	bls.n	800cbde <tcp_split_unsent_seg+0x7e>
 800cbd0:	4b80      	ldr	r3, [pc, #512]	; (800cdd4 <tcp_split_unsent_seg+0x274>)
 800cbd2:	f240 325b 	movw	r2, #859	; 0x35b
 800cbd6:	4983      	ldr	r1, [pc, #524]	; (800cde4 <tcp_split_unsent_seg+0x284>)
 800cbd8:	4880      	ldr	r0, [pc, #512]	; (800cddc <tcp_split_unsent_seg+0x27c>)
 800cbda:	f007 f94d 	bl	8013e78 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	891b      	ldrh	r3, [r3, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <tcp_split_unsent_seg+0x94>
 800cbe6:	4b7b      	ldr	r3, [pc, #492]	; (800cdd4 <tcp_split_unsent_seg+0x274>)
 800cbe8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cbec:	497e      	ldr	r1, [pc, #504]	; (800cde8 <tcp_split_unsent_seg+0x288>)
 800cbee:	487b      	ldr	r0, [pc, #492]	; (800cddc <tcp_split_unsent_seg+0x27c>)
 800cbf0:	f007 f942 	bl	8013e78 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	7a9b      	ldrb	r3, [r3, #10]
 800cbf8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	891a      	ldrh	r2, [r3, #8]
 800cc0a:	887b      	ldrh	r3, [r7, #2]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	89bb      	ldrh	r3, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc1e:	4619      	mov	r1, r3
 800cc20:	2036      	movs	r0, #54	; 0x36
 800cc22:	f7fb faaf 	bl	8008184 <pbuf_alloc>
 800cc26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f000 80b7 	beq.w	800cd9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	891a      	ldrh	r2, [r3, #8]
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	891b      	ldrh	r3, [r3, #8]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	887b      	ldrh	r3, [r7, #2]
 800cc40:	4413      	add	r3, r2
 800cc42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	6858      	ldr	r0, [r3, #4]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
 800cc4e:	18d1      	adds	r1, r2, r3
 800cc50:	897b      	ldrh	r3, [r7, #10]
 800cc52:	89ba      	ldrh	r2, [r7, #12]
 800cc54:	f7fb ff80 	bl	8008b58 <pbuf_copy_partial>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	89bb      	ldrh	r3, [r7, #12]
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	f040 809f 	bne.w	800cda2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	899b      	ldrh	r3, [r3, #12]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fa f96f 	bl	8006f50 <lwip_htons>
 800cc72:	4603      	mov	r3, r0
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cc80:	7efb      	ldrb	r3, [r7, #27]
 800cc82:	f003 0308 	and.w	r3, r3, #8
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d007      	beq.n	800cc9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cc8a:	7efb      	ldrb	r3, [r7, #27]
 800cc8c:	f023 0308 	bic.w	r3, r3, #8
 800cc90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cc92:	7ebb      	ldrb	r3, [r7, #26]
 800cc94:	f043 0308 	orr.w	r3, r3, #8
 800cc98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cc9a:	7efb      	ldrb	r3, [r7, #27]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d007      	beq.n	800ccb4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cca4:	7efb      	ldrb	r3, [r7, #27]
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ccac:	7ebb      	ldrb	r3, [r7, #26]
 800ccae:	f043 0301 	orr.w	r3, r3, #1
 800ccb2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fa f95d 	bl	8006f7a <lwip_htonl>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	887b      	ldrh	r3, [r7, #2]
 800ccc4:	18d1      	adds	r1, r2, r3
 800ccc6:	7eba      	ldrb	r2, [r7, #26]
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	460b      	mov	r3, r1
 800ccce:	6939      	ldr	r1, [r7, #16]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff fea7 	bl	800ca24 <tcp_create_segment>
 800ccd6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d063      	beq.n	800cda6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fb fdc0 	bl	8008868 <pbuf_clen>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccf2:	1a9b      	subs	r3, r3, r2
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	6858      	ldr	r0, [r3, #4]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	891a      	ldrh	r2, [r3, #8]
 800cd06:	89bb      	ldrh	r3, [r7, #12]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	f7fb fb97 	bl	8008440 <pbuf_realloc>
  useg->len -= remainder;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	891a      	ldrh	r2, [r3, #8]
 800cd16:	89bb      	ldrh	r3, [r7, #12]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	b29c      	uxth	r4, r3
 800cd28:	7efb      	ldrb	r3, [r7, #27]
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fa f90f 	bl	8006f50 <lwip_htons>
 800cd32:	4603      	mov	r3, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	4322      	orrs	r2, r4
 800cd3c:	b292      	uxth	r2, r2
 800cd3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fb fd8f 	bl	8008868 <pbuf_clen>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd54:	4413      	add	r3, r2
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fb fd80 	bl	8008868 <pbuf_clen>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd72:	4413      	add	r3, r2
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e016      	b.n	800cdcc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cd9e:	bf00      	nop
 800cda0:	e002      	b.n	800cda8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cda2:	bf00      	nop
 800cda4:	e000      	b.n	800cda8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cda6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d006      	beq.n	800cdbc <tcp_split_unsent_seg+0x25c>
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <tcp_split_unsent_seg+0x274>)
 800cdb0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cdb4:	490d      	ldr	r1, [pc, #52]	; (800cdec <tcp_split_unsent_seg+0x28c>)
 800cdb6:	4809      	ldr	r0, [pc, #36]	; (800cddc <tcp_split_unsent_seg+0x27c>)
 800cdb8:	f007 f85e 	bl	8013e78 <iprintf>
  if (p != NULL) {
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cdc2:	6938      	ldr	r0, [r7, #16]
 800cdc4:	f7fb fcc2 	bl	800874c <pbuf_free>
  }

  return ERR_MEM;
 800cdc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3724      	adds	r7, #36	; 0x24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd90      	pop	{r4, r7, pc}
 800cdd4:	08018bf0 	.word	0x08018bf0
 800cdd8:	08018f84 	.word	0x08018f84
 800cddc:	08018c44 	.word	0x08018c44
 800cde0:	08018fa8 	.word	0x08018fa8
 800cde4:	08018fcc 	.word	0x08018fcc
 800cde8:	08018fdc 	.word	0x08018fdc
 800cdec:	08018fec 	.word	0x08018fec

0800cdf0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cdf0:	b590      	push	{r4, r7, lr}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d106      	bne.n	800ce0c <tcp_send_fin+0x1c>
 800cdfe:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <tcp_send_fin+0x94>)
 800ce00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ce04:	4920      	ldr	r1, [pc, #128]	; (800ce88 <tcp_send_fin+0x98>)
 800ce06:	4821      	ldr	r0, [pc, #132]	; (800ce8c <tcp_send_fin+0x9c>)
 800ce08:	f007 f836 	bl	8013e78 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d02e      	beq.n	800ce72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	e002      	b.n	800ce22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1f8      	bne.n	800ce1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	899b      	ldrh	r3, [r3, #12]
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fa f88c 	bl	8006f50 <lwip_htons>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	f003 0307 	and.w	r3, r3, #7
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d116      	bne.n	800ce72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	899b      	ldrh	r3, [r3, #12]
 800ce4a:	b29c      	uxth	r4, r3
 800ce4c:	2001      	movs	r0, #1
 800ce4e:	f7fa f87f 	bl	8006f50 <lwip_htons>
 800ce52:	4603      	mov	r3, r0
 800ce54:	461a      	mov	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	4322      	orrs	r2, r4
 800ce5c:	b292      	uxth	r2, r2
 800ce5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	8b5b      	ldrh	r3, [r3, #26]
 800ce64:	f043 0320 	orr.w	r3, r3, #32
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e004      	b.n	800ce7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ce72:	2101      	movs	r1, #1
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f80b 	bl	800ce90 <tcp_enqueue_flags>
 800ce7a:	4603      	mov	r3, r0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd90      	pop	{r4, r7, pc}
 800ce84:	08018bf0 	.word	0x08018bf0
 800ce88:	08018ff8 	.word	0x08018ff8
 800ce8c:	08018c44 	.word	0x08018c44

0800ce90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	; 0x28
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	f003 0303 	and.w	r3, r3, #3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <tcp_enqueue_flags+0x2c>
 800ceae:	4b67      	ldr	r3, [pc, #412]	; (800d04c <tcp_enqueue_flags+0x1bc>)
 800ceb0:	f240 4211 	movw	r2, #1041	; 0x411
 800ceb4:	4966      	ldr	r1, [pc, #408]	; (800d050 <tcp_enqueue_flags+0x1c0>)
 800ceb6:	4867      	ldr	r0, [pc, #412]	; (800d054 <tcp_enqueue_flags+0x1c4>)
 800ceb8:	f006 ffde 	bl	8013e78 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <tcp_enqueue_flags+0x40>
 800cec2:	4b62      	ldr	r3, [pc, #392]	; (800d04c <tcp_enqueue_flags+0x1bc>)
 800cec4:	f240 4213 	movw	r2, #1043	; 0x413
 800cec8:	4963      	ldr	r1, [pc, #396]	; (800d058 <tcp_enqueue_flags+0x1c8>)
 800ceca:	4862      	ldr	r0, [pc, #392]	; (800d054 <tcp_enqueue_flags+0x1c4>)
 800cecc:	f006 ffd4 	bl	8013e78 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ceda:	2301      	movs	r3, #1
 800cedc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cede:	7ffb      	ldrb	r3, [r7, #31]
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	f003 0304 	and.w	r3, r3, #4
 800cee8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cef2:	4619      	mov	r1, r3
 800cef4:	2036      	movs	r0, #54	; 0x36
 800cef6:	f7fb f945 	bl	8008184 <pbuf_alloc>
 800cefa:	6138      	str	r0, [r7, #16]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d109      	bne.n	800cf16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	8b5b      	ldrh	r3, [r3, #26]
 800cf06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
 800cf14:	e095      	b.n	800d042 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	895a      	ldrh	r2, [r3, #10]
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d206      	bcs.n	800cf30 <tcp_enqueue_flags+0xa0>
 800cf22:	4b4a      	ldr	r3, [pc, #296]	; (800d04c <tcp_enqueue_flags+0x1bc>)
 800cf24:	f240 4239 	movw	r2, #1081	; 0x439
 800cf28:	494c      	ldr	r1, [pc, #304]	; (800d05c <tcp_enqueue_flags+0x1cc>)
 800cf2a:	484a      	ldr	r0, [pc, #296]	; (800d054 <tcp_enqueue_flags+0x1c4>)
 800cf2c:	f006 ffa4 	bl	8013e78 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cf34:	78fa      	ldrb	r2, [r7, #3]
 800cf36:	7ffb      	ldrb	r3, [r7, #31]
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	6939      	ldr	r1, [r7, #16]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fd70 	bl	800ca24 <tcp_create_segment>
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d109      	bne.n	800cf60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	8b5b      	ldrh	r3, [r3, #26]
 800cf50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5e:	e070      	b.n	800d042 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	f003 0303 	and.w	r3, r3, #3
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d006      	beq.n	800cf7a <tcp_enqueue_flags+0xea>
 800cf6c:	4b37      	ldr	r3, [pc, #220]	; (800d04c <tcp_enqueue_flags+0x1bc>)
 800cf6e:	f240 4242 	movw	r2, #1090	; 0x442
 800cf72:	493b      	ldr	r1, [pc, #236]	; (800d060 <tcp_enqueue_flags+0x1d0>)
 800cf74:	4837      	ldr	r0, [pc, #220]	; (800d054 <tcp_enqueue_flags+0x1c4>)
 800cf76:	f006 ff7f 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	891b      	ldrh	r3, [r3, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d006      	beq.n	800cf90 <tcp_enqueue_flags+0x100>
 800cf82:	4b32      	ldr	r3, [pc, #200]	; (800d04c <tcp_enqueue_flags+0x1bc>)
 800cf84:	f240 4243 	movw	r2, #1091	; 0x443
 800cf88:	4936      	ldr	r1, [pc, #216]	; (800d064 <tcp_enqueue_flags+0x1d4>)
 800cf8a:	4832      	ldr	r0, [pc, #200]	; (800d054 <tcp_enqueue_flags+0x1c4>)
 800cf8c:	f006 ff74 	bl	8013e78 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d103      	bne.n	800cfa0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf9e:	e00d      	b.n	800cfbc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfa4:	61bb      	str	r3, [r7, #24]
 800cfa6:	e002      	b.n	800cfae <tcp_enqueue_flags+0x11e>
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	61bb      	str	r3, [r7, #24]
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1f8      	bne.n	800cfa8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d104      	bne.n	800cfd8 <tcp_enqueue_flags+0x148>
 800cfce:	78fb      	ldrb	r3, [r7, #3]
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d004      	beq.n	800cfe2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cfe2:	78fb      	ldrb	r3, [r7, #3]
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d006      	beq.n	800cffa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	8b5b      	ldrh	r3, [r3, #26]
 800cff0:	f043 0320 	orr.w	r3, r3, #32
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fb fc32 	bl	8008868 <pbuf_clen>
 800d004:	4603      	mov	r3, r0
 800d006:	461a      	mov	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d00e:	4413      	add	r3, r2
 800d010:	b29a      	uxth	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00e      	beq.n	800d040 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <tcp_enqueue_flags+0x1b0>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <tcp_enqueue_flags+0x1b0>
 800d032:	4b06      	ldr	r3, [pc, #24]	; (800d04c <tcp_enqueue_flags+0x1bc>)
 800d034:	f240 4265 	movw	r2, #1125	; 0x465
 800d038:	490b      	ldr	r1, [pc, #44]	; (800d068 <tcp_enqueue_flags+0x1d8>)
 800d03a:	4806      	ldr	r0, [pc, #24]	; (800d054 <tcp_enqueue_flags+0x1c4>)
 800d03c:	f006 ff1c 	bl	8013e78 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3720      	adds	r7, #32
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	08018bf0 	.word	0x08018bf0
 800d050:	08019014 	.word	0x08019014
 800d054:	08018c44 	.word	0x08018c44
 800d058:	0801906c 	.word	0x0801906c
 800d05c:	0801908c 	.word	0x0801908c
 800d060:	080190c8 	.word	0x080190c8
 800d064:	080190e0 	.word	0x080190e0
 800d068:	0801910c 	.word	0x0801910c

0800d06c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d06c:	b5b0      	push	{r4, r5, r7, lr}
 800d06e:	b08a      	sub	sp, #40	; 0x28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <tcp_output+0x1c>
 800d07a:	4b8a      	ldr	r3, [pc, #552]	; (800d2a4 <tcp_output+0x238>)
 800d07c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d080:	4989      	ldr	r1, [pc, #548]	; (800d2a8 <tcp_output+0x23c>)
 800d082:	488a      	ldr	r0, [pc, #552]	; (800d2ac <tcp_output+0x240>)
 800d084:	f006 fef8 	bl	8013e78 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7d1b      	ldrb	r3, [r3, #20]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d106      	bne.n	800d09e <tcp_output+0x32>
 800d090:	4b84      	ldr	r3, [pc, #528]	; (800d2a4 <tcp_output+0x238>)
 800d092:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d096:	4986      	ldr	r1, [pc, #536]	; (800d2b0 <tcp_output+0x244>)
 800d098:	4884      	ldr	r0, [pc, #528]	; (800d2ac <tcp_output+0x240>)
 800d09a:	f006 feed 	bl	8013e78 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d09e:	4b85      	ldr	r3, [pc, #532]	; (800d2b4 <tcp_output+0x248>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d101      	bne.n	800d0ac <tcp_output+0x40>
    return ERR_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	e1ce      	b.n	800d44a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	bf28      	it	cs
 800d0bc:	4613      	movcs	r3, r2
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10b      	bne.n	800d0e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	8b5b      	ldrh	r3, [r3, #26]
 800d0d2:	f003 0302 	and.w	r3, r3, #2
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f000 81aa 	beq.w	800d430 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fdcb 	bl	800dc78 <tcp_send_empty_ack>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	e1b1      	b.n	800d44a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7ff fc7c 	bl	800c9ec <tcp_route>
 800d0f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d102      	bne.n	800d102 <tcp_output+0x96>
    return ERR_RTE;
 800d0fc:	f06f 0303 	mvn.w	r3, #3
 800d100:	e1a3      	b.n	800d44a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <tcp_output+0xa4>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d111      	bne.n	800d134 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <tcp_output+0xb0>
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	3304      	adds	r3, #4
 800d11a:	e000      	b.n	800d11e <tcp_output+0xb2>
 800d11c:	2300      	movs	r3, #0
 800d11e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <tcp_output+0xc0>
      return ERR_RTE;
 800d126:	f06f 0303 	mvn.w	r3, #3
 800d12a:	e18e      	b.n	800d44a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f9 ff1d 	bl	8006f7a <lwip_htonl>
 800d140:	4602      	mov	r2, r0
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14a:	8912      	ldrh	r2, [r2, #8]
 800d14c:	4413      	add	r3, r2
 800d14e:	69ba      	ldr	r2, [r7, #24]
 800d150:	429a      	cmp	r2, r3
 800d152:	d227      	bcs.n	800d1a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d15a:	461a      	mov	r2, r3
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	4293      	cmp	r3, r2
 800d160:	d114      	bne.n	800d18c <tcp_output+0x120>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d166:	2b00      	cmp	r3, #0
 800d168:	d110      	bne.n	800d18c <tcp_output+0x120>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10b      	bne.n	800d18c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	8b5b      	ldrh	r3, [r3, #26]
 800d190:	f003 0302 	and.w	r3, r3, #2
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 814d 	beq.w	800d434 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fd6c 	bl	800dc78 <tcp_send_empty_ack>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	e152      	b.n	800d44a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 811c 	beq.w	800d3f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d1ba:	e002      	b.n	800d1c2 <tcp_output+0x156>
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	623b      	str	r3, [r7, #32]
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1f8      	bne.n	800d1bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d1ca:	e112      	b.n	800d3f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	899b      	ldrh	r3, [r3, #12]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f9 febb 	bl	8006f50 <lwip_htons>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	f003 0304 	and.w	r3, r3, #4
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d006      	beq.n	800d1f4 <tcp_output+0x188>
 800d1e6:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <tcp_output+0x238>)
 800d1e8:	f240 5236 	movw	r2, #1334	; 0x536
 800d1ec:	4932      	ldr	r1, [pc, #200]	; (800d2b8 <tcp_output+0x24c>)
 800d1ee:	482f      	ldr	r0, [pc, #188]	; (800d2ac <tcp_output+0x240>)
 800d1f0:	f006 fe42 	bl	8013e78 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01f      	beq.n	800d23c <tcp_output+0x1d0>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	8b5b      	ldrh	r3, [r3, #26]
 800d200:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d204:	2b00      	cmp	r3, #0
 800d206:	d119      	bne.n	800d23c <tcp_output+0x1d0>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <tcp_output+0x1bc>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d110      	bne.n	800d23c <tcp_output+0x1d0>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d21e:	891a      	ldrh	r2, [r3, #8]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d224:	429a      	cmp	r2, r3
 800d226:	d209      	bcs.n	800d23c <tcp_output+0x1d0>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d004      	beq.n	800d23c <tcp_output+0x1d0>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d238:	2b08      	cmp	r3, #8
 800d23a:	d901      	bls.n	800d240 <tcp_output+0x1d4>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <tcp_output+0x1d6>
 800d240:	2300      	movs	r3, #0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d106      	bne.n	800d254 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	8b5b      	ldrh	r3, [r3, #26]
 800d24a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 80e4 	beq.w	800d41c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7d1b      	ldrb	r3, [r3, #20]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d00d      	beq.n	800d278 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	899b      	ldrh	r3, [r3, #12]
 800d262:	b29c      	uxth	r4, r3
 800d264:	2010      	movs	r0, #16
 800d266:	f7f9 fe73 	bl	8006f50 <lwip_htons>
 800d26a:	4603      	mov	r3, r0
 800d26c:	461a      	mov	r2, r3
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	4322      	orrs	r2, r4
 800d274:	b292      	uxth	r2, r2
 800d276:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d278:	697a      	ldr	r2, [r7, #20]
 800d27a:	6879      	ldr	r1, [r7, #4]
 800d27c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d27e:	f000 f909 	bl	800d494 <tcp_output_segment>
 800d282:	4603      	mov	r3, r0
 800d284:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d016      	beq.n	800d2bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	8b5b      	ldrh	r3, [r3, #26]
 800d292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d296:	b29a      	uxth	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	835a      	strh	r2, [r3, #26]
      return err;
 800d29c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2a0:	e0d3      	b.n	800d44a <tcp_output+0x3de>
 800d2a2:	bf00      	nop
 800d2a4:	08018bf0 	.word	0x08018bf0
 800d2a8:	08019134 	.word	0x08019134
 800d2ac:	08018c44 	.word	0x08018c44
 800d2b0:	0801914c 	.word	0x0801914c
 800d2b4:	2000c464 	.word	0x2000c464
 800d2b8:	08019174 	.word	0x08019174
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7d1b      	ldrb	r3, [r3, #20]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d006      	beq.n	800d2da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8b5b      	ldrh	r3, [r3, #26]
 800d2d0:	f023 0303 	bic.w	r3, r3, #3
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7f9 fe4a 	bl	8006f7a <lwip_htonl>
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	891b      	ldrh	r3, [r3, #8]
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	899b      	ldrh	r3, [r3, #12]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f9 fe2a 	bl	8006f50 <lwip_htons>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	f003 0303 	and.w	r3, r3, #3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <tcp_output+0x2a0>
 800d308:	2301      	movs	r3, #1
 800d30a:	e000      	b.n	800d30e <tcp_output+0x2a2>
 800d30c:	2300      	movs	r3, #0
 800d30e:	442b      	add	r3, r5
 800d310:	4423      	add	r3, r4
 800d312:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	da02      	bge.n	800d326 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d328:	891b      	ldrh	r3, [r3, #8]
 800d32a:	461c      	mov	r4, r3
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	899b      	ldrh	r3, [r3, #12]
 800d332:	b29b      	uxth	r3, r3
 800d334:	4618      	mov	r0, r3
 800d336:	f7f9 fe0b 	bl	8006f50 <lwip_htons>
 800d33a:	4603      	mov	r3, r0
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	f003 0303 	and.w	r3, r3, #3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <tcp_output+0x2de>
 800d346:	2301      	movs	r3, #1
 800d348:	e000      	b.n	800d34c <tcp_output+0x2e0>
 800d34a:	2300      	movs	r3, #0
 800d34c:	4423      	add	r3, r4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d049      	beq.n	800d3e6 <tcp_output+0x37a>
      seg->next = NULL;
 800d352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d105      	bne.n	800d36c <tcp_output+0x300>
        pcb->unacked = seg;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d364:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	623b      	str	r3, [r7, #32]
 800d36a:	e03f      	b.n	800d3ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	4618      	mov	r0, r3
 800d374:	f7f9 fe01 	bl	8006f7a <lwip_htonl>
 800d378:	4604      	mov	r4, r0
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	f7f9 fdfa 	bl	8006f7a <lwip_htonl>
 800d386:	4603      	mov	r3, r0
 800d388:	1ae3      	subs	r3, r4, r3
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	da24      	bge.n	800d3d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3370      	adds	r3, #112	; 0x70
 800d392:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d394:	e002      	b.n	800d39c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d011      	beq.n	800d3c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7f9 fde4 	bl	8006f7a <lwip_htonl>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f9 fddd 	bl	8006f7a <lwip_htonl>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dbe6      	blt.n	800d396 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	e009      	b.n	800d3ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	623b      	str	r3, [r7, #32]
 800d3e4:	e002      	b.n	800d3ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d3e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3e8:	f7fc fc3f 	bl	8009c6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d012      	beq.n	800d41e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7f9 fdbb 	bl	8006f7a <lwip_htonl>
 800d404:	4602      	mov	r2, r0
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40e:	8912      	ldrh	r2, [r2, #8]
 800d410:	4413      	add	r3, r2
  while (seg != NULL &&
 800d412:	69ba      	ldr	r2, [r7, #24]
 800d414:	429a      	cmp	r2, r3
 800d416:	f4bf aed9 	bcs.w	800d1cc <tcp_output+0x160>
 800d41a:	e000      	b.n	800d41e <tcp_output+0x3b2>
      break;
 800d41c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d108      	bne.n	800d438 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d42e:	e004      	b.n	800d43a <tcp_output+0x3ce>
    goto output_done;
 800d430:	bf00      	nop
 800d432:	e002      	b.n	800d43a <tcp_output+0x3ce>
    goto output_done;
 800d434:	bf00      	nop
 800d436:	e000      	b.n	800d43a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d438:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	8b5b      	ldrh	r3, [r3, #26]
 800d43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d442:	b29a      	uxth	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3728      	adds	r7, #40	; 0x28
 800d44e:	46bd      	mov	sp, r7
 800d450:	bdb0      	pop	{r4, r5, r7, pc}
 800d452:	bf00      	nop

0800d454 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d106      	bne.n	800d470 <tcp_output_segment_busy+0x1c>
 800d462:	4b09      	ldr	r3, [pc, #36]	; (800d488 <tcp_output_segment_busy+0x34>)
 800d464:	f240 529a 	movw	r2, #1434	; 0x59a
 800d468:	4908      	ldr	r1, [pc, #32]	; (800d48c <tcp_output_segment_busy+0x38>)
 800d46a:	4809      	ldr	r0, [pc, #36]	; (800d490 <tcp_output_segment_busy+0x3c>)
 800d46c:	f006 fd04 	bl	8013e78 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	7b9b      	ldrb	r3, [r3, #14]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d001      	beq.n	800d47e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e000      	b.n	800d480 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	08018bf0 	.word	0x08018bf0
 800d48c:	0801918c 	.word	0x0801918c
 800d490:	08018c44 	.word	0x08018c44

0800d494 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d494:	b5b0      	push	{r4, r5, r7, lr}
 800d496:	b08c      	sub	sp, #48	; 0x30
 800d498:	af04      	add	r7, sp, #16
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <tcp_output_segment+0x20>
 800d4a6:	4b64      	ldr	r3, [pc, #400]	; (800d638 <tcp_output_segment+0x1a4>)
 800d4a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d4ac:	4963      	ldr	r1, [pc, #396]	; (800d63c <tcp_output_segment+0x1a8>)
 800d4ae:	4864      	ldr	r0, [pc, #400]	; (800d640 <tcp_output_segment+0x1ac>)
 800d4b0:	f006 fce2 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d106      	bne.n	800d4c8 <tcp_output_segment+0x34>
 800d4ba:	4b5f      	ldr	r3, [pc, #380]	; (800d638 <tcp_output_segment+0x1a4>)
 800d4bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d4c0:	4960      	ldr	r1, [pc, #384]	; (800d644 <tcp_output_segment+0x1b0>)
 800d4c2:	485f      	ldr	r0, [pc, #380]	; (800d640 <tcp_output_segment+0x1ac>)
 800d4c4:	f006 fcd8 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d106      	bne.n	800d4dc <tcp_output_segment+0x48>
 800d4ce:	4b5a      	ldr	r3, [pc, #360]	; (800d638 <tcp_output_segment+0x1a4>)
 800d4d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d4d4:	495c      	ldr	r1, [pc, #368]	; (800d648 <tcp_output_segment+0x1b4>)
 800d4d6:	485a      	ldr	r0, [pc, #360]	; (800d640 <tcp_output_segment+0x1ac>)
 800d4d8:	f006 fcce 	bl	8013e78 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7ff ffb9 	bl	800d454 <tcp_output_segment_busy>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	e0a1      	b.n	800d630 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	68dc      	ldr	r4, [r3, #12]
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	f7f9 fd40 	bl	8006f7a <lwip_htonl>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	68dc      	ldr	r4, [r3, #12]
 800d506:	4610      	mov	r0, r2
 800d508:	f7f9 fd22 	bl	8006f50 <lwip_htons>
 800d50c:	4603      	mov	r3, r0
 800d50e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d518:	441a      	add	r2, r3
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	3314      	adds	r3, #20
 800d524:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	7a9b      	ldrb	r3, [r3, #10]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d015      	beq.n	800d55e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	3304      	adds	r3, #4
 800d536:	461a      	mov	r2, r3
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d53e:	f7fc fe8b 	bl	800a258 <tcp_eff_send_mss_netif>
 800d542:	4603      	mov	r3, r0
 800d544:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d546:	8b7b      	ldrh	r3, [r7, #26]
 800d548:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f9 fd14 	bl	8006f7a <lwip_htonl>
 800d552:	4602      	mov	r2, r0
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	3304      	adds	r3, #4
 800d55c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d564:	2b00      	cmp	r3, #0
 800d566:	da02      	bge.n	800d56e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2200      	movs	r2, #0
 800d56c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10c      	bne.n	800d590 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d576:	4b35      	ldr	r3, [pc, #212]	; (800d64c <tcp_output_segment+0x1b8>)
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	4618      	mov	r0, r3
 800d586:	f7f9 fcf8 	bl	8006f7a <lwip_htonl>
 800d58a:	4602      	mov	r2, r0
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	68da      	ldr	r2, [r3, #12]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	8959      	ldrh	r1, [r3, #10]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	8b3a      	ldrh	r2, [r7, #24]
 800d5aa:	1a8a      	subs	r2, r1, r2
 800d5ac:	b292      	uxth	r2, r2
 800d5ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	8919      	ldrh	r1, [r3, #8]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	8b3a      	ldrh	r2, [r7, #24]
 800d5bc:	1a8a      	subs	r2, r1, r2
 800d5be:	b292      	uxth	r2, r2
 800d5c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	68d2      	ldr	r2, [r2, #12]
 800d5ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	741a      	strb	r2, [r3, #16]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68da      	ldr	r2, [r3, #12]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	7a9b      	ldrb	r3, [r3, #10]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <tcp_output_segment+0x158>
 800d5e8:	2318      	movs	r3, #24
 800d5ea:	e000      	b.n	800d5ee <tcp_output_segment+0x15a>
 800d5ec:	2314      	movs	r3, #20
 800d5ee:	4413      	add	r3, r2
 800d5f0:	69fa      	ldr	r2, [r7, #28]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d006      	beq.n	800d604 <tcp_output_segment+0x170>
 800d5f6:	4b10      	ldr	r3, [pc, #64]	; (800d638 <tcp_output_segment+0x1a4>)
 800d5f8:	f240 621c 	movw	r2, #1564	; 0x61c
 800d5fc:	4914      	ldr	r1, [pc, #80]	; (800d650 <tcp_output_segment+0x1bc>)
 800d5fe:	4810      	ldr	r0, [pc, #64]	; (800d640 <tcp_output_segment+0x1ac>)
 800d600:	f006 fc3a 	bl	8013e78 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6858      	ldr	r0, [r3, #4]
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	1d1c      	adds	r4, r3, #4
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	7add      	ldrb	r5, [r3, #11]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	7a9b      	ldrb	r3, [r3, #10]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	9202      	str	r2, [sp, #8]
 800d61a:	2206      	movs	r2, #6
 800d61c:	9201      	str	r2, [sp, #4]
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	462b      	mov	r3, r5
 800d622:	4622      	mov	r2, r4
 800d624:	f004 fc1a 	bl	8011e5c <ip4_output_if>
 800d628:	4603      	mov	r3, r0
 800d62a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d62c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bdb0      	pop	{r4, r5, r7, pc}
 800d638:	08018bf0 	.word	0x08018bf0
 800d63c:	080191b4 	.word	0x080191b4
 800d640:	08018c44 	.word	0x08018c44
 800d644:	080191d4 	.word	0x080191d4
 800d648:	080191f4 	.word	0x080191f4
 800d64c:	2000c418 	.word	0x2000c418
 800d650:	08019218 	.word	0x08019218

0800d654 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d654:	b5b0      	push	{r4, r5, r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <tcp_rexmit_rto_prepare+0x1c>
 800d662:	4b31      	ldr	r3, [pc, #196]	; (800d728 <tcp_rexmit_rto_prepare+0xd4>)
 800d664:	f240 6263 	movw	r2, #1635	; 0x663
 800d668:	4930      	ldr	r1, [pc, #192]	; (800d72c <tcp_rexmit_rto_prepare+0xd8>)
 800d66a:	4831      	ldr	r0, [pc, #196]	; (800d730 <tcp_rexmit_rto_prepare+0xdc>)
 800d66c:	f006 fc04 	bl	8013e78 <iprintf>

  if (pcb->unacked == NULL) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d674:	2b00      	cmp	r3, #0
 800d676:	d102      	bne.n	800d67e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d678:	f06f 0305 	mvn.w	r3, #5
 800d67c:	e050      	b.n	800d720 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e00b      	b.n	800d69e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff fee4 	bl	800d454 <tcp_output_segment_busy>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d692:	f06f 0305 	mvn.w	r3, #5
 800d696:	e043      	b.n	800d720 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1ef      	bne.n	800d686 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7ff fed4 	bl	800d454 <tcp_output_segment_busy>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d6b2:	f06f 0305 	mvn.w	r3, #5
 800d6b6:	e033      	b.n	800d720 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	8b5b      	ldrh	r3, [r3, #26]
 800d6d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7f9 fc49 	bl	8006f7a <lwip_htonl>
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	891b      	ldrh	r3, [r3, #8]
 800d6ee:	461d      	mov	r5, r3
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	899b      	ldrh	r3, [r3, #12]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7f9 fc29 	bl	8006f50 <lwip_htons>
 800d6fe:	4603      	mov	r3, r0
 800d700:	b2db      	uxtb	r3, r3
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <tcp_rexmit_rto_prepare+0xba>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e000      	b.n	800d710 <tcp_rexmit_rto_prepare+0xbc>
 800d70e:	2300      	movs	r3, #0
 800d710:	442b      	add	r3, r5
 800d712:	18e2      	adds	r2, r4, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bdb0      	pop	{r4, r5, r7, pc}
 800d728:	08018bf0 	.word	0x08018bf0
 800d72c:	0801922c 	.word	0x0801922c
 800d730:	08018c44 	.word	0x08018c44

0800d734 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d106      	bne.n	800d750 <tcp_rexmit_rto_commit+0x1c>
 800d742:	4b0d      	ldr	r3, [pc, #52]	; (800d778 <tcp_rexmit_rto_commit+0x44>)
 800d744:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d748:	490c      	ldr	r1, [pc, #48]	; (800d77c <tcp_rexmit_rto_commit+0x48>)
 800d74a:	480d      	ldr	r0, [pc, #52]	; (800d780 <tcp_rexmit_rto_commit+0x4c>)
 800d74c:	f006 fb94 	bl	8013e78 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d756:	2bff      	cmp	r3, #255	; 0xff
 800d758:	d007      	beq.n	800d76a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d760:	3301      	adds	r3, #1
 800d762:	b2da      	uxtb	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7ff fc7e 	bl	800d06c <tcp_output>
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	08018bf0 	.word	0x08018bf0
 800d77c:	08019250 	.word	0x08019250
 800d780:	08018c44 	.word	0x08018c44

0800d784 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d106      	bne.n	800d7a0 <tcp_rexmit_rto+0x1c>
 800d792:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <tcp_rexmit_rto+0x38>)
 800d794:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d798:	4909      	ldr	r1, [pc, #36]	; (800d7c0 <tcp_rexmit_rto+0x3c>)
 800d79a:	480a      	ldr	r0, [pc, #40]	; (800d7c4 <tcp_rexmit_rto+0x40>)
 800d79c:	f006 fb6c 	bl	8013e78 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff ff57 	bl	800d654 <tcp_rexmit_rto_prepare>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d102      	bne.n	800d7b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff ffc1 	bl	800d734 <tcp_rexmit_rto_commit>
  }
}
 800d7b2:	bf00      	nop
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	08018bf0 	.word	0x08018bf0
 800d7c0:	08019274 	.word	0x08019274
 800d7c4:	08018c44 	.word	0x08018c44

0800d7c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d7c8:	b590      	push	{r4, r7, lr}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <tcp_rexmit+0x1c>
 800d7d6:	4b2f      	ldr	r3, [pc, #188]	; (800d894 <tcp_rexmit+0xcc>)
 800d7d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d7dc:	492e      	ldr	r1, [pc, #184]	; (800d898 <tcp_rexmit+0xd0>)
 800d7de:	482f      	ldr	r0, [pc, #188]	; (800d89c <tcp_rexmit+0xd4>)
 800d7e0:	f006 fb4a 	bl	8013e78 <iprintf>

  if (pcb->unacked == NULL) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d7ec:	f06f 0305 	mvn.w	r3, #5
 800d7f0:	e04c      	b.n	800d88c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d7f8:	68b8      	ldr	r0, [r7, #8]
 800d7fa:	f7ff fe2b 	bl	800d454 <tcp_output_segment_busy>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d804:	f06f 0305 	mvn.w	r3, #5
 800d808:	e040      	b.n	800d88c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	336c      	adds	r3, #108	; 0x6c
 800d816:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d818:	e002      	b.n	800d820 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d011      	beq.n	800d84c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	4618      	mov	r0, r3
 800d832:	f7f9 fba2 	bl	8006f7a <lwip_htonl>
 800d836:	4604      	mov	r4, r0
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f9 fb9b 	bl	8006f7a <lwip_htonl>
 800d844:	4603      	mov	r3, r0
 800d846:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d848:	2b00      	cmp	r3, #0
 800d84a:	dbe6      	blt.n	800d81a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d103      	bne.n	800d86a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d870:	2bff      	cmp	r3, #255	; 0xff
 800d872:	d007      	beq.n	800d884 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d87a:	3301      	adds	r3, #1
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3714      	adds	r7, #20
 800d890:	46bd      	mov	sp, r7
 800d892:	bd90      	pop	{r4, r7, pc}
 800d894:	08018bf0 	.word	0x08018bf0
 800d898:	08019290 	.word	0x08019290
 800d89c:	08018c44 	.word	0x08018c44

0800d8a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <tcp_rexmit_fast+0x1c>
 800d8ae:	4b2a      	ldr	r3, [pc, #168]	; (800d958 <tcp_rexmit_fast+0xb8>)
 800d8b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d8b4:	4929      	ldr	r1, [pc, #164]	; (800d95c <tcp_rexmit_fast+0xbc>)
 800d8b6:	482a      	ldr	r0, [pc, #168]	; (800d960 <tcp_rexmit_fast+0xc0>)
 800d8b8:	f006 fade 	bl	8013e78 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d044      	beq.n	800d94e <tcp_rexmit_fast+0xae>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	8b5b      	ldrh	r3, [r3, #26]
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d13e      	bne.n	800d94e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff ff79 	bl	800d7c8 <tcp_rexmit>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d138      	bne.n	800d94e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	bf28      	it	cs
 800d8ec:	4613      	movcs	r3, r2
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	0fda      	lsrs	r2, r3, #31
 800d8f2:	4413      	add	r3, r2
 800d8f4:	105b      	asrs	r3, r3, #1
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d904:	461a      	mov	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d90a:	005b      	lsls	r3, r3, #1
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d206      	bcs.n	800d91e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	b29a      	uxth	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d928:	4619      	mov	r1, r3
 800d92a:	0049      	lsls	r1, r1, #1
 800d92c:	440b      	add	r3, r1
 800d92e:	b29b      	uxth	r3, r3
 800d930:	4413      	add	r3, r2
 800d932:	b29a      	uxth	r2, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8b5b      	ldrh	r3, [r3, #26]
 800d93e:	f043 0304 	orr.w	r3, r3, #4
 800d942:	b29a      	uxth	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d94e:	bf00      	nop
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	08018bf0 	.word	0x08018bf0
 800d95c:	080192a8 	.word	0x080192a8
 800d960:	08018c44 	.word	0x08018c44

0800d964 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	607b      	str	r3, [r7, #4]
 800d96e:	460b      	mov	r3, r1
 800d970:	817b      	strh	r3, [r7, #10]
 800d972:	4613      	mov	r3, r2
 800d974:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d976:	897a      	ldrh	r2, [r7, #10]
 800d978:	893b      	ldrh	r3, [r7, #8]
 800d97a:	4413      	add	r3, r2
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	3314      	adds	r3, #20
 800d980:	b29b      	uxth	r3, r3
 800d982:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d986:	4619      	mov	r1, r3
 800d988:	2022      	movs	r0, #34	; 0x22
 800d98a:	f7fa fbfb 	bl	8008184 <pbuf_alloc>
 800d98e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d04d      	beq.n	800da32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d996:	897b      	ldrh	r3, [r7, #10]
 800d998:	3313      	adds	r3, #19
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	8952      	ldrh	r2, [r2, #10]
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	db06      	blt.n	800d9b0 <tcp_output_alloc_header_common+0x4c>
 800d9a2:	4b26      	ldr	r3, [pc, #152]	; (800da3c <tcp_output_alloc_header_common+0xd8>)
 800d9a4:	f240 7223 	movw	r2, #1827	; 0x723
 800d9a8:	4925      	ldr	r1, [pc, #148]	; (800da40 <tcp_output_alloc_header_common+0xdc>)
 800d9aa:	4826      	ldr	r0, [pc, #152]	; (800da44 <tcp_output_alloc_header_common+0xe0>)
 800d9ac:	f006 fa64 	bl	8013e78 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d9b6:	8c3b      	ldrh	r3, [r7, #32]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f9 fac9 	bl	8006f50 <lwip_htons>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7f9 fac1 	bl	8006f50 <lwip_htons>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f7f9 facc 	bl	8006f7a <lwip_htonl>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d9e8:	897b      	ldrh	r3, [r7, #10]
 800d9ea:	089b      	lsrs	r3, r3, #2
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	3305      	adds	r3, #5
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	031b      	lsls	r3, r3, #12
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	4618      	mov	r0, r3
 800da02:	f7f9 faa5 	bl	8006f50 <lwip_htons>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800da0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da10:	4618      	mov	r0, r3
 800da12:	f7f9 fa9d 	bl	8006f50 <lwip_htons>
 800da16:	4603      	mov	r3, r0
 800da18:	461a      	mov	r2, r3
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	2200      	movs	r2, #0
 800da22:	741a      	strb	r2, [r3, #16]
 800da24:	2200      	movs	r2, #0
 800da26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2200      	movs	r2, #0
 800da2c:	749a      	strb	r2, [r3, #18]
 800da2e:	2200      	movs	r2, #0
 800da30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800da32:	697b      	ldr	r3, [r7, #20]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	08018bf0 	.word	0x08018bf0
 800da40:	080192c8 	.word	0x080192c8
 800da44:	08018c44 	.word	0x08018c44

0800da48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800da48:	b5b0      	push	{r4, r5, r7, lr}
 800da4a:	b08a      	sub	sp, #40	; 0x28
 800da4c:	af04      	add	r7, sp, #16
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	607b      	str	r3, [r7, #4]
 800da52:	460b      	mov	r3, r1
 800da54:	817b      	strh	r3, [r7, #10]
 800da56:	4613      	mov	r3, r2
 800da58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d106      	bne.n	800da6e <tcp_output_alloc_header+0x26>
 800da60:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <tcp_output_alloc_header+0x70>)
 800da62:	f240 7242 	movw	r2, #1858	; 0x742
 800da66:	4915      	ldr	r1, [pc, #84]	; (800dabc <tcp_output_alloc_header+0x74>)
 800da68:	4815      	ldr	r0, [pc, #84]	; (800dac0 <tcp_output_alloc_header+0x78>)
 800da6a:	f006 fa05 	bl	8013e78 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	8adb      	ldrh	r3, [r3, #22]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	8b12      	ldrh	r2, [r2, #24]
 800da7a:	68f9      	ldr	r1, [r7, #12]
 800da7c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800da7e:	893d      	ldrh	r5, [r7, #8]
 800da80:	897c      	ldrh	r4, [r7, #10]
 800da82:	9103      	str	r1, [sp, #12]
 800da84:	2110      	movs	r1, #16
 800da86:	9102      	str	r1, [sp, #8]
 800da88:	9201      	str	r2, [sp, #4]
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	462a      	mov	r2, r5
 800da90:	4621      	mov	r1, r4
 800da92:	f7ff ff67 	bl	800d964 <tcp_output_alloc_header_common>
 800da96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d006      	beq.n	800daac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800daa6:	441a      	add	r2, r3
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800daac:	697b      	ldr	r3, [r7, #20]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3718      	adds	r7, #24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bdb0      	pop	{r4, r5, r7, pc}
 800dab6:	bf00      	nop
 800dab8:	08018bf0 	.word	0x08018bf0
 800dabc:	080192f8 	.word	0x080192f8
 800dac0:	08018c44 	.word	0x08018c44

0800dac4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	4611      	mov	r1, r2
 800dad0:	461a      	mov	r2, r3
 800dad2:	460b      	mov	r3, r1
 800dad4:	71fb      	strb	r3, [r7, #7]
 800dad6:	4613      	mov	r3, r2
 800dad8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d106      	bne.n	800daf2 <tcp_output_fill_options+0x2e>
 800dae4:	4b12      	ldr	r3, [pc, #72]	; (800db30 <tcp_output_fill_options+0x6c>)
 800dae6:	f240 7256 	movw	r2, #1878	; 0x756
 800daea:	4912      	ldr	r1, [pc, #72]	; (800db34 <tcp_output_fill_options+0x70>)
 800daec:	4812      	ldr	r0, [pc, #72]	; (800db38 <tcp_output_fill_options+0x74>)
 800daee:	f006 f9c3 	bl	8013e78 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	3314      	adds	r3, #20
 800dafc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dafe:	8bfb      	ldrh	r3, [r7, #30]
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	461a      	mov	r2, r3
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	f003 0304 	and.w	r3, r3, #4
 800db0c:	4413      	add	r3, r2
 800db0e:	3314      	adds	r3, #20
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	4413      	add	r3, r2
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	429a      	cmp	r2, r3
 800db18:	d006      	beq.n	800db28 <tcp_output_fill_options+0x64>
 800db1a:	4b05      	ldr	r3, [pc, #20]	; (800db30 <tcp_output_fill_options+0x6c>)
 800db1c:	f240 7275 	movw	r2, #1909	; 0x775
 800db20:	4906      	ldr	r1, [pc, #24]	; (800db3c <tcp_output_fill_options+0x78>)
 800db22:	4805      	ldr	r0, [pc, #20]	; (800db38 <tcp_output_fill_options+0x74>)
 800db24:	f006 f9a8 	bl	8013e78 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800db28:	bf00      	nop
 800db2a:	3720      	adds	r7, #32
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	08018bf0 	.word	0x08018bf0
 800db34:	08019320 	.word	0x08019320
 800db38:	08018c44 	.word	0x08018c44
 800db3c:	08019218 	.word	0x08019218

0800db40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	; 0x28
 800db44:	af04      	add	r7, sp, #16
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d106      	bne.n	800db62 <tcp_output_control_segment+0x22>
 800db54:	4b1c      	ldr	r3, [pc, #112]	; (800dbc8 <tcp_output_control_segment+0x88>)
 800db56:	f240 7287 	movw	r2, #1927	; 0x787
 800db5a:	491c      	ldr	r1, [pc, #112]	; (800dbcc <tcp_output_control_segment+0x8c>)
 800db5c:	481c      	ldr	r0, [pc, #112]	; (800dbd0 <tcp_output_control_segment+0x90>)
 800db5e:	f006 f98b 	bl	8013e78 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f7fe ff40 	bl	800c9ec <tcp_route>
 800db6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d102      	bne.n	800db7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800db74:	23fc      	movs	r3, #252	; 0xfc
 800db76:	75fb      	strb	r3, [r7, #23]
 800db78:	e01c      	b.n	800dbb4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d006      	beq.n	800db8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	7adb      	ldrb	r3, [r3, #11]
 800db84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	7a9b      	ldrb	r3, [r3, #10]
 800db8a:	757b      	strb	r3, [r7, #21]
 800db8c:	e003      	b.n	800db96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800db8e:	23ff      	movs	r3, #255	; 0xff
 800db90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800db92:	2300      	movs	r3, #0
 800db94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800db96:	7dba      	ldrb	r2, [r7, #22]
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	9302      	str	r3, [sp, #8]
 800db9c:	2306      	movs	r3, #6
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	7d7b      	ldrb	r3, [r7, #21]
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	4613      	mov	r3, r2
 800dba6:	683a      	ldr	r2, [r7, #0]
 800dba8:	6879      	ldr	r1, [r7, #4]
 800dbaa:	68b8      	ldr	r0, [r7, #8]
 800dbac:	f004 f956 	bl	8011e5c <ip4_output_if>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dbb4:	68b8      	ldr	r0, [r7, #8]
 800dbb6:	f7fa fdc9 	bl	800874c <pbuf_free>
  return err;
 800dbba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	08018bf0 	.word	0x08018bf0
 800dbcc:	08019348 	.word	0x08019348
 800dbd0:	08018c44 	.word	0x08018c44

0800dbd4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dbd4:	b590      	push	{r4, r7, lr}
 800dbd6:	b08b      	sub	sp, #44	; 0x2c
 800dbd8:	af04      	add	r7, sp, #16
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d106      	bne.n	800dbf6 <tcp_rst+0x22>
 800dbe8:	4b1f      	ldr	r3, [pc, #124]	; (800dc68 <tcp_rst+0x94>)
 800dbea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dbee:	491f      	ldr	r1, [pc, #124]	; (800dc6c <tcp_rst+0x98>)
 800dbf0:	481f      	ldr	r0, [pc, #124]	; (800dc70 <tcp_rst+0x9c>)
 800dbf2:	f006 f941 	bl	8013e78 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <tcp_rst+0x36>
 800dbfc:	4b1a      	ldr	r3, [pc, #104]	; (800dc68 <tcp_rst+0x94>)
 800dbfe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dc02:	491c      	ldr	r1, [pc, #112]	; (800dc74 <tcp_rst+0xa0>)
 800dc04:	481a      	ldr	r0, [pc, #104]	; (800dc70 <tcp_rst+0x9c>)
 800dc06:	f006 f937 	bl	8013e78 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dc0e:	f246 0308 	movw	r3, #24584	; 0x6008
 800dc12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dc14:	7dfb      	ldrb	r3, [r7, #23]
 800dc16:	b29c      	uxth	r4, r3
 800dc18:	68b8      	ldr	r0, [r7, #8]
 800dc1a:	f7f9 f9ae 	bl	8006f7a <lwip_htonl>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	8abb      	ldrh	r3, [r7, #20]
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	2314      	movs	r3, #20
 800dc26:	9302      	str	r3, [sp, #8]
 800dc28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dc2a:	9301      	str	r3, [sp, #4]
 800dc2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	4613      	mov	r3, r2
 800dc32:	2200      	movs	r2, #0
 800dc34:	4621      	mov	r1, r4
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff fe94 	bl	800d964 <tcp_output_alloc_header_common>
 800dc3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00c      	beq.n	800dc5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	2200      	movs	r2, #0
 800dc48:	6939      	ldr	r1, [r7, #16]
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f7ff ff3a 	bl	800dac4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	6939      	ldr	r1, [r7, #16]
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff ff72 	bl	800db40 <tcp_output_control_segment>
 800dc5c:	e000      	b.n	800dc60 <tcp_rst+0x8c>
    return;
 800dc5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dc60:	371c      	adds	r7, #28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd90      	pop	{r4, r7, pc}
 800dc66:	bf00      	nop
 800dc68:	08018bf0 	.word	0x08018bf0
 800dc6c:	08019374 	.word	0x08019374
 800dc70:	08018c44 	.word	0x08018c44
 800dc74:	08019390 	.word	0x08019390

0800dc78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dc78:	b590      	push	{r4, r7, lr}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <tcp_send_empty_ack+0x24>
 800dc8e:	4b28      	ldr	r3, [pc, #160]	; (800dd30 <tcp_send_empty_ack+0xb8>)
 800dc90:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dc94:	4927      	ldr	r1, [pc, #156]	; (800dd34 <tcp_send_empty_ack+0xbc>)
 800dc96:	4828      	ldr	r0, [pc, #160]	; (800dd38 <tcp_send_empty_ack+0xc0>)
 800dc98:	f006 f8ee 	bl	8013e78 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc9c:	7dfb      	ldrb	r3, [r7, #23]
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	f003 0304 	and.w	r3, r3, #4
 800dca6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dca8:	7d7b      	ldrb	r3, [r7, #21]
 800dcaa:	b29c      	uxth	r4, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f9 f962 	bl	8006f7a <lwip_htonl>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2200      	movs	r2, #0
 800dcba:	4621      	mov	r1, r4
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7ff fec3 	bl	800da48 <tcp_output_alloc_header>
 800dcc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d109      	bne.n	800dcde <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	8b5b      	ldrh	r3, [r3, #26]
 800dcce:	f043 0303 	orr.w	r3, r3, #3
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dcd8:	f06f 0301 	mvn.w	r3, #1
 800dcdc:	e023      	b.n	800dd26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dcde:	7dbb      	ldrb	r3, [r7, #22]
 800dce0:	7dfa      	ldrb	r2, [r7, #23]
 800dce2:	6939      	ldr	r1, [r7, #16]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff feed 	bl	800dac4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	6939      	ldr	r1, [r7, #16]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff ff24 	bl	800db40 <tcp_output_control_segment>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dcfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d007      	beq.n	800dd14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	8b5b      	ldrh	r3, [r3, #26]
 800dd08:	f043 0303 	orr.w	r3, r3, #3
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	835a      	strh	r2, [r3, #26]
 800dd12:	e006      	b.n	800dd22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	8b5b      	ldrh	r3, [r3, #26]
 800dd18:	f023 0303 	bic.w	r3, r3, #3
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dd22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	371c      	adds	r7, #28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd90      	pop	{r4, r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	08018bf0 	.word	0x08018bf0
 800dd34:	080193ac 	.word	0x080193ac
 800dd38:	08018c44 	.word	0x08018c44

0800dd3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dd3c:	b590      	push	{r4, r7, lr}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd44:	2300      	movs	r3, #0
 800dd46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d106      	bne.n	800dd5c <tcp_keepalive+0x20>
 800dd4e:	4b18      	ldr	r3, [pc, #96]	; (800ddb0 <tcp_keepalive+0x74>)
 800dd50:	f640 0224 	movw	r2, #2084	; 0x824
 800dd54:	4917      	ldr	r1, [pc, #92]	; (800ddb4 <tcp_keepalive+0x78>)
 800dd56:	4818      	ldr	r0, [pc, #96]	; (800ddb8 <tcp_keepalive+0x7c>)
 800dd58:	f006 f88e 	bl	8013e78 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	b29c      	uxth	r4, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd64:	3b01      	subs	r3, #1
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f9 f907 	bl	8006f7a <lwip_htonl>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4621      	mov	r1, r4
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fe68 	bl	800da48 <tcp_output_alloc_header>
 800dd78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d102      	bne.n	800dd86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dd80:	f04f 33ff 	mov.w	r3, #4294967295
 800dd84:	e010      	b.n	800dda8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	6939      	ldr	r1, [r7, #16]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff fe99 	bl	800dac4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3304      	adds	r3, #4
 800dd98:	6939      	ldr	r1, [r7, #16]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fed0 	bl	800db40 <tcp_output_control_segment>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	371c      	adds	r7, #28
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd90      	pop	{r4, r7, pc}
 800ddb0:	08018bf0 	.word	0x08018bf0
 800ddb4:	080193cc 	.word	0x080193cc
 800ddb8:	08018c44 	.word	0x08018c44

0800ddbc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ddbc:	b590      	push	{r4, r7, lr}
 800ddbe:	b08b      	sub	sp, #44	; 0x2c
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d106      	bne.n	800ddde <tcp_zero_window_probe+0x22>
 800ddd0:	4b4c      	ldr	r3, [pc, #304]	; (800df04 <tcp_zero_window_probe+0x148>)
 800ddd2:	f640 024f 	movw	r2, #2127	; 0x84f
 800ddd6:	494c      	ldr	r1, [pc, #304]	; (800df08 <tcp_zero_window_probe+0x14c>)
 800ddd8:	484c      	ldr	r0, [pc, #304]	; (800df0c <tcp_zero_window_probe+0x150>)
 800ddda:	f006 f84d 	bl	8013e78 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e086      	b.n	800defc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ddf4:	2bff      	cmp	r3, #255	; 0xff
 800ddf6:	d007      	beq.n	800de08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ddfe:	3301      	adds	r3, #1
 800de00:	b2da      	uxtb	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	899b      	ldrh	r3, [r3, #12]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	4618      	mov	r0, r3
 800de12:	f7f9 f89d 	bl	8006f50 <lwip_htons>
 800de16:	4603      	mov	r3, r0
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d005      	beq.n	800de2e <tcp_zero_window_probe+0x72>
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	891b      	ldrh	r3, [r3, #8]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <tcp_zero_window_probe+0x72>
 800de2a:	2301      	movs	r3, #1
 800de2c:	e000      	b.n	800de30 <tcp_zero_window_probe+0x74>
 800de2e:	2300      	movs	r3, #0
 800de30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800de32:	7ffb      	ldrb	r3, [r7, #31]
 800de34:	2b00      	cmp	r3, #0
 800de36:	bf0c      	ite	eq
 800de38:	2301      	moveq	r3, #1
 800de3a:	2300      	movne	r3, #0
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800de40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de44:	b299      	uxth	r1, r3
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	8bba      	ldrh	r2, [r7, #28]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff fdfa 	bl	800da48 <tcp_output_alloc_header>
 800de54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d102      	bne.n	800de62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800de5c:	f04f 33ff 	mov.w	r3, #4294967295
 800de60:	e04c      	b.n	800defc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800de68:	7ffb      	ldrb	r3, [r7, #31]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d011      	beq.n	800de92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	899b      	ldrh	r3, [r3, #12]
 800de72:	b29b      	uxth	r3, r3
 800de74:	b21b      	sxth	r3, r3
 800de76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de7a:	b21c      	sxth	r4, r3
 800de7c:	2011      	movs	r0, #17
 800de7e:	f7f9 f867 	bl	8006f50 <lwip_htons>
 800de82:	4603      	mov	r3, r0
 800de84:	b21b      	sxth	r3, r3
 800de86:	4323      	orrs	r3, r4
 800de88:	b21b      	sxth	r3, r3
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	819a      	strh	r2, [r3, #12]
 800de90:	e010      	b.n	800deb4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	3314      	adds	r3, #20
 800de98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	6858      	ldr	r0, [r3, #4]
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	891a      	ldrh	r2, [r3, #8]
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	891b      	ldrh	r3, [r3, #8]
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	b29b      	uxth	r3, r3
 800deac:	2201      	movs	r2, #1
 800deae:	6939      	ldr	r1, [r7, #16]
 800deb0:	f7fa fe52 	bl	8008b58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	4618      	mov	r0, r3
 800debc:	f7f9 f85d 	bl	8006f7a <lwip_htonl>
 800dec0:	4603      	mov	r3, r0
 800dec2:	3301      	adds	r3, #1
 800dec4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	da02      	bge.n	800ded8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ded8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dedc:	2200      	movs	r2, #0
 800dede:	69b9      	ldr	r1, [r7, #24]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f7ff fdef 	bl	800dac4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3304      	adds	r3, #4
 800deec:	69b9      	ldr	r1, [r7, #24]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fe26 	bl	800db40 <tcp_output_control_segment>
 800def4:	4603      	mov	r3, r0
 800def6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800def8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800defc:	4618      	mov	r0, r3
 800defe:	372c      	adds	r7, #44	; 0x2c
 800df00:	46bd      	mov	sp, r7
 800df02:	bd90      	pop	{r4, r7, pc}
 800df04:	08018bf0 	.word	0x08018bf0
 800df08:	080193e8 	.word	0x080193e8
 800df0c:	08018c44 	.word	0x08018c44

0800df10 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800df18:	f7fa ff0c 	bl	8008d34 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800df1c:	4b0a      	ldr	r3, [pc, #40]	; (800df48 <tcpip_tcp_timer+0x38>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d103      	bne.n	800df2c <tcpip_tcp_timer+0x1c>
 800df24:	4b09      	ldr	r3, [pc, #36]	; (800df4c <tcpip_tcp_timer+0x3c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d005      	beq.n	800df38 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df2c:	2200      	movs	r2, #0
 800df2e:	4908      	ldr	r1, [pc, #32]	; (800df50 <tcpip_tcp_timer+0x40>)
 800df30:	20fa      	movs	r0, #250	; 0xfa
 800df32:	f000 f8f3 	bl	800e11c <sys_timeout>
 800df36:	e003      	b.n	800df40 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800df38:	4b06      	ldr	r3, [pc, #24]	; (800df54 <tcpip_tcp_timer+0x44>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	601a      	str	r2, [r3, #0]
  }
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	2000c424 	.word	0x2000c424
 800df4c:	2000c428 	.word	0x2000c428
 800df50:	0800df11 	.word	0x0800df11
 800df54:	2000c470 	.word	0x2000c470

0800df58 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <tcp_timer_needed+0x30>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10f      	bne.n	800df84 <tcp_timer_needed+0x2c>
 800df64:	4b09      	ldr	r3, [pc, #36]	; (800df8c <tcp_timer_needed+0x34>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d103      	bne.n	800df74 <tcp_timer_needed+0x1c>
 800df6c:	4b08      	ldr	r3, [pc, #32]	; (800df90 <tcp_timer_needed+0x38>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d007      	beq.n	800df84 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800df74:	4b04      	ldr	r3, [pc, #16]	; (800df88 <tcp_timer_needed+0x30>)
 800df76:	2201      	movs	r2, #1
 800df78:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df7a:	2200      	movs	r2, #0
 800df7c:	4905      	ldr	r1, [pc, #20]	; (800df94 <tcp_timer_needed+0x3c>)
 800df7e:	20fa      	movs	r0, #250	; 0xfa
 800df80:	f000 f8cc 	bl	800e11c <sys_timeout>
  }
}
 800df84:	bf00      	nop
 800df86:	bd80      	pop	{r7, pc}
 800df88:	2000c470 	.word	0x2000c470
 800df8c:	2000c424 	.word	0x2000c424
 800df90:	2000c428 	.word	0x2000c428
 800df94:	0800df11 	.word	0x0800df11

0800df98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dfa4:	200a      	movs	r0, #10
 800dfa6:	f7f9 fcab 	bl	8007900 <memp_malloc>
 800dfaa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d109      	bne.n	800dfc6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d151      	bne.n	800e05c <sys_timeout_abs+0xc4>
 800dfb8:	4b2a      	ldr	r3, [pc, #168]	; (800e064 <sys_timeout_abs+0xcc>)
 800dfba:	22be      	movs	r2, #190	; 0xbe
 800dfbc:	492a      	ldr	r1, [pc, #168]	; (800e068 <sys_timeout_abs+0xd0>)
 800dfbe:	482b      	ldr	r0, [pc, #172]	; (800e06c <sys_timeout_abs+0xd4>)
 800dfc0:	f005 ff5a 	bl	8013e78 <iprintf>
    return;
 800dfc4:	e04a      	b.n	800e05c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dfde:	4b24      	ldr	r3, [pc, #144]	; (800e070 <sys_timeout_abs+0xd8>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d103      	bne.n	800dfee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dfe6:	4a22      	ldr	r2, [pc, #136]	; (800e070 <sys_timeout_abs+0xd8>)
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	6013      	str	r3, [r2, #0]
    return;
 800dfec:	e037      	b.n	800e05e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	685a      	ldr	r2, [r3, #4]
 800dff2:	4b1f      	ldr	r3, [pc, #124]	; (800e070 <sys_timeout_abs+0xd8>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	0fdb      	lsrs	r3, r3, #31
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	b2db      	uxtb	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	d007      	beq.n	800e016 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e006:	4b1a      	ldr	r3, [pc, #104]	; (800e070 <sys_timeout_abs+0xd8>)
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e00e:	4a18      	ldr	r2, [pc, #96]	; (800e070 <sys_timeout_abs+0xd8>)
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	e023      	b.n	800e05e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e016:	4b16      	ldr	r3, [pc, #88]	; (800e070 <sys_timeout_abs+0xd8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	617b      	str	r3, [r7, #20]
 800e01c:	e01a      	b.n	800e054 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00b      	beq.n	800e03e <sys_timeout_abs+0xa6>
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	0fdb      	lsrs	r3, r3, #31
 800e034:	f003 0301 	and.w	r3, r3, #1
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d007      	beq.n	800e04e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	601a      	str	r2, [r3, #0]
        break;
 800e04c:	e007      	b.n	800e05e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	617b      	str	r3, [r7, #20]
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1e1      	bne.n	800e01e <sys_timeout_abs+0x86>
 800e05a:	e000      	b.n	800e05e <sys_timeout_abs+0xc6>
    return;
 800e05c:	bf00      	nop
      }
    }
  }
}
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	0801940c 	.word	0x0801940c
 800e068:	08019440 	.word	0x08019440
 800e06c:	08019480 	.word	0x08019480
 800e070:	2000c468 	.word	0x2000c468

0800e074 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	4798      	blx	r3

  now = sys_now();
 800e086:	f7f5 fcc3 	bl	8003a10 <sys_now>
 800e08a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	4b0f      	ldr	r3, [pc, #60]	; (800e0d0 <lwip_cyclic_timer+0x5c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4413      	add	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	0fdb      	lsrs	r3, r3, #31
 800e0a0:	f003 0301 	and.w	r3, r3, #1
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d009      	beq.n	800e0be <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	4907      	ldr	r1, [pc, #28]	; (800e0d4 <lwip_cyclic_timer+0x60>)
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff ff6e 	bl	800df98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e0bc:	e004      	b.n	800e0c8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	4904      	ldr	r1, [pc, #16]	; (800e0d4 <lwip_cyclic_timer+0x60>)
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f7ff ff68 	bl	800df98 <sys_timeout_abs>
}
 800e0c8:	bf00      	nop
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	2000c46c 	.word	0x2000c46c
 800e0d4:	0800e075 	.word	0x0800e075

0800e0d8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e0de:	2301      	movs	r3, #1
 800e0e0:	607b      	str	r3, [r7, #4]
 800e0e2:	e00e      	b.n	800e102 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e0e4:	4a0b      	ldr	r2, [pc, #44]	; (800e114 <sys_timeouts_init+0x3c>)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	4a08      	ldr	r2, [pc, #32]	; (800e114 <sys_timeouts_init+0x3c>)
 800e0f2:	4413      	add	r3, r2
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	4908      	ldr	r1, [pc, #32]	; (800e118 <sys_timeouts_init+0x40>)
 800e0f8:	f000 f810 	bl	800e11c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3301      	adds	r3, #1
 800e100:	607b      	str	r3, [r7, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b04      	cmp	r3, #4
 800e106:	d9ed      	bls.n	800e0e4 <sys_timeouts_init+0xc>
  }
}
 800e108:	bf00      	nop
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	0801a3dc 	.word	0x0801a3dc
 800e118:	0800e075 	.word	0x0800e075

0800e11c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b086      	sub	sp, #24
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e12e:	d306      	bcc.n	800e13e <sys_timeout+0x22>
 800e130:	4b0a      	ldr	r3, [pc, #40]	; (800e15c <sys_timeout+0x40>)
 800e132:	f240 1229 	movw	r2, #297	; 0x129
 800e136:	490a      	ldr	r1, [pc, #40]	; (800e160 <sys_timeout+0x44>)
 800e138:	480a      	ldr	r0, [pc, #40]	; (800e164 <sys_timeout+0x48>)
 800e13a:	f005 fe9d 	bl	8013e78 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e13e:	f7f5 fc67 	bl	8003a10 <sys_now>
 800e142:	4602      	mov	r2, r0
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	4413      	add	r3, r2
 800e148:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	6978      	ldr	r0, [r7, #20]
 800e150:	f7ff ff22 	bl	800df98 <sys_timeout_abs>
#endif
}
 800e154:	bf00      	nop
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	0801940c 	.word	0x0801940c
 800e160:	080194a8 	.word	0x080194a8
 800e164:	08019480 	.word	0x08019480

0800e168 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e16e:	f7f5 fc4f 	bl	8003a10 <sys_now>
 800e172:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e174:	4b17      	ldr	r3, [pc, #92]	; (800e1d4 <sys_check_timeouts+0x6c>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d022      	beq.n	800e1c6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	0fdb      	lsrs	r3, r3, #31
 800e18a:	f003 0301 	and.w	r3, r3, #1
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	d11a      	bne.n	800e1ca <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a0e      	ldr	r2, [pc, #56]	; (800e1d4 <sys_check_timeouts+0x6c>)
 800e19a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	4a0a      	ldr	r2, [pc, #40]	; (800e1d8 <sys_check_timeouts+0x70>)
 800e1ae:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e1b0:	68b9      	ldr	r1, [r7, #8]
 800e1b2:	200a      	movs	r0, #10
 800e1b4:	f7f9 fc1a 	bl	80079ec <memp_free>
    if (handler != NULL) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0da      	beq.n	800e174 <sys_check_timeouts+0xc>
      handler(arg);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6838      	ldr	r0, [r7, #0]
 800e1c2:	4798      	blx	r3
  do {
 800e1c4:	e7d6      	b.n	800e174 <sys_check_timeouts+0xc>
      return;
 800e1c6:	bf00      	nop
 800e1c8:	e000      	b.n	800e1cc <sys_check_timeouts+0x64>
      return;
 800e1ca:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	2000c468 	.word	0x2000c468
 800e1d8:	2000c46c 	.word	0x2000c46c

0800e1dc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e1e2:	4b16      	ldr	r3, [pc, #88]	; (800e23c <sys_timeouts_sleeptime+0x60>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d102      	bne.n	800e1f0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ee:	e020      	b.n	800e232 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800e1f0:	f7f5 fc0e 	bl	8003a10 <sys_now>
 800e1f4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e1f6:	4b11      	ldr	r3, [pc, #68]	; (800e23c <sys_timeouts_sleeptime+0x60>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	685a      	ldr	r2, [r3, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	0fdb      	lsrs	r3, r3, #31
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	b2db      	uxtb	r3, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <sys_timeouts_sleeptime+0x34>
    return 0;
 800e20c:	2300      	movs	r3, #0
 800e20e:	e010      	b.n	800e232 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800e210:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <sys_timeouts_sleeptime+0x60>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	da06      	bge.n	800e230 <sys_timeouts_sleeptime+0x54>
 800e222:	4b07      	ldr	r3, [pc, #28]	; (800e240 <sys_timeouts_sleeptime+0x64>)
 800e224:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e228:	4906      	ldr	r1, [pc, #24]	; (800e244 <sys_timeouts_sleeptime+0x68>)
 800e22a:	4807      	ldr	r0, [pc, #28]	; (800e248 <sys_timeouts_sleeptime+0x6c>)
 800e22c:	f005 fe24 	bl	8013e78 <iprintf>
    return ret;
 800e230:	683b      	ldr	r3, [r7, #0]
  }
}
 800e232:	4618      	mov	r0, r3
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	2000c468 	.word	0x2000c468
 800e240:	0801940c 	.word	0x0801940c
 800e244:	080194e0 	.word	0x080194e0
 800e248:	08019480 	.word	0x08019480

0800e24c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e250:	f005 fd12 	bl	8013c78 <rand>
 800e254:	4603      	mov	r3, r0
 800e256:	b29b      	uxth	r3, r3
 800e258:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e262:	b29a      	uxth	r2, r3
 800e264:	4b01      	ldr	r3, [pc, #4]	; (800e26c <udp_init+0x20>)
 800e266:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e268:	bf00      	nop
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	2000002c 	.word	0x2000002c

0800e270 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e27a:	4b17      	ldr	r3, [pc, #92]	; (800e2d8 <udp_new_port+0x68>)
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	1c5a      	adds	r2, r3, #1
 800e280:	b291      	uxth	r1, r2
 800e282:	4a15      	ldr	r2, [pc, #84]	; (800e2d8 <udp_new_port+0x68>)
 800e284:	8011      	strh	r1, [r2, #0]
 800e286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d103      	bne.n	800e296 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e28e:	4b12      	ldr	r3, [pc, #72]	; (800e2d8 <udp_new_port+0x68>)
 800e290:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e294:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e296:	4b11      	ldr	r3, [pc, #68]	; (800e2dc <udp_new_port+0x6c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	e011      	b.n	800e2c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	8a5a      	ldrh	r2, [r3, #18]
 800e2a2:	4b0d      	ldr	r3, [pc, #52]	; (800e2d8 <udp_new_port+0x68>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d108      	bne.n	800e2bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	80fb      	strh	r3, [r7, #6]
 800e2b0:	88fb      	ldrh	r3, [r7, #6]
 800e2b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2b6:	d3e0      	bcc.n	800e27a <udp_new_port+0xa>
        return 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e007      	b.n	800e2cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	603b      	str	r3, [r7, #0]
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1ea      	bne.n	800e29e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e2c8:	4b03      	ldr	r3, [pc, #12]	; (800e2d8 <udp_new_port+0x68>)
 800e2ca:	881b      	ldrh	r3, [r3, #0]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	2000002c 	.word	0x2000002c
 800e2dc:	2000c474 	.word	0x2000c474

0800e2e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d105      	bne.n	800e300 <udp_input_local_match+0x20>
 800e2f4:	4b27      	ldr	r3, [pc, #156]	; (800e394 <udp_input_local_match+0xb4>)
 800e2f6:	2287      	movs	r2, #135	; 0x87
 800e2f8:	4927      	ldr	r1, [pc, #156]	; (800e398 <udp_input_local_match+0xb8>)
 800e2fa:	4828      	ldr	r0, [pc, #160]	; (800e39c <udp_input_local_match+0xbc>)
 800e2fc:	f005 fdbc 	bl	8013e78 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d105      	bne.n	800e312 <udp_input_local_match+0x32>
 800e306:	4b23      	ldr	r3, [pc, #140]	; (800e394 <udp_input_local_match+0xb4>)
 800e308:	2288      	movs	r2, #136	; 0x88
 800e30a:	4925      	ldr	r1, [pc, #148]	; (800e3a0 <udp_input_local_match+0xc0>)
 800e30c:	4823      	ldr	r0, [pc, #140]	; (800e39c <udp_input_local_match+0xbc>)
 800e30e:	f005 fdb3 	bl	8013e78 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	7a1b      	ldrb	r3, [r3, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00b      	beq.n	800e332 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	7a1a      	ldrb	r2, [r3, #8]
 800e31e:	4b21      	ldr	r3, [pc, #132]	; (800e3a4 <udp_input_local_match+0xc4>)
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e326:	3301      	adds	r3, #1
 800e328:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d001      	beq.n	800e332 <udp_input_local_match+0x52>
    return 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	e02b      	b.n	800e38a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d018      	beq.n	800e36a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d013      	beq.n	800e366 <udp_input_local_match+0x86>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00f      	beq.n	800e366 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e346:	4b17      	ldr	r3, [pc, #92]	; (800e3a4 <udp_input_local_match+0xc4>)
 800e348:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d00a      	beq.n	800e366 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <udp_input_local_match+0xc4>)
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	405a      	eors	r2, r3
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	3308      	adds	r3, #8
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e362:	2b00      	cmp	r3, #0
 800e364:	d110      	bne.n	800e388 <udp_input_local_match+0xa8>
          return 1;
 800e366:	2301      	movs	r3, #1
 800e368:	e00f      	b.n	800e38a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d009      	beq.n	800e384 <udp_input_local_match+0xa4>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <udp_input_local_match+0xa4>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	4b09      	ldr	r3, [pc, #36]	; (800e3a4 <udp_input_local_match+0xc4>)
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	429a      	cmp	r2, r3
 800e382:	d101      	bne.n	800e388 <udp_input_local_match+0xa8>
        return 1;
 800e384:	2301      	movs	r3, #1
 800e386:	e000      	b.n	800e38a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	080194f4 	.word	0x080194f4
 800e398:	08019524 	.word	0x08019524
 800e39c:	08019548 	.word	0x08019548
 800e3a0:	08019570 	.word	0x08019570
 800e3a4:	20008ca4 	.word	0x20008ca4

0800e3a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b08d      	sub	sp, #52	; 0x34
 800e3ac:	af02      	add	r7, sp, #8
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d105      	bne.n	800e3c8 <udp_input+0x20>
 800e3bc:	4b7c      	ldr	r3, [pc, #496]	; (800e5b0 <udp_input+0x208>)
 800e3be:	22cf      	movs	r2, #207	; 0xcf
 800e3c0:	497c      	ldr	r1, [pc, #496]	; (800e5b4 <udp_input+0x20c>)
 800e3c2:	487d      	ldr	r0, [pc, #500]	; (800e5b8 <udp_input+0x210>)
 800e3c4:	f005 fd58 	bl	8013e78 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d105      	bne.n	800e3da <udp_input+0x32>
 800e3ce:	4b78      	ldr	r3, [pc, #480]	; (800e5b0 <udp_input+0x208>)
 800e3d0:	22d0      	movs	r2, #208	; 0xd0
 800e3d2:	497a      	ldr	r1, [pc, #488]	; (800e5bc <udp_input+0x214>)
 800e3d4:	4878      	ldr	r0, [pc, #480]	; (800e5b8 <udp_input+0x210>)
 800e3d6:	f005 fd4f 	bl	8013e78 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	895b      	ldrh	r3, [r3, #10]
 800e3de:	2b07      	cmp	r3, #7
 800e3e0:	d803      	bhi.n	800e3ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7fa f9b2 	bl	800874c <pbuf_free>
    goto end;
 800e3e8:	e0de      	b.n	800e5a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e3f0:	4b73      	ldr	r3, [pc, #460]	; (800e5c0 <udp_input+0x218>)
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	4a72      	ldr	r2, [pc, #456]	; (800e5c0 <udp_input+0x218>)
 800e3f6:	6812      	ldr	r2, [r2, #0]
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f003 fe06 	bl	801200c <ip4_addr_isbroadcast_u32>
 800e400:	4603      	mov	r3, r0
 800e402:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	b29b      	uxth	r3, r3
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f8 fda0 	bl	8006f50 <lwip_htons>
 800e410:	4603      	mov	r3, r0
 800e412:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	885b      	ldrh	r3, [r3, #2]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f8 fd98 	bl	8006f50 <lwip_htons>
 800e420:	4603      	mov	r3, r0
 800e422:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e424:	2300      	movs	r3, #0
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e42c:	2300      	movs	r3, #0
 800e42e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e430:	4b64      	ldr	r3, [pc, #400]	; (800e5c4 <udp_input+0x21c>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	627b      	str	r3, [r7, #36]	; 0x24
 800e436:	e054      	b.n	800e4e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	8a5b      	ldrh	r3, [r3, #18]
 800e43c:	89fa      	ldrh	r2, [r7, #14]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d14a      	bne.n	800e4d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e442:	7cfb      	ldrb	r3, [r7, #19]
 800e444:	461a      	mov	r2, r3
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e44a:	f7ff ff49 	bl	800e2e0 <udp_input_local_match>
 800e44e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e450:	2b00      	cmp	r3, #0
 800e452:	d041      	beq.n	800e4d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	7c1b      	ldrb	r3, [r3, #16]
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d11d      	bne.n	800e49c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d102      	bne.n	800e46c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	61fb      	str	r3, [r7, #28]
 800e46a:	e017      	b.n	800e49c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e46c:	7cfb      	ldrb	r3, [r7, #19]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d014      	beq.n	800e49c <udp_input+0xf4>
 800e472:	4b53      	ldr	r3, [pc, #332]	; (800e5c0 <udp_input+0x218>)
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47a:	d10f      	bne.n	800e49c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	3304      	adds	r3, #4
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	429a      	cmp	r2, r3
 800e488:	d008      	beq.n	800e49c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	3304      	adds	r3, #4
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	429a      	cmp	r2, r3
 800e496:	d101      	bne.n	800e49c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49e:	8a9b      	ldrh	r3, [r3, #20]
 800e4a0:	8a3a      	ldrh	r2, [r7, #16]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d118      	bne.n	800e4d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d005      	beq.n	800e4ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	4b43      	ldr	r3, [pc, #268]	; (800e5c0 <udp_input+0x218>)
 800e4b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d10e      	bne.n	800e4d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d014      	beq.n	800e4ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	68da      	ldr	r2, [r3, #12]
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e4c8:	4b3e      	ldr	r3, [pc, #248]	; (800e5c4 <udp_input+0x21c>)
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e4d0:	4a3c      	ldr	r2, [pc, #240]	; (800e5c4 <udp_input+0x21c>)
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e4d6:	e008      	b.n	800e4ea <udp_input+0x142>
      }
    }

    prev = pcb;
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1a7      	bne.n	800e438 <udp_input+0x90>
 800e4e8:	e000      	b.n	800e4ec <udp_input+0x144>
        break;
 800e4ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <udp_input+0x15a>
    for_us = 1;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	76fb      	strb	r3, [r7, #27]
 800e500:	e00a      	b.n	800e518 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	3304      	adds	r3, #4
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	4b2d      	ldr	r3, [pc, #180]	; (800e5c0 <udp_input+0x218>)
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	bf0c      	ite	eq
 800e510:	2301      	moveq	r3, #1
 800e512:	2300      	movne	r3, #0
 800e514:	b2db      	uxtb	r3, r3
 800e516:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e518:	7efb      	ldrb	r3, [r7, #27]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d041      	beq.n	800e5a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e51e:	2108      	movs	r1, #8
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7fa f88d 	bl	8008640 <pbuf_remove_header>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00a      	beq.n	800e542 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e52c:	4b20      	ldr	r3, [pc, #128]	; (800e5b0 <udp_input+0x208>)
 800e52e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e532:	4925      	ldr	r1, [pc, #148]	; (800e5c8 <udp_input+0x220>)
 800e534:	4820      	ldr	r0, [pc, #128]	; (800e5b8 <udp_input+0x210>)
 800e536:	f005 fc9f 	bl	8013e78 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7fa f906 	bl	800874c <pbuf_free>
      goto end;
 800e540:	e032      	b.n	800e5a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	d012      	beq.n	800e56e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00a      	beq.n	800e566 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	699c      	ldr	r4, [r3, #24]
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	69d8      	ldr	r0, [r3, #28]
 800e558:	8a3b      	ldrh	r3, [r7, #16]
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	4b1b      	ldr	r3, [pc, #108]	; (800e5cc <udp_input+0x224>)
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e562:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e564:	e021      	b.n	800e5aa <udp_input+0x202>
        pbuf_free(p);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7fa f8f0 	bl	800874c <pbuf_free>
        goto end;
 800e56c:	e01c      	b.n	800e5a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e56e:	7cfb      	ldrb	r3, [r7, #19]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d112      	bne.n	800e59a <udp_input+0x1f2>
 800e574:	4b12      	ldr	r3, [pc, #72]	; (800e5c0 <udp_input+0x218>)
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e57c:	2be0      	cmp	r3, #224	; 0xe0
 800e57e:	d00c      	beq.n	800e59a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e580:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <udp_input+0x218>)
 800e582:	899b      	ldrh	r3, [r3, #12]
 800e584:	3308      	adds	r3, #8
 800e586:	b29b      	uxth	r3, r3
 800e588:	b21b      	sxth	r3, r3
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7fa f8ca 	bl	8008726 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e592:	2103      	movs	r1, #3
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f003 f9fb 	bl	8011990 <icmp_dest_unreach>
      pbuf_free(p);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7fa f8d6 	bl	800874c <pbuf_free>
  return;
 800e5a0:	e003      	b.n	800e5aa <udp_input+0x202>
    pbuf_free(p);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7fa f8d2 	bl	800874c <pbuf_free>
  return;
 800e5a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e5aa:	372c      	adds	r7, #44	; 0x2c
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd90      	pop	{r4, r7, pc}
 800e5b0:	080194f4 	.word	0x080194f4
 800e5b4:	08019598 	.word	0x08019598
 800e5b8:	08019548 	.word	0x08019548
 800e5bc:	080195b0 	.word	0x080195b0
 800e5c0:	20008ca4 	.word	0x20008ca4
 800e5c4:	2000c474 	.word	0x2000c474
 800e5c8:	080195cc 	.word	0x080195cc
 800e5cc:	20008cb4 	.word	0x20008cb4

0800e5d0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af02      	add	r7, sp, #8
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
 800e5dc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d109      	bne.n	800e5f8 <udp_sendto_if+0x28>
 800e5e4:	4b2e      	ldr	r3, [pc, #184]	; (800e6a0 <udp_sendto_if+0xd0>)
 800e5e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5ea:	492e      	ldr	r1, [pc, #184]	; (800e6a4 <udp_sendto_if+0xd4>)
 800e5ec:	482e      	ldr	r0, [pc, #184]	; (800e6a8 <udp_sendto_if+0xd8>)
 800e5ee:	f005 fc43 	bl	8013e78 <iprintf>
 800e5f2:	f06f 030f 	mvn.w	r3, #15
 800e5f6:	e04f      	b.n	800e698 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d109      	bne.n	800e612 <udp_sendto_if+0x42>
 800e5fe:	4b28      	ldr	r3, [pc, #160]	; (800e6a0 <udp_sendto_if+0xd0>)
 800e600:	f240 2281 	movw	r2, #641	; 0x281
 800e604:	4929      	ldr	r1, [pc, #164]	; (800e6ac <udp_sendto_if+0xdc>)
 800e606:	4828      	ldr	r0, [pc, #160]	; (800e6a8 <udp_sendto_if+0xd8>)
 800e608:	f005 fc36 	bl	8013e78 <iprintf>
 800e60c:	f06f 030f 	mvn.w	r3, #15
 800e610:	e042      	b.n	800e698 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d109      	bne.n	800e62c <udp_sendto_if+0x5c>
 800e618:	4b21      	ldr	r3, [pc, #132]	; (800e6a0 <udp_sendto_if+0xd0>)
 800e61a:	f240 2282 	movw	r2, #642	; 0x282
 800e61e:	4924      	ldr	r1, [pc, #144]	; (800e6b0 <udp_sendto_if+0xe0>)
 800e620:	4821      	ldr	r0, [pc, #132]	; (800e6a8 <udp_sendto_if+0xd8>)
 800e622:	f005 fc29 	bl	8013e78 <iprintf>
 800e626:	f06f 030f 	mvn.w	r3, #15
 800e62a:	e035      	b.n	800e698 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d109      	bne.n	800e646 <udp_sendto_if+0x76>
 800e632:	4b1b      	ldr	r3, [pc, #108]	; (800e6a0 <udp_sendto_if+0xd0>)
 800e634:	f240 2283 	movw	r2, #643	; 0x283
 800e638:	491e      	ldr	r1, [pc, #120]	; (800e6b4 <udp_sendto_if+0xe4>)
 800e63a:	481b      	ldr	r0, [pc, #108]	; (800e6a8 <udp_sendto_if+0xd8>)
 800e63c:	f005 fc1c 	bl	8013e78 <iprintf>
 800e640:	f06f 030f 	mvn.w	r3, #15
 800e644:	e028      	b.n	800e698 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d009      	beq.n	800e660 <udp_sendto_if+0x90>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d005      	beq.n	800e660 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e65c:	2be0      	cmp	r3, #224	; 0xe0
 800e65e:	d103      	bne.n	800e668 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e660:	6a3b      	ldr	r3, [r7, #32]
 800e662:	3304      	adds	r3, #4
 800e664:	617b      	str	r3, [r7, #20]
 800e666:	e00b      	b.n	800e680 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	6a3b      	ldr	r3, [r7, #32]
 800e66e:	3304      	adds	r3, #4
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	429a      	cmp	r2, r3
 800e674:	d002      	beq.n	800e67c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e676:	f06f 0303 	mvn.w	r3, #3
 800e67a:	e00d      	b.n	800e698 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e680:	887a      	ldrh	r2, [r7, #2]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	4613      	mov	r3, r2
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	68b9      	ldr	r1, [r7, #8]
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f000 f811 	bl	800e6b8 <udp_sendto_if_src>
 800e696:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	080194f4 	.word	0x080194f4
 800e6a4:	08019668 	.word	0x08019668
 800e6a8:	08019548 	.word	0x08019548
 800e6ac:	08019684 	.word	0x08019684
 800e6b0:	080196a0 	.word	0x080196a0
 800e6b4:	080196c0 	.word	0x080196c0

0800e6b8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08c      	sub	sp, #48	; 0x30
 800e6bc:	af04      	add	r7, sp, #16
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
 800e6c4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d109      	bne.n	800e6e0 <udp_sendto_if_src+0x28>
 800e6cc:	4b65      	ldr	r3, [pc, #404]	; (800e864 <udp_sendto_if_src+0x1ac>)
 800e6ce:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e6d2:	4965      	ldr	r1, [pc, #404]	; (800e868 <udp_sendto_if_src+0x1b0>)
 800e6d4:	4865      	ldr	r0, [pc, #404]	; (800e86c <udp_sendto_if_src+0x1b4>)
 800e6d6:	f005 fbcf 	bl	8013e78 <iprintf>
 800e6da:	f06f 030f 	mvn.w	r3, #15
 800e6de:	e0bc      	b.n	800e85a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <udp_sendto_if_src+0x42>
 800e6e6:	4b5f      	ldr	r3, [pc, #380]	; (800e864 <udp_sendto_if_src+0x1ac>)
 800e6e8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e6ec:	4960      	ldr	r1, [pc, #384]	; (800e870 <udp_sendto_if_src+0x1b8>)
 800e6ee:	485f      	ldr	r0, [pc, #380]	; (800e86c <udp_sendto_if_src+0x1b4>)
 800e6f0:	f005 fbc2 	bl	8013e78 <iprintf>
 800e6f4:	f06f 030f 	mvn.w	r3, #15
 800e6f8:	e0af      	b.n	800e85a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d109      	bne.n	800e714 <udp_sendto_if_src+0x5c>
 800e700:	4b58      	ldr	r3, [pc, #352]	; (800e864 <udp_sendto_if_src+0x1ac>)
 800e702:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e706:	495b      	ldr	r1, [pc, #364]	; (800e874 <udp_sendto_if_src+0x1bc>)
 800e708:	4858      	ldr	r0, [pc, #352]	; (800e86c <udp_sendto_if_src+0x1b4>)
 800e70a:	f005 fbb5 	bl	8013e78 <iprintf>
 800e70e:	f06f 030f 	mvn.w	r3, #15
 800e712:	e0a2      	b.n	800e85a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	2b00      	cmp	r3, #0
 800e718:	d109      	bne.n	800e72e <udp_sendto_if_src+0x76>
 800e71a:	4b52      	ldr	r3, [pc, #328]	; (800e864 <udp_sendto_if_src+0x1ac>)
 800e71c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e720:	4955      	ldr	r1, [pc, #340]	; (800e878 <udp_sendto_if_src+0x1c0>)
 800e722:	4852      	ldr	r0, [pc, #328]	; (800e86c <udp_sendto_if_src+0x1b4>)
 800e724:	f005 fba8 	bl	8013e78 <iprintf>
 800e728:	f06f 030f 	mvn.w	r3, #15
 800e72c:	e095      	b.n	800e85a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e730:	2b00      	cmp	r3, #0
 800e732:	d109      	bne.n	800e748 <udp_sendto_if_src+0x90>
 800e734:	4b4b      	ldr	r3, [pc, #300]	; (800e864 <udp_sendto_if_src+0x1ac>)
 800e736:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e73a:	4950      	ldr	r1, [pc, #320]	; (800e87c <udp_sendto_if_src+0x1c4>)
 800e73c:	484b      	ldr	r0, [pc, #300]	; (800e86c <udp_sendto_if_src+0x1b4>)
 800e73e:	f005 fb9b 	bl	8013e78 <iprintf>
 800e742:	f06f 030f 	mvn.w	r3, #15
 800e746:	e088      	b.n	800e85a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	8a5b      	ldrh	r3, [r3, #18]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10f      	bne.n	800e770 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e750:	68f9      	ldr	r1, [r7, #12]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	8a5b      	ldrh	r3, [r3, #18]
 800e756:	461a      	mov	r2, r3
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 f893 	bl	800e884 <udp_bind>
 800e75e:	4603      	mov	r3, r0
 800e760:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e762:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d002      	beq.n	800e770 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e76a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e76e:	e074      	b.n	800e85a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	891b      	ldrh	r3, [r3, #8]
 800e774:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e778:	4293      	cmp	r3, r2
 800e77a:	d902      	bls.n	800e782 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e77c:	f04f 33ff 	mov.w	r3, #4294967295
 800e780:	e06b      	b.n	800e85a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e782:	2108      	movs	r1, #8
 800e784:	68b8      	ldr	r0, [r7, #8]
 800e786:	f7f9 ff4b 	bl	8008620 <pbuf_add_header>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d015      	beq.n	800e7bc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e790:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e794:	2108      	movs	r1, #8
 800e796:	2022      	movs	r0, #34	; 0x22
 800e798:	f7f9 fcf4 	bl	8008184 <pbuf_alloc>
 800e79c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a8:	e057      	b.n	800e85a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	891b      	ldrh	r3, [r3, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d006      	beq.n	800e7c0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e7b2:	68b9      	ldr	r1, [r7, #8]
 800e7b4:	69f8      	ldr	r0, [r7, #28]
 800e7b6:	f7fa f8ed 	bl	8008994 <pbuf_chain>
 800e7ba:	e001      	b.n	800e7c0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	895b      	ldrh	r3, [r3, #10]
 800e7c4:	2b07      	cmp	r3, #7
 800e7c6:	d806      	bhi.n	800e7d6 <udp_sendto_if_src+0x11e>
 800e7c8:	4b26      	ldr	r3, [pc, #152]	; (800e864 <udp_sendto_if_src+0x1ac>)
 800e7ca:	f240 320d 	movw	r2, #781	; 0x30d
 800e7ce:	492c      	ldr	r1, [pc, #176]	; (800e880 <udp_sendto_if_src+0x1c8>)
 800e7d0:	4826      	ldr	r0, [pc, #152]	; (800e86c <udp_sendto_if_src+0x1b4>)
 800e7d2:	f005 fb51 	bl	8013e78 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	8a5b      	ldrh	r3, [r3, #18]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7f8 fbb5 	bl	8006f50 <lwip_htons>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e7ee:	887b      	ldrh	r3, [r7, #2]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7f8 fbad 	bl	8006f50 <lwip_htons>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	2200      	movs	r2, #0
 800e802:	719a      	strb	r2, [r3, #6]
 800e804:	2200      	movs	r2, #0
 800e806:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	891b      	ldrh	r3, [r3, #8]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7f8 fb9f 	bl	8006f50 <lwip_htons>
 800e812:	4603      	mov	r3, r0
 800e814:	461a      	mov	r2, r3
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e81a:	2311      	movs	r3, #17
 800e81c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	7adb      	ldrb	r3, [r3, #11]
 800e822:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	7a9b      	ldrb	r3, [r3, #10]
 800e828:	7cb9      	ldrb	r1, [r7, #18]
 800e82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e82c:	9202      	str	r2, [sp, #8]
 800e82e:	7cfa      	ldrb	r2, [r7, #19]
 800e830:	9201      	str	r2, [sp, #4]
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	460b      	mov	r3, r1
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e83a:	69f8      	ldr	r0, [r7, #28]
 800e83c:	f003 fb38 	bl	8011eb0 <ip4_output_if_src>
 800e840:	4603      	mov	r3, r0
 800e842:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d004      	beq.n	800e856 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e84c:	69f8      	ldr	r0, [r7, #28]
 800e84e:	f7f9 ff7d 	bl	800874c <pbuf_free>
    q = NULL;
 800e852:	2300      	movs	r3, #0
 800e854:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e856:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3720      	adds	r7, #32
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	080194f4 	.word	0x080194f4
 800e868:	080196e0 	.word	0x080196e0
 800e86c:	08019548 	.word	0x08019548
 800e870:	08019700 	.word	0x08019700
 800e874:	08019720 	.word	0x08019720
 800e878:	08019744 	.word	0x08019744
 800e87c:	08019768 	.word	0x08019768
 800e880:	0801978c 	.word	0x0801978c

0800e884 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	4613      	mov	r3, r2
 800e890:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e898:	4b39      	ldr	r3, [pc, #228]	; (800e980 <udp_bind+0xfc>)
 800e89a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d109      	bne.n	800e8b6 <udp_bind+0x32>
 800e8a2:	4b38      	ldr	r3, [pc, #224]	; (800e984 <udp_bind+0x100>)
 800e8a4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e8a8:	4937      	ldr	r1, [pc, #220]	; (800e988 <udp_bind+0x104>)
 800e8aa:	4838      	ldr	r0, [pc, #224]	; (800e98c <udp_bind+0x108>)
 800e8ac:	f005 fae4 	bl	8013e78 <iprintf>
 800e8b0:	f06f 030f 	mvn.w	r3, #15
 800e8b4:	e060      	b.n	800e978 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e8ba:	4b35      	ldr	r3, [pc, #212]	; (800e990 <udp_bind+0x10c>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e009      	b.n	800e8d6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d102      	bne.n	800e8d0 <udp_bind+0x4c>
      rebind = 1;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	74fb      	strb	r3, [r7, #19]
      break;
 800e8ce:	e005      	b.n	800e8dc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	617b      	str	r3, [r7, #20]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1f2      	bne.n	800e8c2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e8dc:	88fb      	ldrh	r3, [r7, #6]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d109      	bne.n	800e8f6 <udp_bind+0x72>
    port = udp_new_port();
 800e8e2:	f7ff fcc5 	bl	800e270 <udp_new_port>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e8ea:	88fb      	ldrh	r3, [r7, #6]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d12c      	bne.n	800e94a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e8f0:	f06f 0307 	mvn.w	r3, #7
 800e8f4:	e040      	b.n	800e978 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e8f6:	4b26      	ldr	r3, [pc, #152]	; (800e990 <udp_bind+0x10c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	617b      	str	r3, [r7, #20]
 800e8fc:	e022      	b.n	800e944 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	429a      	cmp	r2, r3
 800e904:	d01b      	beq.n	800e93e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	8a5b      	ldrh	r3, [r3, #18]
 800e90a:	88fa      	ldrh	r2, [r7, #6]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d116      	bne.n	800e93e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e918:	429a      	cmp	r2, r3
 800e91a:	d00d      	beq.n	800e938 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00a      	beq.n	800e938 <udp_bind+0xb4>
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d006      	beq.n	800e938 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e92a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d003      	beq.n	800e938 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d102      	bne.n	800e93e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e938:	f06f 0307 	mvn.w	r3, #7
 800e93c:	e01c      	b.n	800e978 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	617b      	str	r3, [r7, #20]
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1d9      	bne.n	800e8fe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <udp_bind+0xd2>
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	e000      	b.n	800e958 <udp_bind+0xd4>
 800e956:	2300      	movs	r3, #0
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	88fa      	ldrh	r2, [r7, #6]
 800e960:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e962:	7cfb      	ldrb	r3, [r7, #19]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d106      	bne.n	800e976 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e968:	4b09      	ldr	r3, [pc, #36]	; (800e990 <udp_bind+0x10c>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e970:	4a07      	ldr	r2, [pc, #28]	; (800e990 <udp_bind+0x10c>)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3718      	adds	r7, #24
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	0801a404 	.word	0x0801a404
 800e984:	080194f4 	.word	0x080194f4
 800e988:	080197bc 	.word	0x080197bc
 800e98c:	08019548 	.word	0x08019548
 800e990:	2000c474 	.word	0x2000c474

0800e994 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d109      	bne.n	800e9bc <udp_connect+0x28>
 800e9a8:	4b2c      	ldr	r3, [pc, #176]	; (800ea5c <udp_connect+0xc8>)
 800e9aa:	f240 4235 	movw	r2, #1077	; 0x435
 800e9ae:	492c      	ldr	r1, [pc, #176]	; (800ea60 <udp_connect+0xcc>)
 800e9b0:	482c      	ldr	r0, [pc, #176]	; (800ea64 <udp_connect+0xd0>)
 800e9b2:	f005 fa61 	bl	8013e78 <iprintf>
 800e9b6:	f06f 030f 	mvn.w	r3, #15
 800e9ba:	e04b      	b.n	800ea54 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d109      	bne.n	800e9d6 <udp_connect+0x42>
 800e9c2:	4b26      	ldr	r3, [pc, #152]	; (800ea5c <udp_connect+0xc8>)
 800e9c4:	f240 4236 	movw	r2, #1078	; 0x436
 800e9c8:	4927      	ldr	r1, [pc, #156]	; (800ea68 <udp_connect+0xd4>)
 800e9ca:	4826      	ldr	r0, [pc, #152]	; (800ea64 <udp_connect+0xd0>)
 800e9cc:	f005 fa54 	bl	8013e78 <iprintf>
 800e9d0:	f06f 030f 	mvn.w	r3, #15
 800e9d4:	e03e      	b.n	800ea54 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	8a5b      	ldrh	r3, [r3, #18]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10f      	bne.n	800e9fe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e9de:	68f9      	ldr	r1, [r7, #12]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	8a5b      	ldrh	r3, [r3, #18]
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7ff ff4c 	bl	800e884 <udp_bind>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e9f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <udp_connect+0x6a>
      return err;
 800e9f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9fc:	e02a      	b.n	800ea54 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <udp_connect+0x76>
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	e000      	b.n	800ea0c <udp_connect+0x78>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	88fa      	ldrh	r2, [r7, #6]
 800ea14:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	7c1b      	ldrb	r3, [r3, #16]
 800ea1a:	f043 0304 	orr.w	r3, r3, #4
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea24:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <udp_connect+0xd8>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	617b      	str	r3, [r7, #20]
 800ea2a:	e008      	b.n	800ea3e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d101      	bne.n	800ea38 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ea34:	2300      	movs	r3, #0
 800ea36:	e00d      	b.n	800ea54 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	617b      	str	r3, [r7, #20]
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1f3      	bne.n	800ea2c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ea44:	4b09      	ldr	r3, [pc, #36]	; (800ea6c <udp_connect+0xd8>)
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ea4c:	4a07      	ldr	r2, [pc, #28]	; (800ea6c <udp_connect+0xd8>)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	080194f4 	.word	0x080194f4
 800ea60:	080197d4 	.word	0x080197d4
 800ea64:	08019548 	.word	0x08019548
 800ea68:	080197f0 	.word	0x080197f0
 800ea6c:	2000c474 	.word	0x2000c474

0800ea70 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d107      	bne.n	800ea92 <udp_recv+0x22>
 800ea82:	4b08      	ldr	r3, [pc, #32]	; (800eaa4 <udp_recv+0x34>)
 800ea84:	f240 428a 	movw	r2, #1162	; 0x48a
 800ea88:	4907      	ldr	r1, [pc, #28]	; (800eaa8 <udp_recv+0x38>)
 800ea8a:	4808      	ldr	r0, [pc, #32]	; (800eaac <udp_recv+0x3c>)
 800ea8c:	f005 f9f4 	bl	8013e78 <iprintf>
 800ea90:	e005      	b.n	800ea9e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	61da      	str	r2, [r3, #28]
}
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	080194f4 	.word	0x080194f4
 800eaa8:	08019828 	.word	0x08019828
 800eaac:	08019548 	.word	0x08019548

0800eab0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d107      	bne.n	800eace <udp_remove+0x1e>
 800eabe:	4b19      	ldr	r3, [pc, #100]	; (800eb24 <udp_remove+0x74>)
 800eac0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800eac4:	4918      	ldr	r1, [pc, #96]	; (800eb28 <udp_remove+0x78>)
 800eac6:	4819      	ldr	r0, [pc, #100]	; (800eb2c <udp_remove+0x7c>)
 800eac8:	f005 f9d6 	bl	8013e78 <iprintf>
 800eacc:	e026      	b.n	800eb1c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800eace:	4b18      	ldr	r3, [pc, #96]	; (800eb30 <udp_remove+0x80>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d105      	bne.n	800eae4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ead8:	4b15      	ldr	r3, [pc, #84]	; (800eb30 <udp_remove+0x80>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	4a14      	ldr	r2, [pc, #80]	; (800eb30 <udp_remove+0x80>)
 800eae0:	6013      	str	r3, [r2, #0]
 800eae2:	e017      	b.n	800eb14 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800eae4:	4b12      	ldr	r3, [pc, #72]	; (800eb30 <udp_remove+0x80>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	e010      	b.n	800eb0e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d009      	beq.n	800eb08 <udp_remove+0x58>
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d104      	bne.n	800eb08 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	60da      	str	r2, [r3, #12]
        break;
 800eb06:	e005      	b.n	800eb14 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d1eb      	bne.n	800eaec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7f8 ff68 	bl	80079ec <memp_free>
}
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	080194f4 	.word	0x080194f4
 800eb28:	08019840 	.word	0x08019840
 800eb2c:	08019548 	.word	0x08019548
 800eb30:	2000c474 	.word	0x2000c474

0800eb34 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f7f8 fee0 	bl	8007900 <memp_malloc>
 800eb40:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d007      	beq.n	800eb58 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800eb48:	2220      	movs	r2, #32
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f005 f9f8 	bl	8013f42 <memset>
    pcb->ttl = UDP_TTL;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	22ff      	movs	r2, #255	; 0xff
 800eb56:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800eb58:	687b      	ldr	r3, [r7, #4]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
	...

0800eb64 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d01e      	beq.n	800ebb2 <udp_netif_ip_addr_changed+0x4e>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d01a      	beq.n	800ebb2 <udp_netif_ip_addr_changed+0x4e>
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d017      	beq.n	800ebb2 <udp_netif_ip_addr_changed+0x4e>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d013      	beq.n	800ebb2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb8a:	4b0d      	ldr	r3, [pc, #52]	; (800ebc0 <udp_netif_ip_addr_changed+0x5c>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	e00c      	b.n	800ebac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d103      	bne.n	800eba6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1ef      	bne.n	800eb92 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ebb2:	bf00      	nop
 800ebb4:	3714      	adds	r7, #20
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	2000c474 	.word	0x2000c474

0800ebc4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800ebc8:	4b20      	ldr	r3, [pc, #128]	; (800ec4c <dhcp_inc_pcb_refcount+0x88>)
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d133      	bne.n	800ec38 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800ebd0:	4b1f      	ldr	r3, [pc, #124]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d005      	beq.n	800ebe4 <dhcp_inc_pcb_refcount+0x20>
 800ebd8:	4b1e      	ldr	r3, [pc, #120]	; (800ec54 <dhcp_inc_pcb_refcount+0x90>)
 800ebda:	22e5      	movs	r2, #229	; 0xe5
 800ebdc:	491e      	ldr	r1, [pc, #120]	; (800ec58 <dhcp_inc_pcb_refcount+0x94>)
 800ebde:	481f      	ldr	r0, [pc, #124]	; (800ec5c <dhcp_inc_pcb_refcount+0x98>)
 800ebe0:	f005 f94a 	bl	8013e78 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800ebe4:	f7ff ffa6 	bl	800eb34 <udp_new>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	4a19      	ldr	r2, [pc, #100]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ebec:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800ebee:	4b18      	ldr	r3, [pc, #96]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d102      	bne.n	800ebfc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800ebf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebfa:	e024      	b.n	800ec46 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800ebfc:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	7a5a      	ldrb	r2, [r3, #9]
 800ec02:	4b13      	ldr	r3, [pc, #76]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f042 0220 	orr.w	r2, r2, #32
 800ec0a:	b2d2      	uxtb	r2, r2
 800ec0c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800ec0e:	4b10      	ldr	r3, [pc, #64]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2244      	movs	r2, #68	; 0x44
 800ec14:	4912      	ldr	r1, [pc, #72]	; (800ec60 <dhcp_inc_pcb_refcount+0x9c>)
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff fe34 	bl	800e884 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800ec1c:	4b0c      	ldr	r3, [pc, #48]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2243      	movs	r2, #67	; 0x43
 800ec22:	490f      	ldr	r1, [pc, #60]	; (800ec60 <dhcp_inc_pcb_refcount+0x9c>)
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff feb5 	bl	800e994 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ec2a:	4b09      	ldr	r3, [pc, #36]	; (800ec50 <dhcp_inc_pcb_refcount+0x8c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	490c      	ldr	r1, [pc, #48]	; (800ec64 <dhcp_inc_pcb_refcount+0xa0>)
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff ff1c 	bl	800ea70 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800ec38:	4b04      	ldr	r3, [pc, #16]	; (800ec4c <dhcp_inc_pcb_refcount+0x88>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	4b02      	ldr	r3, [pc, #8]	; (800ec4c <dhcp_inc_pcb_refcount+0x88>)
 800ec42:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2000c4a4 	.word	0x2000c4a4
 800ec50:	2000c4a0 	.word	0x2000c4a0
 800ec54:	08019858 	.word	0x08019858
 800ec58:	08019890 	.word	0x08019890
 800ec5c:	080198b8 	.word	0x080198b8
 800ec60:	0801a404 	.word	0x0801a404
 800ec64:	080104f9 	.word	0x080104f9

0800ec68 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800ec6c:	4b0e      	ldr	r3, [pc, #56]	; (800eca8 <dhcp_dec_pcb_refcount+0x40>)
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d105      	bne.n	800ec80 <dhcp_dec_pcb_refcount+0x18>
 800ec74:	4b0d      	ldr	r3, [pc, #52]	; (800ecac <dhcp_dec_pcb_refcount+0x44>)
 800ec76:	22ff      	movs	r2, #255	; 0xff
 800ec78:	490d      	ldr	r1, [pc, #52]	; (800ecb0 <dhcp_dec_pcb_refcount+0x48>)
 800ec7a:	480e      	ldr	r0, [pc, #56]	; (800ecb4 <dhcp_dec_pcb_refcount+0x4c>)
 800ec7c:	f005 f8fc 	bl	8013e78 <iprintf>
  dhcp_pcb_refcount--;
 800ec80:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <dhcp_dec_pcb_refcount+0x40>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <dhcp_dec_pcb_refcount+0x40>)
 800ec8a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ec8c:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <dhcp_dec_pcb_refcount+0x40>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d107      	bne.n	800eca4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ec94:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <dhcp_dec_pcb_refcount+0x50>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff ff09 	bl	800eab0 <udp_remove>
    dhcp_pcb = NULL;
 800ec9e:	4b06      	ldr	r3, [pc, #24]	; (800ecb8 <dhcp_dec_pcb_refcount+0x50>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	601a      	str	r2, [r3, #0]
  }
}
 800eca4:	bf00      	nop
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	2000c4a4 	.word	0x2000c4a4
 800ecac:	08019858 	.word	0x08019858
 800ecb0:	080198e0 	.word	0x080198e0
 800ecb4:	080198b8 	.word	0x080198b8
 800ecb8:	2000c4a0 	.word	0x2000c4a0

0800ecbc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ecca:	210c      	movs	r1, #12
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f001 f855 	bl	800fd7c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ecd2:	4b06      	ldr	r3, [pc, #24]	; (800ecec <dhcp_handle_nak+0x30>)
 800ecd4:	4a05      	ldr	r2, [pc, #20]	; (800ecec <dhcp_handle_nak+0x30>)
 800ecd6:	4905      	ldr	r1, [pc, #20]	; (800ecec <dhcp_handle_nak+0x30>)
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f7f9 f829 	bl	8007d30 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fc48 	bl	800f574 <dhcp_discover>
}
 800ece4:	bf00      	nop
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	0801a404 	.word	0x0801a404

0800ecf0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ecfe:	2108      	movs	r1, #8
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f001 f83b 	bl	800fd7c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	331c      	adds	r3, #28
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f002 fb3c 	bl	801138c <etharp_query>
 800ed14:	4603      	mov	r3, r0
 800ed16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	799b      	ldrb	r3, [r3, #6]
 800ed1c:	2bff      	cmp	r3, #255	; 0xff
 800ed1e:	d005      	beq.n	800ed2c <dhcp_check+0x3c>
    dhcp->tries++;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	799b      	ldrb	r3, [r3, #6]
 800ed24:	3301      	adds	r3, #1
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800ed2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ed30:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ed32:	893b      	ldrh	r3, [r7, #8]
 800ed34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ed38:	4a06      	ldr	r2, [pc, #24]	; (800ed54 <dhcp_check+0x64>)
 800ed3a:	fb82 1203 	smull	r1, r2, r2, r3
 800ed3e:	1152      	asrs	r2, r2, #5
 800ed40:	17db      	asrs	r3, r3, #31
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800ed4a:	bf00      	nop
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	10624dd3 	.word	0x10624dd3

0800ed58 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800ed68:	4b0c      	ldr	r3, [pc, #48]	; (800ed9c <dhcp_handle_offer+0x44>)
 800ed6a:	789b      	ldrb	r3, [r3, #2]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d011      	beq.n	800ed94 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800ed76:	4b0a      	ldr	r3, [pc, #40]	; (800eda0 <dhcp_handle_offer+0x48>)
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f8 f8fd 	bl	8006f7a <lwip_htonl>
 800ed80:	4602      	mov	r2, r0
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	691a      	ldr	r2, [r3, #16]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f808 	bl	800eda4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800ed94:	bf00      	nop
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	2000c498 	.word	0x2000c498
 800eda0:	2000c478 	.word	0x2000c478

0800eda4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800eda4:	b5b0      	push	{r4, r5, r7, lr}
 800eda6:	b08a      	sub	sp, #40	; 0x28
 800eda8:	af02      	add	r7, sp, #8
 800edaa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d109      	bne.n	800edc6 <dhcp_select+0x22>
 800edb2:	4b71      	ldr	r3, [pc, #452]	; (800ef78 <dhcp_select+0x1d4>)
 800edb4:	f240 1277 	movw	r2, #375	; 0x177
 800edb8:	4970      	ldr	r1, [pc, #448]	; (800ef7c <dhcp_select+0x1d8>)
 800edba:	4871      	ldr	r0, [pc, #452]	; (800ef80 <dhcp_select+0x1dc>)
 800edbc:	f005 f85c 	bl	8013e78 <iprintf>
 800edc0:	f06f 030f 	mvn.w	r3, #15
 800edc4:	e0d3      	b.n	800ef6e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d109      	bne.n	800ede6 <dhcp_select+0x42>
 800edd2:	4b69      	ldr	r3, [pc, #420]	; (800ef78 <dhcp_select+0x1d4>)
 800edd4:	f240 1279 	movw	r2, #377	; 0x179
 800edd8:	496a      	ldr	r1, [pc, #424]	; (800ef84 <dhcp_select+0x1e0>)
 800edda:	4869      	ldr	r0, [pc, #420]	; (800ef80 <dhcp_select+0x1dc>)
 800eddc:	f005 f84c 	bl	8013e78 <iprintf>
 800ede0:	f06f 0305 	mvn.w	r3, #5
 800ede4:	e0c3      	b.n	800ef6e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ede6:	2101      	movs	r1, #1
 800ede8:	69b8      	ldr	r0, [r7, #24]
 800edea:	f000 ffc7 	bl	800fd7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800edee:	f107 030c 	add.w	r3, r7, #12
 800edf2:	2203      	movs	r2, #3
 800edf4:	69b9      	ldr	r1, [r7, #24]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f001 fc4c 	bl	8010694 <dhcp_create_msg>
 800edfc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 8085 	beq.w	800ef10 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ee0c:	89b8      	ldrh	r0, [r7, #12]
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ee14:	2302      	movs	r3, #2
 800ee16:	2239      	movs	r2, #57	; 0x39
 800ee18:	f000 ffca 	bl	800fdb0 <dhcp_option>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ee20:	89b8      	ldrh	r0, [r7, #12]
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	f001 f819 	bl	800fe64 <dhcp_option_short>
 800ee32:	4603      	mov	r3, r0
 800ee34:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ee36:	89b8      	ldrh	r0, [r7, #12]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ee3e:	2304      	movs	r3, #4
 800ee40:	2232      	movs	r2, #50	; 0x32
 800ee42:	f000 ffb5 	bl	800fdb0 <dhcp_option>
 800ee46:	4603      	mov	r3, r0
 800ee48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ee4a:	89bc      	ldrh	r4, [r7, #12]
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	69db      	ldr	r3, [r3, #28]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f8 f88f 	bl	8006f7a <lwip_htonl>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4629      	mov	r1, r5
 800ee62:	4620      	mov	r0, r4
 800ee64:	f001 f830 	bl	800fec8 <dhcp_option_long>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ee6c:	89b8      	ldrh	r0, [r7, #12]
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ee74:	2304      	movs	r3, #4
 800ee76:	2236      	movs	r2, #54	; 0x36
 800ee78:	f000 ff9a 	bl	800fdb0 <dhcp_option>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ee80:	89bc      	ldrh	r4, [r7, #12]
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f8 f874 	bl	8006f7a <lwip_htonl>
 800ee92:	4603      	mov	r3, r0
 800ee94:	461a      	mov	r2, r3
 800ee96:	4629      	mov	r1, r5
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f001 f815 	bl	800fec8 <dhcp_option_long>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800eea2:	89b8      	ldrh	r0, [r7, #12]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eeaa:	2303      	movs	r3, #3
 800eeac:	2237      	movs	r2, #55	; 0x37
 800eeae:	f000 ff7f 	bl	800fdb0 <dhcp_option>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	77bb      	strb	r3, [r7, #30]
 800eeba:	e00e      	b.n	800eeda <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eebc:	89b8      	ldrh	r0, [r7, #12]
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eec4:	7fbb      	ldrb	r3, [r7, #30]
 800eec6:	4a30      	ldr	r2, [pc, #192]	; (800ef88 <dhcp_select+0x1e4>)
 800eec8:	5cd3      	ldrb	r3, [r2, r3]
 800eeca:	461a      	mov	r2, r3
 800eecc:	f000 ffa4 	bl	800fe18 <dhcp_option_byte>
 800eed0:	4603      	mov	r3, r0
 800eed2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eed4:	7fbb      	ldrb	r3, [r7, #30]
 800eed6:	3301      	adds	r3, #1
 800eed8:	77bb      	strb	r3, [r7, #30]
 800eeda:	7fbb      	ldrb	r3, [r7, #30]
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d9ed      	bls.n	800eebc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eee0:	89b8      	ldrh	r0, [r7, #12]
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	33f0      	adds	r3, #240	; 0xf0
 800eee6:	697a      	ldr	r2, [r7, #20]
 800eee8:	4619      	mov	r1, r3
 800eeea:	f001 fca9 	bl	8010840 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800eeee:	4b27      	ldr	r3, [pc, #156]	; (800ef8c <dhcp_select+0x1e8>)
 800eef0:	6818      	ldr	r0, [r3, #0]
 800eef2:	4b27      	ldr	r3, [pc, #156]	; (800ef90 <dhcp_select+0x1ec>)
 800eef4:	9301      	str	r3, [sp, #4]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	2343      	movs	r3, #67	; 0x43
 800eefc:	4a25      	ldr	r2, [pc, #148]	; (800ef94 <dhcp_select+0x1f0>)
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	f7ff fbda 	bl	800e6b8 <udp_sendto_if_src>
 800ef04:	4603      	mov	r3, r0
 800ef06:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ef08:	6978      	ldr	r0, [r7, #20]
 800ef0a:	f7f9 fc1f 	bl	800874c <pbuf_free>
 800ef0e:	e001      	b.n	800ef14 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ef10:	23ff      	movs	r3, #255	; 0xff
 800ef12:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	799b      	ldrb	r3, [r3, #6]
 800ef18:	2bff      	cmp	r3, #255	; 0xff
 800ef1a:	d005      	beq.n	800ef28 <dhcp_select+0x184>
    dhcp->tries++;
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	799b      	ldrb	r3, [r3, #6]
 800ef20:	3301      	adds	r3, #1
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	799b      	ldrb	r3, [r3, #6]
 800ef2c:	2b05      	cmp	r3, #5
 800ef2e:	d80d      	bhi.n	800ef4c <dhcp_select+0x1a8>
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	799b      	ldrb	r3, [r3, #6]
 800ef34:	461a      	mov	r2, r3
 800ef36:	2301      	movs	r3, #1
 800ef38:	4093      	lsls	r3, r2
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	0152      	lsls	r2, r2, #5
 800ef40:	1ad2      	subs	r2, r2, r3
 800ef42:	0092      	lsls	r2, r2, #2
 800ef44:	4413      	add	r3, r2
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	e001      	b.n	800ef50 <dhcp_select+0x1ac>
 800ef4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ef50:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ef52:	89fb      	ldrh	r3, [r7, #14]
 800ef54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ef58:	4a0f      	ldr	r2, [pc, #60]	; (800ef98 <dhcp_select+0x1f4>)
 800ef5a:	fb82 1203 	smull	r1, r2, r2, r3
 800ef5e:	1152      	asrs	r2, r2, #5
 800ef60:	17db      	asrs	r3, r3, #31
 800ef62:	1ad3      	subs	r3, r2, r3
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ef6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3720      	adds	r7, #32
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bdb0      	pop	{r4, r5, r7, pc}
 800ef76:	bf00      	nop
 800ef78:	08019858 	.word	0x08019858
 800ef7c:	08019904 	.word	0x08019904
 800ef80:	080198b8 	.word	0x080198b8
 800ef84:	08019920 	.word	0x08019920
 800ef88:	20000030 	.word	0x20000030
 800ef8c:	2000c4a0 	.word	0x2000c4a0
 800ef90:	0801a404 	.word	0x0801a404
 800ef94:	0801a408 	.word	0x0801a408
 800ef98:	10624dd3 	.word	0x10624dd3

0800ef9c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800efa2:	4b27      	ldr	r3, [pc, #156]	; (800f040 <dhcp_coarse_tmr+0xa4>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	607b      	str	r3, [r7, #4]
 800efa8:	e042      	b.n	800f030 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d039      	beq.n	800f02a <dhcp_coarse_tmr+0x8e>
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	795b      	ldrb	r3, [r3, #5]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d035      	beq.n	800f02a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	8a9b      	ldrh	r3, [r3, #20]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d012      	beq.n	800efec <dhcp_coarse_tmr+0x50>
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	8a5b      	ldrh	r3, [r3, #18]
 800efca:	3301      	adds	r3, #1
 800efcc:	b29a      	uxth	r2, r3
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	825a      	strh	r2, [r3, #18]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	8a5a      	ldrh	r2, [r3, #18]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	8a9b      	ldrh	r3, [r3, #20]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d106      	bne.n	800efec <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 fe32 	bl	800fc48 <dhcp_release_and_stop>
        dhcp_start(netif);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 f969 	bl	800f2bc <dhcp_start>
 800efea:	e01e      	b.n	800f02a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	8a1b      	ldrh	r3, [r3, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00b      	beq.n	800f00c <dhcp_coarse_tmr+0x70>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	8a1b      	ldrh	r3, [r3, #16]
 800eff8:	1e5a      	subs	r2, r3, #1
 800effa:	b291      	uxth	r1, r2
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	8211      	strh	r1, [r2, #16]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d103      	bne.n	800f00c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 f8c6 	bl	800f196 <dhcp_t2_timeout>
 800f00a:	e00e      	b.n	800f02a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	89db      	ldrh	r3, [r3, #14]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00a      	beq.n	800f02a <dhcp_coarse_tmr+0x8e>
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	89db      	ldrh	r3, [r3, #14]
 800f018:	1e5a      	subs	r2, r3, #1
 800f01a:	b291      	uxth	r1, r2
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	81d1      	strh	r1, [r2, #14]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d102      	bne.n	800f02a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 f888 	bl	800f13a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	607b      	str	r3, [r7, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1b9      	bne.n	800efaa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800f036:	bf00      	nop
 800f038:	bf00      	nop
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	2000c40c 	.word	0x2000c40c

0800f044 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800f04a:	4b16      	ldr	r3, [pc, #88]	; (800f0a4 <dhcp_fine_tmr+0x60>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	607b      	str	r3, [r7, #4]
 800f050:	e020      	b.n	800f094 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f056:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d017      	beq.n	800f08e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	891b      	ldrh	r3, [r3, #8]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d906      	bls.n	800f074 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	891b      	ldrh	r3, [r3, #8]
 800f06a:	3b01      	subs	r3, #1
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	811a      	strh	r2, [r3, #8]
 800f072:	e00c      	b.n	800f08e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	891b      	ldrh	r3, [r3, #8]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d108      	bne.n	800f08e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	891b      	ldrh	r3, [r3, #8]
 800f080:	3b01      	subs	r3, #1
 800f082:	b29a      	uxth	r2, r3
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f80d 	bl	800f0a8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	607b      	str	r3, [r7, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1db      	bne.n	800f052 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800f09a:	bf00      	nop
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	2000c40c 	.word	0x2000c40c

0800f0a8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	795b      	ldrb	r3, [r3, #5]
 800f0ba:	2b0c      	cmp	r3, #12
 800f0bc:	d003      	beq.n	800f0c6 <dhcp_timeout+0x1e>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	795b      	ldrb	r3, [r3, #5]
 800f0c2:	2b06      	cmp	r3, #6
 800f0c4:	d103      	bne.n	800f0ce <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 fa54 	bl	800f574 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f0cc:	e031      	b.n	800f132 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	795b      	ldrb	r3, [r3, #5]
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d10e      	bne.n	800f0f4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	799b      	ldrb	r3, [r3, #6]
 800f0da:	2b05      	cmp	r3, #5
 800f0dc:	d803      	bhi.n	800f0e6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f7ff fe60 	bl	800eda4 <dhcp_select>
}
 800f0e4:	e025      	b.n	800f132 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 fdae 	bl	800fc48 <dhcp_release_and_stop>
      dhcp_start(netif);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 f8e5 	bl	800f2bc <dhcp_start>
}
 800f0f2:	e01e      	b.n	800f132 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	795b      	ldrb	r3, [r3, #5]
 800f0f8:	2b08      	cmp	r3, #8
 800f0fa:	d10b      	bne.n	800f114 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	799b      	ldrb	r3, [r3, #6]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d803      	bhi.n	800f10c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff fdf3 	bl	800ecf0 <dhcp_check>
}
 800f10a:	e012      	b.n	800f132 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 fad3 	bl	800f6b8 <dhcp_bind>
}
 800f112:	e00e      	b.n	800f132 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	795b      	ldrb	r3, [r3, #5]
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d10a      	bne.n	800f132 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	799b      	ldrb	r3, [r3, #6]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d803      	bhi.n	800f12c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 fcd9 	bl	800fadc <dhcp_reboot>
}
 800f12a:	e002      	b.n	800f132 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fa21 	bl	800f574 <dhcp_discover>
}
 800f132:	bf00      	nop
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b084      	sub	sp, #16
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f146:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	795b      	ldrb	r3, [r3, #5]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d007      	beq.n	800f160 <dhcp_t1_timeout+0x26>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	795b      	ldrb	r3, [r3, #5]
 800f154:	2b0a      	cmp	r3, #10
 800f156:	d003      	beq.n	800f160 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f15c:	2b05      	cmp	r3, #5
 800f15e:	d116      	bne.n	800f18e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fb83 	bl	800f86c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	899b      	ldrh	r3, [r3, #12]
 800f16a:	461a      	mov	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	8a5b      	ldrh	r3, [r3, #18]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	2b01      	cmp	r3, #1
 800f174:	dd0b      	ble.n	800f18e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	899b      	ldrh	r3, [r3, #12]
 800f17a:	461a      	mov	r2, r3
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	8a5b      	ldrh	r3, [r3, #18]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	0fda      	lsrs	r2, r3, #31
 800f184:	4413      	add	r3, r2
 800f186:	105b      	asrs	r3, r3, #1
 800f188:	b29a      	uxth	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f18e:	bf00      	nop
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b084      	sub	sp, #16
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	795b      	ldrb	r3, [r3, #5]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d00b      	beq.n	800f1c4 <dhcp_t2_timeout+0x2e>
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	795b      	ldrb	r3, [r3, #5]
 800f1b0:	2b0a      	cmp	r3, #10
 800f1b2:	d007      	beq.n	800f1c4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f1b8:	2b05      	cmp	r3, #5
 800f1ba:	d003      	beq.n	800f1c4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	795b      	ldrb	r3, [r3, #5]
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d116      	bne.n	800f1f2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 fbed 	bl	800f9a4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8a9b      	ldrh	r3, [r3, #20]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	8a5b      	ldrh	r3, [r3, #18]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	dd0b      	ble.n	800f1f2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	8a9b      	ldrh	r3, [r3, #20]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	8a5b      	ldrh	r3, [r3, #18]
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	0fda      	lsrs	r2, r3, #31
 800f1e8:	4413      	add	r3, r2
 800f1ea:	105b      	asrs	r3, r3, #1
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f1f2:	bf00      	nop
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
	...

0800f1fc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2200      	movs	r2, #0
 800f216:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f218:	4b26      	ldr	r3, [pc, #152]	; (800f2b4 <dhcp_handle_ack+0xb8>)
 800f21a:	78db      	ldrb	r3, [r3, #3]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d003      	beq.n	800f228 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f220:	4b25      	ldr	r3, [pc, #148]	; (800f2b8 <dhcp_handle_ack+0xbc>)
 800f222:	68da      	ldr	r2, [r3, #12]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f228:	4b22      	ldr	r3, [pc, #136]	; (800f2b4 <dhcp_handle_ack+0xb8>)
 800f22a:	791b      	ldrb	r3, [r3, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f230:	4b21      	ldr	r3, [pc, #132]	; (800f2b8 <dhcp_handle_ack+0xbc>)
 800f232:	691a      	ldr	r2, [r3, #16]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	62da      	str	r2, [r3, #44]	; 0x2c
 800f238:	e004      	b.n	800f244 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23e:	085a      	lsrs	r2, r3, #1
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f244:	4b1b      	ldr	r3, [pc, #108]	; (800f2b4 <dhcp_handle_ack+0xb8>)
 800f246:	795b      	ldrb	r3, [r3, #5]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f24c:	4b1a      	ldr	r3, [pc, #104]	; (800f2b8 <dhcp_handle_ack+0xbc>)
 800f24e:	695a      	ldr	r2, [r3, #20]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	631a      	str	r2, [r3, #48]	; 0x30
 800f254:	e007      	b.n	800f266 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f25a:	4613      	mov	r3, r2
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	1a9b      	subs	r3, r3, r2
 800f260:	08da      	lsrs	r2, r3, #3
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	691a      	ldr	r2, [r3, #16]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f26e:	4b11      	ldr	r3, [pc, #68]	; (800f2b4 <dhcp_handle_ack+0xb8>)
 800f270:	799b      	ldrb	r3, [r3, #6]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00b      	beq.n	800f28e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f276:	4b10      	ldr	r3, [pc, #64]	; (800f2b8 <dhcp_handle_ack+0xbc>)
 800f278:	699b      	ldr	r3, [r3, #24]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7f7 fe7d 	bl	8006f7a <lwip_htonl>
 800f280:	4602      	mov	r2, r0
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2201      	movs	r2, #1
 800f28a:	71da      	strb	r2, [r3, #7]
 800f28c:	e002      	b.n	800f294 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2200      	movs	r2, #0
 800f292:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f294:	4b07      	ldr	r3, [pc, #28]	; (800f2b4 <dhcp_handle_ack+0xb8>)
 800f296:	79db      	ldrb	r3, [r3, #7]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f29c:	4b06      	ldr	r3, [pc, #24]	; (800f2b8 <dhcp_handle_ack+0xbc>)
 800f29e:	69db      	ldr	r3, [r3, #28]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7f7 fe6a 	bl	8006f7a <lwip_htonl>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f2ac:	bf00      	nop
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	2000c498 	.word	0x2000c498
 800f2b8:	2000c478 	.word	0x2000c478

0800f2bc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <dhcp_start+0x22>
 800f2ca:	4b37      	ldr	r3, [pc, #220]	; (800f3a8 <dhcp_start+0xec>)
 800f2cc:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f2d0:	4936      	ldr	r1, [pc, #216]	; (800f3ac <dhcp_start+0xf0>)
 800f2d2:	4837      	ldr	r0, [pc, #220]	; (800f3b0 <dhcp_start+0xf4>)
 800f2d4:	f004 fdd0 	bl	8013e78 <iprintf>
 800f2d8:	f06f 030f 	mvn.w	r3, #15
 800f2dc:	e060      	b.n	800f3a0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2e4:	f003 0301 	and.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d109      	bne.n	800f300 <dhcp_start+0x44>
 800f2ec:	4b2e      	ldr	r3, [pc, #184]	; (800f3a8 <dhcp_start+0xec>)
 800f2ee:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f2f2:	4930      	ldr	r1, [pc, #192]	; (800f3b4 <dhcp_start+0xf8>)
 800f2f4:	482e      	ldr	r0, [pc, #184]	; (800f3b0 <dhcp_start+0xf4>)
 800f2f6:	f004 fdbf 	bl	8013e78 <iprintf>
 800f2fa:	f06f 030f 	mvn.w	r3, #15
 800f2fe:	e04f      	b.n	800f3a0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f304:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f30a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f30e:	d202      	bcs.n	800f316 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f310:	f04f 33ff 	mov.w	r3, #4294967295
 800f314:	e044      	b.n	800f3a0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10d      	bne.n	800f338 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f31c:	2034      	movs	r0, #52	; 0x34
 800f31e:	f7f8 f94b 	bl	80075b8 <mem_malloc>
 800f322:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f32a:	f04f 33ff 	mov.w	r3, #4294967295
 800f32e:	e037      	b.n	800f3a0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	625a      	str	r2, [r3, #36]	; 0x24
 800f336:	e005      	b.n	800f344 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	791b      	ldrb	r3, [r3, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f340:	f7ff fc92 	bl	800ec68 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f344:	2234      	movs	r2, #52	; 0x34
 800f346:	2100      	movs	r1, #0
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f004 fdfa 	bl	8013f42 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f34e:	f7ff fc39 	bl	800ebc4 <dhcp_inc_pcb_refcount>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d002      	beq.n	800f35e <dhcp_start+0xa2>
    return ERR_MEM;
 800f358:	f04f 33ff 	mov.w	r3, #4294967295
 800f35c:	e020      	b.n	800f3a0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2201      	movs	r2, #1
 800f362:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f36a:	f003 0304 	and.w	r3, r3, #4
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d105      	bne.n	800f37e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f372:	2102      	movs	r1, #2
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f000 fd01 	bl	800fd7c <dhcp_set_state>
    return ERR_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	e010      	b.n	800f3a0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f8f8 	bl	800f574 <dhcp_discover>
 800f384:	4603      	mov	r3, r0
 800f386:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f388:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d005      	beq.n	800f39c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 fc59 	bl	800fc48 <dhcp_release_and_stop>
    return ERR_MEM;
 800f396:	f04f 33ff 	mov.w	r3, #4294967295
 800f39a:	e001      	b.n	800f3a0 <dhcp_start+0xe4>
  }
  return result;
 800f39c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	08019858 	.word	0x08019858
 800f3ac:	0801993c 	.word	0x0801993c
 800f3b0:	080198b8 	.word	0x080198b8
 800f3b4:	08019980 	.word	0x08019980

0800f3b8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d025      	beq.n	800f418 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	795b      	ldrb	r3, [r3, #5]
 800f3d0:	2b0a      	cmp	r3, #10
 800f3d2:	d008      	beq.n	800f3e6 <dhcp_network_changed+0x2e>
 800f3d4:	2b0a      	cmp	r3, #10
 800f3d6:	dc0d      	bgt.n	800f3f4 <dhcp_network_changed+0x3c>
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d01f      	beq.n	800f41c <dhcp_network_changed+0x64>
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	db09      	blt.n	800f3f4 <dhcp_network_changed+0x3c>
 800f3e0:	3b03      	subs	r3, #3
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d806      	bhi.n	800f3f4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 fb75 	bl	800fadc <dhcp_reboot>
      break;
 800f3f2:	e014      	b.n	800f41e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	795b      	ldrb	r3, [r3, #5]
 800f3f8:	2b0c      	cmp	r3, #12
 800f3fa:	d906      	bls.n	800f40a <dhcp_network_changed+0x52>
 800f3fc:	4b09      	ldr	r3, [pc, #36]	; (800f424 <dhcp_network_changed+0x6c>)
 800f3fe:	f240 326d 	movw	r2, #877	; 0x36d
 800f402:	4909      	ldr	r1, [pc, #36]	; (800f428 <dhcp_network_changed+0x70>)
 800f404:	4809      	ldr	r0, [pc, #36]	; (800f42c <dhcp_network_changed+0x74>)
 800f406:	f004 fd37 	bl	8013e78 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2200      	movs	r2, #0
 800f40e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f8af 	bl	800f574 <dhcp_discover>
      break;
 800f416:	e002      	b.n	800f41e <dhcp_network_changed+0x66>
    return;
 800f418:	bf00      	nop
 800f41a:	e000      	b.n	800f41e <dhcp_network_changed+0x66>
      break;
 800f41c:	bf00      	nop
  }
}
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	08019858 	.word	0x08019858
 800f428:	080199a4 	.word	0x080199a4
 800f42c:	080198b8 	.word	0x080198b8

0800f430 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d107      	bne.n	800f450 <dhcp_arp_reply+0x20>
 800f440:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <dhcp_arp_reply+0x4c>)
 800f442:	f240 328b 	movw	r2, #907	; 0x38b
 800f446:	490e      	ldr	r1, [pc, #56]	; (800f480 <dhcp_arp_reply+0x50>)
 800f448:	480e      	ldr	r0, [pc, #56]	; (800f484 <dhcp_arp_reply+0x54>)
 800f44a:	f004 fd15 	bl	8013e78 <iprintf>
 800f44e:	e012      	b.n	800f476 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f454:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00c      	beq.n	800f476 <dhcp_arp_reply+0x46>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	795b      	ldrb	r3, [r3, #5]
 800f460:	2b08      	cmp	r3, #8
 800f462:	d108      	bne.n	800f476 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	69db      	ldr	r3, [r3, #28]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d102      	bne.n	800f476 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f809 	bl	800f488 <dhcp_decline>
    }
  }
}
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	08019858 	.word	0x08019858
 800f480:	0801993c 	.word	0x0801993c
 800f484:	080198b8 	.word	0x080198b8

0800f488 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f488:	b5b0      	push	{r4, r5, r7, lr}
 800f48a:	b08a      	sub	sp, #40	; 0x28
 800f48c:	af02      	add	r7, sp, #8
 800f48e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f494:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f496:	210c      	movs	r1, #12
 800f498:	69b8      	ldr	r0, [r7, #24]
 800f49a:	f000 fc6f 	bl	800fd7c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f49e:	f107 030c 	add.w	r3, r7, #12
 800f4a2:	2204      	movs	r2, #4
 800f4a4:	69b9      	ldr	r1, [r7, #24]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f001 f8f4 	bl	8010694 <dhcp_create_msg>
 800f4ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d035      	beq.n	800f520 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f4ba:	89b8      	ldrh	r0, [r7, #12]
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f4c2:	2304      	movs	r3, #4
 800f4c4:	2232      	movs	r2, #50	; 0x32
 800f4c6:	f000 fc73 	bl	800fdb0 <dhcp_option>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f4ce:	89bc      	ldrh	r4, [r7, #12]
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f7 fd4d 	bl	8006f7a <lwip_htonl>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f000 fcee 	bl	800fec8 <dhcp_option_long>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f4f0:	89b8      	ldrh	r0, [r7, #12]
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	33f0      	adds	r3, #240	; 0xf0
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	f001 f9a1 	bl	8010840 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f4fe:	4b19      	ldr	r3, [pc, #100]	; (800f564 <dhcp_decline+0xdc>)
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	4b19      	ldr	r3, [pc, #100]	; (800f568 <dhcp_decline+0xe0>)
 800f504:	9301      	str	r3, [sp, #4]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	2343      	movs	r3, #67	; 0x43
 800f50c:	4a17      	ldr	r2, [pc, #92]	; (800f56c <dhcp_decline+0xe4>)
 800f50e:	6979      	ldr	r1, [r7, #20]
 800f510:	f7ff f8d2 	bl	800e6b8 <udp_sendto_if_src>
 800f514:	4603      	mov	r3, r0
 800f516:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f518:	6978      	ldr	r0, [r7, #20]
 800f51a:	f7f9 f917 	bl	800874c <pbuf_free>
 800f51e:	e001      	b.n	800f524 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f520:	23ff      	movs	r3, #255	; 0xff
 800f522:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	799b      	ldrb	r3, [r3, #6]
 800f528:	2bff      	cmp	r3, #255	; 0xff
 800f52a:	d005      	beq.n	800f538 <dhcp_decline+0xb0>
    dhcp->tries++;
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	799b      	ldrb	r3, [r3, #6]
 800f530:	3301      	adds	r3, #1
 800f532:	b2da      	uxtb	r2, r3
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f538:	f242 7310 	movw	r3, #10000	; 0x2710
 800f53c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f53e:	89fb      	ldrh	r3, [r7, #14]
 800f540:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f544:	4a0a      	ldr	r2, [pc, #40]	; (800f570 <dhcp_decline+0xe8>)
 800f546:	fb82 1203 	smull	r1, r2, r2, r3
 800f54a:	1152      	asrs	r2, r2, #5
 800f54c:	17db      	asrs	r3, r3, #31
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	b29a      	uxth	r2, r3
 800f552:	69bb      	ldr	r3, [r7, #24]
 800f554:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f556:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3720      	adds	r7, #32
 800f55e:	46bd      	mov	sp, r7
 800f560:	bdb0      	pop	{r4, r5, r7, pc}
 800f562:	bf00      	nop
 800f564:	2000c4a0 	.word	0x2000c4a0
 800f568:	0801a404 	.word	0x0801a404
 800f56c:	0801a408 	.word	0x0801a408
 800f570:	10624dd3 	.word	0x10624dd3

0800f574 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	; 0x28
 800f578:	af02      	add	r7, sp, #8
 800f57a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f580:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f582:	2300      	movs	r3, #0
 800f584:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	2200      	movs	r2, #0
 800f58a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f58c:	2106      	movs	r1, #6
 800f58e:	69b8      	ldr	r0, [r7, #24]
 800f590:	f000 fbf4 	bl	800fd7c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f594:	f107 0308 	add.w	r3, r7, #8
 800f598:	2201      	movs	r2, #1
 800f59a:	69b9      	ldr	r1, [r7, #24]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f001 f879 	bl	8010694 <dhcp_create_msg>
 800f5a2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d04b      	beq.n	800f642 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f5b0:	8938      	ldrh	r0, [r7, #8]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	2239      	movs	r2, #57	; 0x39
 800f5bc:	f000 fbf8 	bl	800fdb0 <dhcp_option>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f5c4:	8938      	ldrh	r0, [r7, #8]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	f000 fc47 	bl	800fe64 <dhcp_option_short>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f5da:	8938      	ldrh	r0, [r7, #8]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	2237      	movs	r2, #55	; 0x37
 800f5e6:	f000 fbe3 	bl	800fdb0 <dhcp_option>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	77fb      	strb	r3, [r7, #31]
 800f5f2:	e00e      	b.n	800f612 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f5f4:	8938      	ldrh	r0, [r7, #8]
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5fc:	7ffb      	ldrb	r3, [r7, #31]
 800f5fe:	4a29      	ldr	r2, [pc, #164]	; (800f6a4 <dhcp_discover+0x130>)
 800f600:	5cd3      	ldrb	r3, [r2, r3]
 800f602:	461a      	mov	r2, r3
 800f604:	f000 fc08 	bl	800fe18 <dhcp_option_byte>
 800f608:	4603      	mov	r3, r0
 800f60a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f60c:	7ffb      	ldrb	r3, [r7, #31]
 800f60e:	3301      	adds	r3, #1
 800f610:	77fb      	strb	r3, [r7, #31]
 800f612:	7ffb      	ldrb	r3, [r7, #31]
 800f614:	2b02      	cmp	r3, #2
 800f616:	d9ed      	bls.n	800f5f4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f618:	8938      	ldrh	r0, [r7, #8]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	33f0      	adds	r3, #240	; 0xf0
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	4619      	mov	r1, r3
 800f622:	f001 f90d 	bl	8010840 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f626:	4b20      	ldr	r3, [pc, #128]	; (800f6a8 <dhcp_discover+0x134>)
 800f628:	6818      	ldr	r0, [r3, #0]
 800f62a:	4b20      	ldr	r3, [pc, #128]	; (800f6ac <dhcp_discover+0x138>)
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	2343      	movs	r3, #67	; 0x43
 800f634:	4a1e      	ldr	r2, [pc, #120]	; (800f6b0 <dhcp_discover+0x13c>)
 800f636:	6939      	ldr	r1, [r7, #16]
 800f638:	f7ff f83e 	bl	800e6b8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f63c:	6938      	ldr	r0, [r7, #16]
 800f63e:	f7f9 f885 	bl	800874c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	799b      	ldrb	r3, [r3, #6]
 800f646:	2bff      	cmp	r3, #255	; 0xff
 800f648:	d005      	beq.n	800f656 <dhcp_discover+0xe2>
    dhcp->tries++;
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	799b      	ldrb	r3, [r3, #6]
 800f64e:	3301      	adds	r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	799b      	ldrb	r3, [r3, #6]
 800f65a:	2b05      	cmp	r3, #5
 800f65c:	d80d      	bhi.n	800f67a <dhcp_discover+0x106>
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	799b      	ldrb	r3, [r3, #6]
 800f662:	461a      	mov	r2, r3
 800f664:	2301      	movs	r3, #1
 800f666:	4093      	lsls	r3, r2
 800f668:	b29b      	uxth	r3, r3
 800f66a:	461a      	mov	r2, r3
 800f66c:	0152      	lsls	r2, r2, #5
 800f66e:	1ad2      	subs	r2, r2, r3
 800f670:	0092      	lsls	r2, r2, #2
 800f672:	4413      	add	r3, r2
 800f674:	00db      	lsls	r3, r3, #3
 800f676:	b29b      	uxth	r3, r3
 800f678:	e001      	b.n	800f67e <dhcp_discover+0x10a>
 800f67a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f67e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f680:	897b      	ldrh	r3, [r7, #10]
 800f682:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f686:	4a0b      	ldr	r2, [pc, #44]	; (800f6b4 <dhcp_discover+0x140>)
 800f688:	fb82 1203 	smull	r1, r2, r2, r3
 800f68c:	1152      	asrs	r2, r2, #5
 800f68e:	17db      	asrs	r3, r3, #31
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	b29a      	uxth	r2, r3
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3720      	adds	r7, #32
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20000030 	.word	0x20000030
 800f6a8:	2000c4a0 	.word	0x2000c4a0
 800f6ac:	0801a404 	.word	0x0801a404
 800f6b0:	0801a408 	.word	0x0801a408
 800f6b4:	10624dd3 	.word	0x10624dd3

0800f6b8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b088      	sub	sp, #32
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d107      	bne.n	800f6d6 <dhcp_bind+0x1e>
 800f6c6:	4b64      	ldr	r3, [pc, #400]	; (800f858 <dhcp_bind+0x1a0>)
 800f6c8:	f240 4215 	movw	r2, #1045	; 0x415
 800f6cc:	4963      	ldr	r1, [pc, #396]	; (800f85c <dhcp_bind+0x1a4>)
 800f6ce:	4864      	ldr	r0, [pc, #400]	; (800f860 <dhcp_bind+0x1a8>)
 800f6d0:	f004 fbd2 	bl	8013e78 <iprintf>
 800f6d4:	e0bc      	b.n	800f850 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6da:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d107      	bne.n	800f6f2 <dhcp_bind+0x3a>
 800f6e2:	4b5d      	ldr	r3, [pc, #372]	; (800f858 <dhcp_bind+0x1a0>)
 800f6e4:	f240 4217 	movw	r2, #1047	; 0x417
 800f6e8:	495e      	ldr	r1, [pc, #376]	; (800f864 <dhcp_bind+0x1ac>)
 800f6ea:	485d      	ldr	r0, [pc, #372]	; (800f860 <dhcp_bind+0x1a8>)
 800f6ec:	f004 fbc4 	bl	8013e78 <iprintf>
 800f6f0:	e0ae      	b.n	800f850 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f700:	d019      	beq.n	800f736 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f706:	331e      	adds	r3, #30
 800f708:	4a57      	ldr	r2, [pc, #348]	; (800f868 <dhcp_bind+0x1b0>)
 800f70a:	fba2 2303 	umull	r2, r3, r2, r3
 800f70e:	095b      	lsrs	r3, r3, #5
 800f710:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f718:	d302      	bcc.n	800f720 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f71a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f71e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	b29a      	uxth	r2, r3
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f728:	69bb      	ldr	r3, [r7, #24]
 800f72a:	8a9b      	ldrh	r3, [r3, #20]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d102      	bne.n	800f736 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	2201      	movs	r2, #1
 800f734:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73e:	d01d      	beq.n	800f77c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f744:	331e      	adds	r3, #30
 800f746:	4a48      	ldr	r2, [pc, #288]	; (800f868 <dhcp_bind+0x1b0>)
 800f748:	fba2 2303 	umull	r2, r3, r2, r3
 800f74c:	095b      	lsrs	r3, r3, #5
 800f74e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f756:	d302      	bcc.n	800f75e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f75c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	b29a      	uxth	r2, r3
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	895b      	ldrh	r3, [r3, #10]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d102      	bne.n	800f774 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	2201      	movs	r2, #1
 800f772:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	895a      	ldrh	r2, [r3, #10]
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f784:	d01d      	beq.n	800f7c2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78a:	331e      	adds	r3, #30
 800f78c:	4a36      	ldr	r2, [pc, #216]	; (800f868 <dhcp_bind+0x1b0>)
 800f78e:	fba2 2303 	umull	r2, r3, r2, r3
 800f792:	095b      	lsrs	r3, r3, #5
 800f794:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f79c:	d302      	bcc.n	800f7a4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f79e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	899b      	ldrh	r3, [r3, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d102      	bne.n	800f7ba <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	899a      	ldrh	r2, [r3, #12]
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	895a      	ldrh	r2, [r3, #10]
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	899b      	ldrh	r3, [r3, #12]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d306      	bcc.n	800f7dc <dhcp_bind+0x124>
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	899b      	ldrh	r3, [r3, #12]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d002      	beq.n	800f7dc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	79db      	ldrb	r3, [r3, #7]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d003      	beq.n	800f7ec <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	6a1b      	ldr	r3, [r3, #32]
 800f7e8:	613b      	str	r3, [r7, #16]
 800f7ea:	e014      	b.n	800f816 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	331c      	adds	r3, #28
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f7f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	db02      	blt.n	800f802 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f7fc:	23ff      	movs	r3, #255	; 0xff
 800f7fe:	613b      	str	r3, [r7, #16]
 800f800:	e009      	b.n	800f816 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f802:	7dfb      	ldrb	r3, [r7, #23]
 800f804:	2bbf      	cmp	r3, #191	; 0xbf
 800f806:	d903      	bls.n	800f810 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f808:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f80c:	613b      	str	r3, [r7, #16]
 800f80e:	e002      	b.n	800f816 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f814:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d108      	bne.n	800f834 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	69da      	ldr	r2, [r3, #28]
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	4013      	ands	r3, r2
 800f82a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f832:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f834:	210a      	movs	r1, #10
 800f836:	69b8      	ldr	r0, [r7, #24]
 800f838:	f000 faa0 	bl	800fd7c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	f103 011c 	add.w	r1, r3, #28
 800f842:	f107 030c 	add.w	r3, r7, #12
 800f846:	f107 0210 	add.w	r2, r7, #16
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7f8 fa70 	bl	8007d30 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f850:	3720      	adds	r7, #32
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	08019858 	.word	0x08019858
 800f85c:	080199b8 	.word	0x080199b8
 800f860:	080198b8 	.word	0x080198b8
 800f864:	080199d4 	.word	0x080199d4
 800f868:	88888889 	.word	0x88888889

0800f86c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08a      	sub	sp, #40	; 0x28
 800f870:	af02      	add	r7, sp, #8
 800f872:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f878:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f87a:	2105      	movs	r1, #5
 800f87c:	69b8      	ldr	r0, [r7, #24]
 800f87e:	f000 fa7d 	bl	800fd7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f882:	f107 030c 	add.w	r3, r7, #12
 800f886:	2203      	movs	r2, #3
 800f888:	69b9      	ldr	r1, [r7, #24]
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 ff02 	bl	8010694 <dhcp_create_msg>
 800f890:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d04e      	beq.n	800f936 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f89e:	89b8      	ldrh	r0, [r7, #12]
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	2239      	movs	r2, #57	; 0x39
 800f8aa:	f000 fa81 	bl	800fdb0 <dhcp_option>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f8b2:	89b8      	ldrh	r0, [r7, #12]
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8be:	461a      	mov	r2, r3
 800f8c0:	f000 fad0 	bl	800fe64 <dhcp_option_short>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f8c8:	89b8      	ldrh	r0, [r7, #12]
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8d0:	2303      	movs	r3, #3
 800f8d2:	2237      	movs	r2, #55	; 0x37
 800f8d4:	f000 fa6c 	bl	800fdb0 <dhcp_option>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8dc:	2300      	movs	r3, #0
 800f8de:	77bb      	strb	r3, [r7, #30]
 800f8e0:	e00e      	b.n	800f900 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f8e2:	89b8      	ldrh	r0, [r7, #12]
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8ea:	7fbb      	ldrb	r3, [r7, #30]
 800f8ec:	4a2a      	ldr	r2, [pc, #168]	; (800f998 <dhcp_renew+0x12c>)
 800f8ee:	5cd3      	ldrb	r3, [r2, r3]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	f000 fa91 	bl	800fe18 <dhcp_option_byte>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8fa:	7fbb      	ldrb	r3, [r7, #30]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	77bb      	strb	r3, [r7, #30]
 800f900:	7fbb      	ldrb	r3, [r7, #30]
 800f902:	2b02      	cmp	r3, #2
 800f904:	d9ed      	bls.n	800f8e2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f906:	89b8      	ldrh	r0, [r7, #12]
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	33f0      	adds	r3, #240	; 0xf0
 800f90c:	697a      	ldr	r2, [r7, #20]
 800f90e:	4619      	mov	r1, r3
 800f910:	f000 ff96 	bl	8010840 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f914:	4b21      	ldr	r3, [pc, #132]	; (800f99c <dhcp_renew+0x130>)
 800f916:	6818      	ldr	r0, [r3, #0]
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	f103 0218 	add.w	r2, r3, #24
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	2343      	movs	r3, #67	; 0x43
 800f924:	6979      	ldr	r1, [r7, #20]
 800f926:	f7fe fe53 	bl	800e5d0 <udp_sendto_if>
 800f92a:	4603      	mov	r3, r0
 800f92c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f92e:	6978      	ldr	r0, [r7, #20]
 800f930:	f7f8 ff0c 	bl	800874c <pbuf_free>
 800f934:	e001      	b.n	800f93a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f936:	23ff      	movs	r3, #255	; 0xff
 800f938:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f93a:	69bb      	ldr	r3, [r7, #24]
 800f93c:	799b      	ldrb	r3, [r3, #6]
 800f93e:	2bff      	cmp	r3, #255	; 0xff
 800f940:	d005      	beq.n	800f94e <dhcp_renew+0xe2>
    dhcp->tries++;
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	799b      	ldrb	r3, [r3, #6]
 800f946:	3301      	adds	r3, #1
 800f948:	b2da      	uxtb	r2, r3
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	799b      	ldrb	r3, [r3, #6]
 800f952:	2b09      	cmp	r3, #9
 800f954:	d80a      	bhi.n	800f96c <dhcp_renew+0x100>
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	799b      	ldrb	r3, [r3, #6]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	461a      	mov	r2, r3
 800f95e:	0152      	lsls	r2, r2, #5
 800f960:	1ad2      	subs	r2, r2, r3
 800f962:	0092      	lsls	r2, r2, #2
 800f964:	4413      	add	r3, r2
 800f966:	011b      	lsls	r3, r3, #4
 800f968:	b29b      	uxth	r3, r3
 800f96a:	e001      	b.n	800f970 <dhcp_renew+0x104>
 800f96c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f970:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f972:	89fb      	ldrh	r3, [r7, #14]
 800f974:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f978:	4a09      	ldr	r2, [pc, #36]	; (800f9a0 <dhcp_renew+0x134>)
 800f97a:	fb82 1203 	smull	r1, r2, r2, r3
 800f97e:	1152      	asrs	r2, r2, #5
 800f980:	17db      	asrs	r3, r3, #31
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	b29a      	uxth	r2, r3
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f98a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3720      	adds	r7, #32
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	20000030 	.word	0x20000030
 800f99c:	2000c4a0 	.word	0x2000c4a0
 800f9a0:	10624dd3 	.word	0x10624dd3

0800f9a4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	; 0x28
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f9b2:	2104      	movs	r1, #4
 800f9b4:	69b8      	ldr	r0, [r7, #24]
 800f9b6:	f000 f9e1 	bl	800fd7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f9ba:	f107 030c 	add.w	r3, r7, #12
 800f9be:	2203      	movs	r2, #3
 800f9c0:	69b9      	ldr	r1, [r7, #24]
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fe66 	bl	8010694 <dhcp_create_msg>
 800f9c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d04c      	beq.n	800fa6a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f9d6:	89b8      	ldrh	r0, [r7, #12]
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9de:	2302      	movs	r3, #2
 800f9e0:	2239      	movs	r2, #57	; 0x39
 800f9e2:	f000 f9e5 	bl	800fdb0 <dhcp_option>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f9ea:	89b8      	ldrh	r0, [r7, #12]
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	f000 fa34 	bl	800fe64 <dhcp_option_short>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fa00:	89b8      	ldrh	r0, [r7, #12]
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa08:	2303      	movs	r3, #3
 800fa0a:	2237      	movs	r2, #55	; 0x37
 800fa0c:	f000 f9d0 	bl	800fdb0 <dhcp_option>
 800fa10:	4603      	mov	r3, r0
 800fa12:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa14:	2300      	movs	r3, #0
 800fa16:	77bb      	strb	r3, [r7, #30]
 800fa18:	e00e      	b.n	800fa38 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fa1a:	89b8      	ldrh	r0, [r7, #12]
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa22:	7fbb      	ldrb	r3, [r7, #30]
 800fa24:	4a29      	ldr	r2, [pc, #164]	; (800facc <dhcp_rebind+0x128>)
 800fa26:	5cd3      	ldrb	r3, [r2, r3]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f000 f9f5 	bl	800fe18 <dhcp_option_byte>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa32:	7fbb      	ldrb	r3, [r7, #30]
 800fa34:	3301      	adds	r3, #1
 800fa36:	77bb      	strb	r3, [r7, #30]
 800fa38:	7fbb      	ldrb	r3, [r7, #30]
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d9ed      	bls.n	800fa1a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fa3e:	89b8      	ldrh	r0, [r7, #12]
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	33f0      	adds	r3, #240	; 0xf0
 800fa44:	697a      	ldr	r2, [r7, #20]
 800fa46:	4619      	mov	r1, r3
 800fa48:	f000 fefa 	bl	8010840 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fa4c:	4b20      	ldr	r3, [pc, #128]	; (800fad0 <dhcp_rebind+0x12c>)
 800fa4e:	6818      	ldr	r0, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	2343      	movs	r3, #67	; 0x43
 800fa56:	4a1f      	ldr	r2, [pc, #124]	; (800fad4 <dhcp_rebind+0x130>)
 800fa58:	6979      	ldr	r1, [r7, #20]
 800fa5a:	f7fe fdb9 	bl	800e5d0 <udp_sendto_if>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fa62:	6978      	ldr	r0, [r7, #20]
 800fa64:	f7f8 fe72 	bl	800874c <pbuf_free>
 800fa68:	e001      	b.n	800fa6e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fa6a:	23ff      	movs	r3, #255	; 0xff
 800fa6c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	799b      	ldrb	r3, [r3, #6]
 800fa72:	2bff      	cmp	r3, #255	; 0xff
 800fa74:	d005      	beq.n	800fa82 <dhcp_rebind+0xde>
    dhcp->tries++;
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	799b      	ldrb	r3, [r3, #6]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	b2da      	uxtb	r2, r3
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	799b      	ldrb	r3, [r3, #6]
 800fa86:	2b09      	cmp	r3, #9
 800fa88:	d80a      	bhi.n	800faa0 <dhcp_rebind+0xfc>
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	799b      	ldrb	r3, [r3, #6]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	461a      	mov	r2, r3
 800fa92:	0152      	lsls	r2, r2, #5
 800fa94:	1ad2      	subs	r2, r2, r3
 800fa96:	0092      	lsls	r2, r2, #2
 800fa98:	4413      	add	r3, r2
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	e001      	b.n	800faa4 <dhcp_rebind+0x100>
 800faa0:	f242 7310 	movw	r3, #10000	; 0x2710
 800faa4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800faa6:	89fb      	ldrh	r3, [r7, #14]
 800faa8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800faac:	4a0a      	ldr	r2, [pc, #40]	; (800fad8 <dhcp_rebind+0x134>)
 800faae:	fb82 1203 	smull	r1, r2, r2, r3
 800fab2:	1152      	asrs	r2, r2, #5
 800fab4:	17db      	asrs	r3, r3, #31
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	b29a      	uxth	r2, r3
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fabe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20000030 	.word	0x20000030
 800fad0:	2000c4a0 	.word	0x2000c4a0
 800fad4:	0801a408 	.word	0x0801a408
 800fad8:	10624dd3 	.word	0x10624dd3

0800fadc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800fadc:	b5b0      	push	{r4, r5, r7, lr}
 800fade:	b08a      	sub	sp, #40	; 0x28
 800fae0:	af02      	add	r7, sp, #8
 800fae2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800faea:	2103      	movs	r1, #3
 800faec:	69b8      	ldr	r0, [r7, #24]
 800faee:	f000 f945 	bl	800fd7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800faf2:	f107 030c 	add.w	r3, r7, #12
 800faf6:	2203      	movs	r2, #3
 800faf8:	69b9      	ldr	r1, [r7, #24]
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 fdca 	bl	8010694 <dhcp_create_msg>
 800fb00:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d066      	beq.n	800fbd6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fb0e:	89b8      	ldrh	r0, [r7, #12]
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb16:	2302      	movs	r3, #2
 800fb18:	2239      	movs	r2, #57	; 0x39
 800fb1a:	f000 f949 	bl	800fdb0 <dhcp_option>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800fb22:	89b8      	ldrh	r0, [r7, #12]
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	33f0      	adds	r3, #240	; 0xf0
 800fb28:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	f000 f999 	bl	800fe64 <dhcp_option_short>
 800fb32:	4603      	mov	r3, r0
 800fb34:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fb36:	89b8      	ldrh	r0, [r7, #12]
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb3e:	2304      	movs	r3, #4
 800fb40:	2232      	movs	r2, #50	; 0x32
 800fb42:	f000 f935 	bl	800fdb0 <dhcp_option>
 800fb46:	4603      	mov	r3, r0
 800fb48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fb4a:	89bc      	ldrh	r4, [r7, #12]
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	69db      	ldr	r3, [r3, #28]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7f7 fa0f 	bl	8006f7a <lwip_htonl>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	461a      	mov	r2, r3
 800fb60:	4629      	mov	r1, r5
 800fb62:	4620      	mov	r0, r4
 800fb64:	f000 f9b0 	bl	800fec8 <dhcp_option_long>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fb6c:	89b8      	ldrh	r0, [r7, #12]
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb74:	2303      	movs	r3, #3
 800fb76:	2237      	movs	r2, #55	; 0x37
 800fb78:	f000 f91a 	bl	800fdb0 <dhcp_option>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb80:	2300      	movs	r3, #0
 800fb82:	77bb      	strb	r3, [r7, #30]
 800fb84:	e00e      	b.n	800fba4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fb86:	89b8      	ldrh	r0, [r7, #12]
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb8e:	7fbb      	ldrb	r3, [r7, #30]
 800fb90:	4a29      	ldr	r2, [pc, #164]	; (800fc38 <dhcp_reboot+0x15c>)
 800fb92:	5cd3      	ldrb	r3, [r2, r3]
 800fb94:	461a      	mov	r2, r3
 800fb96:	f000 f93f 	bl	800fe18 <dhcp_option_byte>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb9e:	7fbb      	ldrb	r3, [r7, #30]
 800fba0:	3301      	adds	r3, #1
 800fba2:	77bb      	strb	r3, [r7, #30]
 800fba4:	7fbb      	ldrb	r3, [r7, #30]
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	d9ed      	bls.n	800fb86 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fbaa:	89b8      	ldrh	r0, [r7, #12]
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	33f0      	adds	r3, #240	; 0xf0
 800fbb0:	697a      	ldr	r2, [r7, #20]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	f000 fe44 	bl	8010840 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fbb8:	4b20      	ldr	r3, [pc, #128]	; (800fc3c <dhcp_reboot+0x160>)
 800fbba:	6818      	ldr	r0, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	2343      	movs	r3, #67	; 0x43
 800fbc2:	4a1f      	ldr	r2, [pc, #124]	; (800fc40 <dhcp_reboot+0x164>)
 800fbc4:	6979      	ldr	r1, [r7, #20]
 800fbc6:	f7fe fd03 	bl	800e5d0 <udp_sendto_if>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fbce:	6978      	ldr	r0, [r7, #20]
 800fbd0:	f7f8 fdbc 	bl	800874c <pbuf_free>
 800fbd4:	e001      	b.n	800fbda <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fbd6:	23ff      	movs	r3, #255	; 0xff
 800fbd8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	799b      	ldrb	r3, [r3, #6]
 800fbde:	2bff      	cmp	r3, #255	; 0xff
 800fbe0:	d005      	beq.n	800fbee <dhcp_reboot+0x112>
    dhcp->tries++;
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	799b      	ldrb	r3, [r3, #6]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	799b      	ldrb	r3, [r3, #6]
 800fbf2:	2b09      	cmp	r3, #9
 800fbf4:	d80a      	bhi.n	800fc0c <dhcp_reboot+0x130>
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	799b      	ldrb	r3, [r3, #6]
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	0152      	lsls	r2, r2, #5
 800fc00:	1ad2      	subs	r2, r2, r3
 800fc02:	0092      	lsls	r2, r2, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	00db      	lsls	r3, r3, #3
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	e001      	b.n	800fc10 <dhcp_reboot+0x134>
 800fc0c:	f242 7310 	movw	r3, #10000	; 0x2710
 800fc10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fc12:	89fb      	ldrh	r3, [r7, #14]
 800fc14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fc18:	4a0a      	ldr	r2, [pc, #40]	; (800fc44 <dhcp_reboot+0x168>)
 800fc1a:	fb82 1203 	smull	r1, r2, r2, r3
 800fc1e:	1152      	asrs	r2, r2, #5
 800fc20:	17db      	asrs	r3, r3, #31
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fc2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3720      	adds	r7, #32
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bdb0      	pop	{r4, r5, r7, pc}
 800fc36:	bf00      	nop
 800fc38:	20000030 	.word	0x20000030
 800fc3c:	2000c4a0 	.word	0x2000c4a0
 800fc40:	0801a408 	.word	0x0801a408
 800fc44:	10624dd3 	.word	0x10624dd3

0800fc48 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800fc48:	b5b0      	push	{r4, r5, r7, lr}
 800fc4a:	b08a      	sub	sp, #40	; 0x28
 800fc4c:	af02      	add	r7, sp, #8
 800fc4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc54:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f000 8084 	beq.w	800fd66 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	795b      	ldrb	r3, [r3, #5]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 8081 	beq.w	800fd6a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	699b      	ldr	r3, [r3, #24]
 800fc6c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	2200      	movs	r2, #0
 800fc72:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	2200      	movs	r2, #0
 800fc78:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	2200      	movs	r2, #0
 800fc84:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	631a      	str	r2, [r3, #48]	; 0x30
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	829a      	strh	r2, [r3, #20]
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	8a9a      	ldrh	r2, [r3, #20]
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	825a      	strh	r2, [r3, #18]
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	8a5a      	ldrh	r2, [r3, #18]
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	821a      	strh	r2, [r3, #16]
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	8a1a      	ldrh	r2, [r3, #16]
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fdee 	bl	801089c <dhcp_supplied_address>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d03b      	beq.n	800fd3e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800fcc6:	f107 030e 	add.w	r3, r7, #14
 800fcca:	2207      	movs	r2, #7
 800fccc:	69f9      	ldr	r1, [r7, #28]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 fce0 	bl	8010694 <dhcp_create_msg>
 800fcd4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d030      	beq.n	800fd3e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fce2:	89f8      	ldrh	r0, [r7, #14]
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcea:	2304      	movs	r3, #4
 800fcec:	2236      	movs	r2, #54	; 0x36
 800fcee:	f000 f85f 	bl	800fdb0 <dhcp_option>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fcf6:	89fc      	ldrh	r4, [r7, #14]
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7f7 f93a 	bl	8006f7a <lwip_htonl>
 800fd06:	4603      	mov	r3, r0
 800fd08:	461a      	mov	r2, r3
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f000 f8db 	bl	800fec8 <dhcp_option_long>
 800fd12:	4603      	mov	r3, r0
 800fd14:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fd16:	89f8      	ldrh	r0, [r7, #14]
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	33f0      	adds	r3, #240	; 0xf0
 800fd1c:	69ba      	ldr	r2, [r7, #24]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	f000 fd8e 	bl	8010840 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fd24:	4b13      	ldr	r3, [pc, #76]	; (800fd74 <dhcp_release_and_stop+0x12c>)
 800fd26:	6818      	ldr	r0, [r3, #0]
 800fd28:	f107 0210 	add.w	r2, r7, #16
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	2343      	movs	r3, #67	; 0x43
 800fd32:	69b9      	ldr	r1, [r7, #24]
 800fd34:	f7fe fc4c 	bl	800e5d0 <udp_sendto_if>
      pbuf_free(p_out);
 800fd38:	69b8      	ldr	r0, [r7, #24]
 800fd3a:	f7f8 fd07 	bl	800874c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fd3e:	4b0e      	ldr	r3, [pc, #56]	; (800fd78 <dhcp_release_and_stop+0x130>)
 800fd40:	4a0d      	ldr	r2, [pc, #52]	; (800fd78 <dhcp_release_and_stop+0x130>)
 800fd42:	490d      	ldr	r1, [pc, #52]	; (800fd78 <dhcp_release_and_stop+0x130>)
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7f7 fff3 	bl	8007d30 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	69f8      	ldr	r0, [r7, #28]
 800fd4e:	f000 f815 	bl	800fd7c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	791b      	ldrb	r3, [r3, #4]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d008      	beq.n	800fd6c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fd5a:	f7fe ff85 	bl	800ec68 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	2200      	movs	r2, #0
 800fd62:	711a      	strb	r2, [r3, #4]
 800fd64:	e002      	b.n	800fd6c <dhcp_release_and_stop+0x124>
    return;
 800fd66:	bf00      	nop
 800fd68:	e000      	b.n	800fd6c <dhcp_release_and_stop+0x124>
    return;
 800fd6a:	bf00      	nop
  }
}
 800fd6c:	3720      	adds	r7, #32
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bdb0      	pop	{r4, r5, r7, pc}
 800fd72:	bf00      	nop
 800fd74:	2000c4a0 	.word	0x2000c4a0
 800fd78:	0801a404 	.word	0x0801a404

0800fd7c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	795b      	ldrb	r3, [r3, #5]
 800fd8c:	78fa      	ldrb	r2, [r7, #3]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d008      	beq.n	800fda4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	78fa      	ldrb	r2, [r7, #3]
 800fd96:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2200      	movs	r2, #0
 800fda2:	811a      	strh	r2, [r3, #8]
  }
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6039      	str	r1, [r7, #0]
 800fdb8:	4611      	mov	r1, r2
 800fdba:	461a      	mov	r2, r3
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	80fb      	strh	r3, [r7, #6]
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	717b      	strb	r3, [r7, #5]
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fdc8:	88fa      	ldrh	r2, [r7, #6]
 800fdca:	793b      	ldrb	r3, [r7, #4]
 800fdcc:	4413      	add	r3, r2
 800fdce:	3302      	adds	r3, #2
 800fdd0:	2b44      	cmp	r3, #68	; 0x44
 800fdd2:	d906      	bls.n	800fde2 <dhcp_option+0x32>
 800fdd4:	4b0d      	ldr	r3, [pc, #52]	; (800fe0c <dhcp_option+0x5c>)
 800fdd6:	f240 529a 	movw	r2, #1434	; 0x59a
 800fdda:	490d      	ldr	r1, [pc, #52]	; (800fe10 <dhcp_option+0x60>)
 800fddc:	480d      	ldr	r0, [pc, #52]	; (800fe14 <dhcp_option+0x64>)
 800fdde:	f004 f84b 	bl	8013e78 <iprintf>
  options[options_out_len++] = option_type;
 800fde2:	88fb      	ldrh	r3, [r7, #6]
 800fde4:	1c5a      	adds	r2, r3, #1
 800fde6:	80fa      	strh	r2, [r7, #6]
 800fde8:	461a      	mov	r2, r3
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	4413      	add	r3, r2
 800fdee:	797a      	ldrb	r2, [r7, #5]
 800fdf0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800fdf2:	88fb      	ldrh	r3, [r7, #6]
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	80fa      	strh	r2, [r7, #6]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	793a      	ldrb	r2, [r7, #4]
 800fe00:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fe02:	88fb      	ldrh	r3, [r7, #6]
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	08019858 	.word	0x08019858
 800fe10:	080199ec 	.word	0x080199ec
 800fe14:	080198b8 	.word	0x080198b8

0800fe18 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	6039      	str	r1, [r7, #0]
 800fe22:	80fb      	strh	r3, [r7, #6]
 800fe24:	4613      	mov	r3, r2
 800fe26:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800fe28:	88fb      	ldrh	r3, [r7, #6]
 800fe2a:	2b43      	cmp	r3, #67	; 0x43
 800fe2c:	d906      	bls.n	800fe3c <dhcp_option_byte+0x24>
 800fe2e:	4b0a      	ldr	r3, [pc, #40]	; (800fe58 <dhcp_option_byte+0x40>)
 800fe30:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800fe34:	4909      	ldr	r1, [pc, #36]	; (800fe5c <dhcp_option_byte+0x44>)
 800fe36:	480a      	ldr	r0, [pc, #40]	; (800fe60 <dhcp_option_byte+0x48>)
 800fe38:	f004 f81e 	bl	8013e78 <iprintf>
  options[options_out_len++] = value;
 800fe3c:	88fb      	ldrh	r3, [r7, #6]
 800fe3e:	1c5a      	adds	r2, r3, #1
 800fe40:	80fa      	strh	r2, [r7, #6]
 800fe42:	461a      	mov	r2, r3
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	4413      	add	r3, r2
 800fe48:	797a      	ldrb	r2, [r7, #5]
 800fe4a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fe4c:	88fb      	ldrh	r3, [r7, #6]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	08019858 	.word	0x08019858
 800fe5c:	08019a30 	.word	0x08019a30
 800fe60:	080198b8 	.word	0x080198b8

0800fe64 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	6039      	str	r1, [r7, #0]
 800fe6e:	80fb      	strh	r3, [r7, #6]
 800fe70:	4613      	mov	r3, r2
 800fe72:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fe74:	88fb      	ldrh	r3, [r7, #6]
 800fe76:	3302      	adds	r3, #2
 800fe78:	2b44      	cmp	r3, #68	; 0x44
 800fe7a:	d906      	bls.n	800fe8a <dhcp_option_short+0x26>
 800fe7c:	4b0f      	ldr	r3, [pc, #60]	; (800febc <dhcp_option_short+0x58>)
 800fe7e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800fe82:	490f      	ldr	r1, [pc, #60]	; (800fec0 <dhcp_option_short+0x5c>)
 800fe84:	480f      	ldr	r0, [pc, #60]	; (800fec4 <dhcp_option_short+0x60>)
 800fe86:	f003 fff7 	bl	8013e78 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fe8a:	88bb      	ldrh	r3, [r7, #4]
 800fe8c:	0a1b      	lsrs	r3, r3, #8
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	88fb      	ldrh	r3, [r7, #6]
 800fe92:	1c59      	adds	r1, r3, #1
 800fe94:	80f9      	strh	r1, [r7, #6]
 800fe96:	4619      	mov	r1, r3
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	440b      	add	r3, r1
 800fe9c:	b2d2      	uxtb	r2, r2
 800fe9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800fea0:	88fb      	ldrh	r3, [r7, #6]
 800fea2:	1c5a      	adds	r2, r3, #1
 800fea4:	80fa      	strh	r2, [r7, #6]
 800fea6:	461a      	mov	r2, r3
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	4413      	add	r3, r2
 800feac:	88ba      	ldrh	r2, [r7, #4]
 800feae:	b2d2      	uxtb	r2, r2
 800feb0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800feb2:	88fb      	ldrh	r3, [r7, #6]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	08019858 	.word	0x08019858
 800fec0:	08019a68 	.word	0x08019a68
 800fec4:	080198b8 	.word	0x080198b8

0800fec8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	607a      	str	r2, [r7, #4]
 800fed4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fed6:	89fb      	ldrh	r3, [r7, #14]
 800fed8:	3304      	adds	r3, #4
 800feda:	2b44      	cmp	r3, #68	; 0x44
 800fedc:	d906      	bls.n	800feec <dhcp_option_long+0x24>
 800fede:	4b19      	ldr	r3, [pc, #100]	; (800ff44 <dhcp_option_long+0x7c>)
 800fee0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800fee4:	4918      	ldr	r1, [pc, #96]	; (800ff48 <dhcp_option_long+0x80>)
 800fee6:	4819      	ldr	r0, [pc, #100]	; (800ff4c <dhcp_option_long+0x84>)
 800fee8:	f003 ffc6 	bl	8013e78 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	0e1a      	lsrs	r2, r3, #24
 800fef0:	89fb      	ldrh	r3, [r7, #14]
 800fef2:	1c59      	adds	r1, r3, #1
 800fef4:	81f9      	strh	r1, [r7, #14]
 800fef6:	4619      	mov	r1, r3
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	440b      	add	r3, r1
 800fefc:	b2d2      	uxtb	r2, r2
 800fefe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	0c1a      	lsrs	r2, r3, #16
 800ff04:	89fb      	ldrh	r3, [r7, #14]
 800ff06:	1c59      	adds	r1, r3, #1
 800ff08:	81f9      	strh	r1, [r7, #14]
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	440b      	add	r3, r1
 800ff10:	b2d2      	uxtb	r2, r2
 800ff12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	0a1a      	lsrs	r2, r3, #8
 800ff18:	89fb      	ldrh	r3, [r7, #14]
 800ff1a:	1c59      	adds	r1, r3, #1
 800ff1c:	81f9      	strh	r1, [r7, #14]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	440b      	add	r3, r1
 800ff24:	b2d2      	uxtb	r2, r2
 800ff26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ff28:	89fb      	ldrh	r3, [r7, #14]
 800ff2a:	1c5a      	adds	r2, r3, #1
 800ff2c:	81fa      	strh	r2, [r7, #14]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	4413      	add	r3, r2
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	b2d2      	uxtb	r2, r2
 800ff38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ff3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	08019858 	.word	0x08019858
 800ff48:	08019aa4 	.word	0x08019aa4
 800ff4c:	080198b8 	.word	0x080198b8

0800ff50 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b090      	sub	sp, #64	; 0x40
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800ff62:	2208      	movs	r2, #8
 800ff64:	2100      	movs	r1, #0
 800ff66:	48b5      	ldr	r0, [pc, #724]	; (801023c <dhcp_parse_reply+0x2ec>)
 800ff68:	f003 ffeb 	bl	8013f42 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	895b      	ldrh	r3, [r3, #10]
 800ff70:	2b2b      	cmp	r3, #43	; 0x2b
 800ff72:	d802      	bhi.n	800ff7a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800ff74:	f06f 0301 	mvn.w	r3, #1
 800ff78:	e2a7      	b.n	80104ca <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800ff80:	23f0      	movs	r3, #240	; 0xf0
 800ff82:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	891b      	ldrh	r3, [r3, #8]
 800ff88:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800ff8e:	e00c      	b.n	800ffaa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	895b      	ldrh	r3, [r3, #10]
 800ff94:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	895b      	ldrh	r3, [r3, #10]
 800ff9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d004      	beq.n	800ffba <dhcp_parse_reply+0x6a>
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	895b      	ldrh	r3, [r3, #10]
 800ffb4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d2ea      	bcs.n	800ff90 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d102      	bne.n	800ffc6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800ffc0:	f06f 0301 	mvn.w	r3, #1
 800ffc4:	e281      	b.n	80104ca <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800ffc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ffc8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800ffca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ffcc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ffd4:	e239      	b.n	801044a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800ffd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffda:	4413      	add	r3, r2
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800ffe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffea:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800ffec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffee:	3302      	adds	r3, #2
 800fff0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fff2:	8bfa      	ldrh	r2, [r7, #30]
 800fff4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d202      	bcs.n	8010000 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800fffa:	f06f 0301 	mvn.w	r3, #1
 800fffe:	e264      	b.n	80104ca <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010002:	3301      	adds	r3, #1
 8010004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010006:	8952      	ldrh	r2, [r2, #10]
 8010008:	4293      	cmp	r3, r2
 801000a:	da07      	bge.n	801001c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801000c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801000e:	3301      	adds	r3, #1
 8010010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010012:	4413      	add	r3, r2
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801001a:	e00b      	b.n	8010034 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801001c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d004      	beq.n	801002e <dhcp_parse_reply+0xde>
 8010024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	e000      	b.n	8010030 <dhcp_parse_reply+0xe0>
 801002e:	2300      	movs	r3, #0
 8010030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801003c:	7dfb      	ldrb	r3, [r7, #23]
 801003e:	2b3b      	cmp	r3, #59	; 0x3b
 8010040:	f200 812c 	bhi.w	801029c <dhcp_parse_reply+0x34c>
 8010044:	a201      	add	r2, pc, #4	; (adr r2, 801004c <dhcp_parse_reply+0xfc>)
 8010046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004a:	bf00      	nop
 801004c:	0801013d 	.word	0x0801013d
 8010050:	0801014d 	.word	0x0801014d
 8010054:	0801029d 	.word	0x0801029d
 8010058:	0801016f 	.word	0x0801016f
 801005c:	0801029d 	.word	0x0801029d
 8010060:	0801029d 	.word	0x0801029d
 8010064:	0801029d 	.word	0x0801029d
 8010068:	0801029d 	.word	0x0801029d
 801006c:	0801029d 	.word	0x0801029d
 8010070:	0801029d 	.word	0x0801029d
 8010074:	0801029d 	.word	0x0801029d
 8010078:	0801029d 	.word	0x0801029d
 801007c:	0801029d 	.word	0x0801029d
 8010080:	0801029d 	.word	0x0801029d
 8010084:	0801029d 	.word	0x0801029d
 8010088:	0801029d 	.word	0x0801029d
 801008c:	0801029d 	.word	0x0801029d
 8010090:	0801029d 	.word	0x0801029d
 8010094:	0801029d 	.word	0x0801029d
 8010098:	0801029d 	.word	0x0801029d
 801009c:	0801029d 	.word	0x0801029d
 80100a0:	0801029d 	.word	0x0801029d
 80100a4:	0801029d 	.word	0x0801029d
 80100a8:	0801029d 	.word	0x0801029d
 80100ac:	0801029d 	.word	0x0801029d
 80100b0:	0801029d 	.word	0x0801029d
 80100b4:	0801029d 	.word	0x0801029d
 80100b8:	0801029d 	.word	0x0801029d
 80100bc:	0801029d 	.word	0x0801029d
 80100c0:	0801029d 	.word	0x0801029d
 80100c4:	0801029d 	.word	0x0801029d
 80100c8:	0801029d 	.word	0x0801029d
 80100cc:	0801029d 	.word	0x0801029d
 80100d0:	0801029d 	.word	0x0801029d
 80100d4:	0801029d 	.word	0x0801029d
 80100d8:	0801029d 	.word	0x0801029d
 80100dc:	0801029d 	.word	0x0801029d
 80100e0:	0801029d 	.word	0x0801029d
 80100e4:	0801029d 	.word	0x0801029d
 80100e8:	0801029d 	.word	0x0801029d
 80100ec:	0801029d 	.word	0x0801029d
 80100f0:	0801029d 	.word	0x0801029d
 80100f4:	0801029d 	.word	0x0801029d
 80100f8:	0801029d 	.word	0x0801029d
 80100fc:	0801029d 	.word	0x0801029d
 8010100:	0801029d 	.word	0x0801029d
 8010104:	0801029d 	.word	0x0801029d
 8010108:	0801029d 	.word	0x0801029d
 801010c:	0801029d 	.word	0x0801029d
 8010110:	0801029d 	.word	0x0801029d
 8010114:	0801029d 	.word	0x0801029d
 8010118:	0801019b 	.word	0x0801019b
 801011c:	080101bd 	.word	0x080101bd
 8010120:	080101f9 	.word	0x080101f9
 8010124:	0801021b 	.word	0x0801021b
 8010128:	0801029d 	.word	0x0801029d
 801012c:	0801029d 	.word	0x0801029d
 8010130:	0801029d 	.word	0x0801029d
 8010134:	08010259 	.word	0x08010259
 8010138:	0801027b 	.word	0x0801027b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801013c:	2300      	movs	r3, #0
 801013e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010146:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801014a:	e0ab      	b.n	80102a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801014c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010150:	2b04      	cmp	r3, #4
 8010152:	d009      	beq.n	8010168 <dhcp_parse_reply+0x218>
 8010154:	4b3a      	ldr	r3, [pc, #232]	; (8010240 <dhcp_parse_reply+0x2f0>)
 8010156:	f240 622e 	movw	r2, #1582	; 0x62e
 801015a:	493a      	ldr	r1, [pc, #232]	; (8010244 <dhcp_parse_reply+0x2f4>)
 801015c:	483a      	ldr	r0, [pc, #232]	; (8010248 <dhcp_parse_reply+0x2f8>)
 801015e:	f003 fe8b 	bl	8013e78 <iprintf>
 8010162:	f06f 0305 	mvn.w	r3, #5
 8010166:	e1b0      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010168:	2306      	movs	r3, #6
 801016a:	623b      	str	r3, [r7, #32]
        break;
 801016c:	e09a      	b.n	80102a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801016e:	2304      	movs	r3, #4
 8010170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010174:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801017c:	429a      	cmp	r2, r3
 801017e:	d209      	bcs.n	8010194 <dhcp_parse_reply+0x244>
 8010180:	4b2f      	ldr	r3, [pc, #188]	; (8010240 <dhcp_parse_reply+0x2f0>)
 8010182:	f240 6233 	movw	r2, #1587	; 0x633
 8010186:	4931      	ldr	r1, [pc, #196]	; (801024c <dhcp_parse_reply+0x2fc>)
 8010188:	482f      	ldr	r0, [pc, #188]	; (8010248 <dhcp_parse_reply+0x2f8>)
 801018a:	f003 fe75 	bl	8013e78 <iprintf>
 801018e:	f06f 0305 	mvn.w	r3, #5
 8010192:	e19a      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010194:	2307      	movs	r3, #7
 8010196:	623b      	str	r3, [r7, #32]
        break;
 8010198:	e084      	b.n	80102a4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801019a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d009      	beq.n	80101b6 <dhcp_parse_reply+0x266>
 80101a2:	4b27      	ldr	r3, [pc, #156]	; (8010240 <dhcp_parse_reply+0x2f0>)
 80101a4:	f240 6241 	movw	r2, #1601	; 0x641
 80101a8:	4926      	ldr	r1, [pc, #152]	; (8010244 <dhcp_parse_reply+0x2f4>)
 80101aa:	4827      	ldr	r0, [pc, #156]	; (8010248 <dhcp_parse_reply+0x2f8>)
 80101ac:	f003 fe64 	bl	8013e78 <iprintf>
 80101b0:	f06f 0305 	mvn.w	r3, #5
 80101b4:	e189      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80101b6:	2303      	movs	r3, #3
 80101b8:	623b      	str	r3, [r7, #32]
        break;
 80101ba:	e073      	b.n	80102a4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80101bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d009      	beq.n	80101d8 <dhcp_parse_reply+0x288>
 80101c4:	4b1e      	ldr	r3, [pc, #120]	; (8010240 <dhcp_parse_reply+0x2f0>)
 80101c6:	f240 624f 	movw	r2, #1615	; 0x64f
 80101ca:	4921      	ldr	r1, [pc, #132]	; (8010250 <dhcp_parse_reply+0x300>)
 80101cc:	481e      	ldr	r0, [pc, #120]	; (8010248 <dhcp_parse_reply+0x2f8>)
 80101ce:	f003 fe53 	bl	8013e78 <iprintf>
 80101d2:	f06f 0305 	mvn.w	r3, #5
 80101d6:	e178      	b.n	80104ca <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80101d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80101da:	2bf0      	cmp	r3, #240	; 0xf0
 80101dc:	d009      	beq.n	80101f2 <dhcp_parse_reply+0x2a2>
 80101de:	4b18      	ldr	r3, [pc, #96]	; (8010240 <dhcp_parse_reply+0x2f0>)
 80101e0:	f240 6251 	movw	r2, #1617	; 0x651
 80101e4:	491b      	ldr	r1, [pc, #108]	; (8010254 <dhcp_parse_reply+0x304>)
 80101e6:	4818      	ldr	r0, [pc, #96]	; (8010248 <dhcp_parse_reply+0x2f8>)
 80101e8:	f003 fe46 	bl	8013e78 <iprintf>
 80101ec:	f06f 0305 	mvn.w	r3, #5
 80101f0:	e16b      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80101f2:	2300      	movs	r3, #0
 80101f4:	623b      	str	r3, [r7, #32]
        break;
 80101f6:	e055      	b.n	80102a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80101f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d009      	beq.n	8010214 <dhcp_parse_reply+0x2c4>
 8010200:	4b0f      	ldr	r3, [pc, #60]	; (8010240 <dhcp_parse_reply+0x2f0>)
 8010202:	f240 6255 	movw	r2, #1621	; 0x655
 8010206:	4912      	ldr	r1, [pc, #72]	; (8010250 <dhcp_parse_reply+0x300>)
 8010208:	480f      	ldr	r0, [pc, #60]	; (8010248 <dhcp_parse_reply+0x2f8>)
 801020a:	f003 fe35 	bl	8013e78 <iprintf>
 801020e:	f06f 0305 	mvn.w	r3, #5
 8010212:	e15a      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010214:	2301      	movs	r3, #1
 8010216:	623b      	str	r3, [r7, #32]
        break;
 8010218:	e044      	b.n	80102a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801021a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801021e:	2b04      	cmp	r3, #4
 8010220:	d009      	beq.n	8010236 <dhcp_parse_reply+0x2e6>
 8010222:	4b07      	ldr	r3, [pc, #28]	; (8010240 <dhcp_parse_reply+0x2f0>)
 8010224:	f240 6259 	movw	r2, #1625	; 0x659
 8010228:	4906      	ldr	r1, [pc, #24]	; (8010244 <dhcp_parse_reply+0x2f4>)
 801022a:	4807      	ldr	r0, [pc, #28]	; (8010248 <dhcp_parse_reply+0x2f8>)
 801022c:	f003 fe24 	bl	8013e78 <iprintf>
 8010230:	f06f 0305 	mvn.w	r3, #5
 8010234:	e149      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010236:	2302      	movs	r3, #2
 8010238:	623b      	str	r3, [r7, #32]
        break;
 801023a:	e033      	b.n	80102a4 <dhcp_parse_reply+0x354>
 801023c:	2000c498 	.word	0x2000c498
 8010240:	08019858 	.word	0x08019858
 8010244:	08019ae0 	.word	0x08019ae0
 8010248:	080198b8 	.word	0x080198b8
 801024c:	08019aec 	.word	0x08019aec
 8010250:	08019b00 	.word	0x08019b00
 8010254:	08019b0c 	.word	0x08019b0c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801025c:	2b04      	cmp	r3, #4
 801025e:	d009      	beq.n	8010274 <dhcp_parse_reply+0x324>
 8010260:	4b9c      	ldr	r3, [pc, #624]	; (80104d4 <dhcp_parse_reply+0x584>)
 8010262:	f240 625d 	movw	r2, #1629	; 0x65d
 8010266:	499c      	ldr	r1, [pc, #624]	; (80104d8 <dhcp_parse_reply+0x588>)
 8010268:	489c      	ldr	r0, [pc, #624]	; (80104dc <dhcp_parse_reply+0x58c>)
 801026a:	f003 fe05 	bl	8013e78 <iprintf>
 801026e:	f06f 0305 	mvn.w	r3, #5
 8010272:	e12a      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010274:	2304      	movs	r3, #4
 8010276:	623b      	str	r3, [r7, #32]
        break;
 8010278:	e014      	b.n	80102a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801027a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801027e:	2b04      	cmp	r3, #4
 8010280:	d009      	beq.n	8010296 <dhcp_parse_reply+0x346>
 8010282:	4b94      	ldr	r3, [pc, #592]	; (80104d4 <dhcp_parse_reply+0x584>)
 8010284:	f240 6261 	movw	r2, #1633	; 0x661
 8010288:	4993      	ldr	r1, [pc, #588]	; (80104d8 <dhcp_parse_reply+0x588>)
 801028a:	4894      	ldr	r0, [pc, #592]	; (80104dc <dhcp_parse_reply+0x58c>)
 801028c:	f003 fdf4 	bl	8013e78 <iprintf>
 8010290:	f06f 0305 	mvn.w	r3, #5
 8010294:	e119      	b.n	80104ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010296:	2305      	movs	r3, #5
 8010298:	623b      	str	r3, [r7, #32]
        break;
 801029a:	e003      	b.n	80102a4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80102a2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80102a4:	7dfb      	ldrb	r3, [r7, #23]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d103      	bne.n	80102b2 <dhcp_parse_reply+0x362>
      offset++;
 80102aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102ac:	3301      	adds	r3, #1
 80102ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 80102b0:	e0a1      	b.n	80103f6 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80102b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102b8:	4413      	add	r3, r2
 80102ba:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80102be:	4293      	cmp	r3, r2
 80102c0:	dd02      	ble.n	80102c8 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80102c2:	f06f 0301 	mvn.w	r3, #1
 80102c6:	e100      	b.n	80104ca <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80102c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102d0:	4413      	add	r3, r2
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	3302      	adds	r3, #2
 80102d6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80102d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f000 808a 	beq.w	80103f6 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80102e2:	2300      	movs	r3, #0
 80102e4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	db02      	blt.n	80102f2 <dhcp_parse_reply+0x3a2>
 80102ec:	6a3b      	ldr	r3, [r7, #32]
 80102ee:	2b07      	cmp	r3, #7
 80102f0:	dd06      	ble.n	8010300 <dhcp_parse_reply+0x3b0>
 80102f2:	4b78      	ldr	r3, [pc, #480]	; (80104d4 <dhcp_parse_reply+0x584>)
 80102f4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80102f8:	4979      	ldr	r1, [pc, #484]	; (80104e0 <dhcp_parse_reply+0x590>)
 80102fa:	4878      	ldr	r0, [pc, #480]	; (80104dc <dhcp_parse_reply+0x58c>)
 80102fc:	f003 fdbc 	bl	8013e78 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010300:	4a78      	ldr	r2, [pc, #480]	; (80104e4 <dhcp_parse_reply+0x594>)
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	4413      	add	r3, r2
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d174      	bne.n	80103f6 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801030c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010310:	2b04      	cmp	r3, #4
 8010312:	bf28      	it	cs
 8010314:	2304      	movcs	r3, #4
 8010316:	b2db      	uxtb	r3, r3
 8010318:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801031a:	8bfb      	ldrh	r3, [r7, #30]
 801031c:	8aba      	ldrh	r2, [r7, #20]
 801031e:	f107 0108 	add.w	r1, r7, #8
 8010322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010324:	f7f8 fc18 	bl	8008b58 <pbuf_copy_partial>
 8010328:	4603      	mov	r3, r0
 801032a:	461a      	mov	r2, r3
 801032c:	8abb      	ldrh	r3, [r7, #20]
 801032e:	4293      	cmp	r3, r2
 8010330:	d002      	beq.n	8010338 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8010332:	f06f 0301 	mvn.w	r3, #1
 8010336:	e0c8      	b.n	80104ca <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8010338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801033c:	2b04      	cmp	r3, #4
 801033e:	d933      	bls.n	80103a8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010344:	f003 0303 	and.w	r3, r3, #3
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d009      	beq.n	8010362 <dhcp_parse_reply+0x412>
 801034e:	4b61      	ldr	r3, [pc, #388]	; (80104d4 <dhcp_parse_reply+0x584>)
 8010350:	f240 6281 	movw	r2, #1665	; 0x681
 8010354:	4964      	ldr	r1, [pc, #400]	; (80104e8 <dhcp_parse_reply+0x598>)
 8010356:	4861      	ldr	r0, [pc, #388]	; (80104dc <dhcp_parse_reply+0x58c>)
 8010358:	f003 fd8e 	bl	8013e78 <iprintf>
 801035c:	f06f 0305 	mvn.w	r3, #5
 8010360:	e0b3      	b.n	80104ca <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010362:	4a60      	ldr	r2, [pc, #384]	; (80104e4 <dhcp_parse_reply+0x594>)
 8010364:	6a3b      	ldr	r3, [r7, #32]
 8010366:	4413      	add	r3, r2
 8010368:	2201      	movs	r2, #1
 801036a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	4618      	mov	r0, r3
 8010370:	f7f6 fe03 	bl	8006f7a <lwip_htonl>
 8010374:	4602      	mov	r2, r0
 8010376:	495d      	ldr	r1, [pc, #372]	; (80104ec <dhcp_parse_reply+0x59c>)
 8010378:	6a3b      	ldr	r3, [r7, #32]
 801037a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801037e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010382:	3b04      	subs	r3, #4
 8010384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8010388:	8bfb      	ldrh	r3, [r7, #30]
 801038a:	3304      	adds	r3, #4
 801038c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801038e:	8a7a      	ldrh	r2, [r7, #18]
 8010390:	8bfb      	ldrh	r3, [r7, #30]
 8010392:	429a      	cmp	r2, r3
 8010394:	d202      	bcs.n	801039c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8010396:	f06f 0301 	mvn.w	r3, #1
 801039a:	e096      	b.n	80104ca <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801039c:	8a7b      	ldrh	r3, [r7, #18]
 801039e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80103a0:	6a3b      	ldr	r3, [r7, #32]
 80103a2:	3301      	adds	r3, #1
 80103a4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80103a6:	e79e      	b.n	80102e6 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80103a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103ac:	2b04      	cmp	r3, #4
 80103ae:	d106      	bne.n	80103be <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7f6 fde1 	bl	8006f7a <lwip_htonl>
 80103b8:	4603      	mov	r3, r0
 80103ba:	60bb      	str	r3, [r7, #8]
 80103bc:	e011      	b.n	80103e2 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80103be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d009      	beq.n	80103da <dhcp_parse_reply+0x48a>
 80103c6:	4b43      	ldr	r3, [pc, #268]	; (80104d4 <dhcp_parse_reply+0x584>)
 80103c8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80103cc:	4948      	ldr	r1, [pc, #288]	; (80104f0 <dhcp_parse_reply+0x5a0>)
 80103ce:	4843      	ldr	r0, [pc, #268]	; (80104dc <dhcp_parse_reply+0x58c>)
 80103d0:	f003 fd52 	bl	8013e78 <iprintf>
 80103d4:	f06f 0305 	mvn.w	r3, #5
 80103d8:	e077      	b.n	80104ca <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80103da:	f107 0308 	add.w	r3, r7, #8
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80103e2:	4a40      	ldr	r2, [pc, #256]	; (80104e4 <dhcp_parse_reply+0x594>)
 80103e4:	6a3b      	ldr	r3, [r7, #32]
 80103e6:	4413      	add	r3, r2
 80103e8:	2201      	movs	r2, #1
 80103ea:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	493f      	ldr	r1, [pc, #252]	; (80104ec <dhcp_parse_reply+0x59c>)
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	895b      	ldrh	r3, [r3, #10]
 80103fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d324      	bcc.n	801044a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	895b      	ldrh	r3, [r3, #10]
 8010404:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	895b      	ldrh	r3, [r3, #10]
 801040e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8010414:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010416:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010418:	429a      	cmp	r2, r3
 801041a:	d213      	bcs.n	8010444 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8010422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010424:	2b00      	cmp	r3, #0
 8010426:	d109      	bne.n	801043c <dhcp_parse_reply+0x4ec>
 8010428:	4b2a      	ldr	r3, [pc, #168]	; (80104d4 <dhcp_parse_reply+0x584>)
 801042a:	f240 629d 	movw	r2, #1693	; 0x69d
 801042e:	4931      	ldr	r1, [pc, #196]	; (80104f4 <dhcp_parse_reply+0x5a4>)
 8010430:	482a      	ldr	r0, [pc, #168]	; (80104dc <dhcp_parse_reply+0x58c>)
 8010432:	f003 fd21 	bl	8013e78 <iprintf>
 8010436:	f06f 0305 	mvn.w	r3, #5
 801043a:	e046      	b.n	80104ca <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010442:	e002      	b.n	801044a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010444:	f06f 0301 	mvn.w	r3, #1
 8010448:	e03f      	b.n	80104ca <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00a      	beq.n	8010466 <dhcp_parse_reply+0x516>
 8010450:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010452:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010454:	429a      	cmp	r2, r3
 8010456:	d206      	bcs.n	8010466 <dhcp_parse_reply+0x516>
 8010458:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801045a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801045c:	4413      	add	r3, r2
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2bff      	cmp	r3, #255	; 0xff
 8010462:	f47f adb8 	bne.w	800ffd6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8010466:	4b1f      	ldr	r3, [pc, #124]	; (80104e4 <dhcp_parse_reply+0x594>)
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d018      	beq.n	80104a0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801046e:	4b1f      	ldr	r3, [pc, #124]	; (80104ec <dhcp_parse_reply+0x59c>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010474:	4b1b      	ldr	r3, [pc, #108]	; (80104e4 <dhcp_parse_reply+0x594>)
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d102      	bne.n	8010486 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010480:	2301      	movs	r3, #1
 8010482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010484:	e00c      	b.n	80104a0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b02      	cmp	r3, #2
 801048a:	d102      	bne.n	8010492 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801048c:	2301      	movs	r3, #1
 801048e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010490:	e006      	b.n	80104a0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2b03      	cmp	r3, #3
 8010496:	d103      	bne.n	80104a0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8010498:	2301      	movs	r3, #1
 801049a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801049c:	2301      	movs	r3, #1
 801049e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80104aa:	236c      	movs	r3, #108	; 0x6c
 80104ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80104ae:	23ec      	movs	r3, #236	; 0xec
 80104b0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80104b2:	e56a      	b.n	800ff8a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d006      	beq.n	80104c8 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80104be:	232c      	movs	r3, #44	; 0x2c
 80104c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80104c2:	236c      	movs	r3, #108	; 0x6c
 80104c4:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80104c6:	e560      	b.n	800ff8a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3740      	adds	r7, #64	; 0x40
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	08019858 	.word	0x08019858
 80104d8:	08019ae0 	.word	0x08019ae0
 80104dc:	080198b8 	.word	0x080198b8
 80104e0:	08019b24 	.word	0x08019b24
 80104e4:	2000c498 	.word	0x2000c498
 80104e8:	08019b38 	.word	0x08019b38
 80104ec:	2000c478 	.word	0x2000c478
 80104f0:	08019b50 	.word	0x08019b50
 80104f4:	08019b64 	.word	0x08019b64

080104f8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08a      	sub	sp, #40	; 0x28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
 8010504:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8010506:	4b60      	ldr	r3, [pc, #384]	; (8010688 <dhcp_recv+0x190>)
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010510:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	f000 809d 	beq.w	801065a <dhcp_recv+0x162>
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	791b      	ldrb	r3, [r3, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	f000 8098 	beq.w	801065a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	895b      	ldrh	r3, [r3, #10]
 801052e:	2b2b      	cmp	r3, #43	; 0x2b
 8010530:	f240 8095 	bls.w	801065e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	2b02      	cmp	r3, #2
 801053a:	f040 8092 	bne.w	8010662 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801053e:	2300      	movs	r3, #0
 8010540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010544:	e012      	b.n	801056c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801054a:	6a3a      	ldr	r2, [r7, #32]
 801054c:	4413      	add	r3, r2
 801054e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010556:	69b9      	ldr	r1, [r7, #24]
 8010558:	440b      	add	r3, r1
 801055a:	7f1b      	ldrb	r3, [r3, #28]
 801055c:	429a      	cmp	r2, r3
 801055e:	f040 8082 	bne.w	8010666 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010566:	3301      	adds	r3, #1
 8010568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801056c:	6a3b      	ldr	r3, [r7, #32]
 801056e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010572:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010576:	429a      	cmp	r2, r3
 8010578:	d203      	bcs.n	8010582 <dhcp_recv+0x8a>
 801057a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801057e:	2b05      	cmp	r3, #5
 8010580:	d9e1      	bls.n	8010546 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	4618      	mov	r0, r3
 8010588:	f7f6 fcf7 	bl	8006f7a <lwip_htonl>
 801058c:	4602      	mov	r2, r0
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	429a      	cmp	r2, r3
 8010594:	d169      	bne.n	801066a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8010596:	69f9      	ldr	r1, [r7, #28]
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7ff fcd9 	bl	800ff50 <dhcp_parse_reply>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d164      	bne.n	801066e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80105a4:	4b39      	ldr	r3, [pc, #228]	; (801068c <dhcp_recv+0x194>)
 80105a6:	785b      	ldrb	r3, [r3, #1]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d062      	beq.n	8010672 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80105b2:	4b37      	ldr	r3, [pc, #220]	; (8010690 <dhcp_recv+0x198>)
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80105b8:	7cfb      	ldrb	r3, [r7, #19]
 80105ba:	2b05      	cmp	r3, #5
 80105bc:	d12a      	bne.n	8010614 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	795b      	ldrb	r3, [r3, #5]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d112      	bne.n	80105ec <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80105c6:	6979      	ldr	r1, [r7, #20]
 80105c8:	6a38      	ldr	r0, [r7, #32]
 80105ca:	f7fe fe17 	bl	800f1fc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105d4:	f003 0308 	and.w	r3, r3, #8
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d003      	beq.n	80105e4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80105dc:	6a38      	ldr	r0, [r7, #32]
 80105de:	f7fe fb87 	bl	800ecf0 <dhcp_check>
 80105e2:	e049      	b.n	8010678 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80105e4:	6a38      	ldr	r0, [r7, #32]
 80105e6:	f7ff f867 	bl	800f6b8 <dhcp_bind>
 80105ea:	e045      	b.n	8010678 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	795b      	ldrb	r3, [r3, #5]
 80105f0:	2b03      	cmp	r3, #3
 80105f2:	d007      	beq.n	8010604 <dhcp_recv+0x10c>
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	795b      	ldrb	r3, [r3, #5]
 80105f8:	2b04      	cmp	r3, #4
 80105fa:	d003      	beq.n	8010604 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010600:	2b05      	cmp	r3, #5
 8010602:	d139      	bne.n	8010678 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8010604:	6979      	ldr	r1, [r7, #20]
 8010606:	6a38      	ldr	r0, [r7, #32]
 8010608:	f7fe fdf8 	bl	800f1fc <dhcp_handle_ack>
      dhcp_bind(netif);
 801060c:	6a38      	ldr	r0, [r7, #32]
 801060e:	f7ff f853 	bl	800f6b8 <dhcp_bind>
 8010612:	e031      	b.n	8010678 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010614:	7cfb      	ldrb	r3, [r7, #19]
 8010616:	2b06      	cmp	r3, #6
 8010618:	d113      	bne.n	8010642 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801061e:	2b03      	cmp	r3, #3
 8010620:	d00b      	beq.n	801063a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	795b      	ldrb	r3, [r3, #5]
 8010626:	2b01      	cmp	r3, #1
 8010628:	d007      	beq.n	801063a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801062e:	2b04      	cmp	r3, #4
 8010630:	d003      	beq.n	801063a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	795b      	ldrb	r3, [r3, #5]
 8010636:	2b05      	cmp	r3, #5
 8010638:	d103      	bne.n	8010642 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801063a:	6a38      	ldr	r0, [r7, #32]
 801063c:	f7fe fb3e 	bl	800ecbc <dhcp_handle_nak>
 8010640:	e01a      	b.n	8010678 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8010642:	7cfb      	ldrb	r3, [r7, #19]
 8010644:	2b02      	cmp	r3, #2
 8010646:	d116      	bne.n	8010676 <dhcp_recv+0x17e>
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	795b      	ldrb	r3, [r3, #5]
 801064c:	2b06      	cmp	r3, #6
 801064e:	d112      	bne.n	8010676 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010650:	6979      	ldr	r1, [r7, #20]
 8010652:	6a38      	ldr	r0, [r7, #32]
 8010654:	f7fe fb80 	bl	800ed58 <dhcp_handle_offer>
 8010658:	e00e      	b.n	8010678 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801065a:	bf00      	nop
 801065c:	e00c      	b.n	8010678 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801065e:	bf00      	nop
 8010660:	e00a      	b.n	8010678 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010662:	bf00      	nop
 8010664:	e008      	b.n	8010678 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8010666:	bf00      	nop
 8010668:	e006      	b.n	8010678 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801066a:	bf00      	nop
 801066c:	e004      	b.n	8010678 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801066e:	bf00      	nop
 8010670:	e002      	b.n	8010678 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010672:	bf00      	nop
 8010674:	e000      	b.n	8010678 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8010676:	bf00      	nop
  pbuf_free(p);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7f8 f867 	bl	800874c <pbuf_free>
}
 801067e:	bf00      	nop
 8010680:	3728      	adds	r7, #40	; 0x28
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	20008ca4 	.word	0x20008ca4
 801068c:	2000c498 	.word	0x2000c498
 8010690:	2000c478 	.word	0x2000c478

08010694 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b088      	sub	sp, #32
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	4613      	mov	r3, r2
 80106a2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d108      	bne.n	80106bc <dhcp_create_msg+0x28>
 80106aa:	4b5f      	ldr	r3, [pc, #380]	; (8010828 <dhcp_create_msg+0x194>)
 80106ac:	f240 7269 	movw	r2, #1897	; 0x769
 80106b0:	495e      	ldr	r1, [pc, #376]	; (801082c <dhcp_create_msg+0x198>)
 80106b2:	485f      	ldr	r0, [pc, #380]	; (8010830 <dhcp_create_msg+0x19c>)
 80106b4:	f003 fbe0 	bl	8013e78 <iprintf>
 80106b8:	2300      	movs	r3, #0
 80106ba:	e0b1      	b.n	8010820 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d108      	bne.n	80106d4 <dhcp_create_msg+0x40>
 80106c2:	4b59      	ldr	r3, [pc, #356]	; (8010828 <dhcp_create_msg+0x194>)
 80106c4:	f240 726a 	movw	r2, #1898	; 0x76a
 80106c8:	495a      	ldr	r1, [pc, #360]	; (8010834 <dhcp_create_msg+0x1a0>)
 80106ca:	4859      	ldr	r0, [pc, #356]	; (8010830 <dhcp_create_msg+0x19c>)
 80106cc:	f003 fbd4 	bl	8013e78 <iprintf>
 80106d0:	2300      	movs	r3, #0
 80106d2:	e0a5      	b.n	8010820 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80106d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106d8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80106dc:	2036      	movs	r0, #54	; 0x36
 80106de:	f7f7 fd51 	bl	8008184 <pbuf_alloc>
 80106e2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d101      	bne.n	80106ee <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	e098      	b.n	8010820 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	895b      	ldrh	r3, [r3, #10]
 80106f2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80106f6:	d206      	bcs.n	8010706 <dhcp_create_msg+0x72>
 80106f8:	4b4b      	ldr	r3, [pc, #300]	; (8010828 <dhcp_create_msg+0x194>)
 80106fa:	f240 7271 	movw	r2, #1905	; 0x771
 80106fe:	494e      	ldr	r1, [pc, #312]	; (8010838 <dhcp_create_msg+0x1a4>)
 8010700:	484b      	ldr	r0, [pc, #300]	; (8010830 <dhcp_create_msg+0x19c>)
 8010702:	f003 fbb9 	bl	8013e78 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8010706:	79fb      	ldrb	r3, [r7, #7]
 8010708:	2b03      	cmp	r3, #3
 801070a:	d103      	bne.n	8010714 <dhcp_create_msg+0x80>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	795b      	ldrb	r3, [r3, #5]
 8010710:	2b03      	cmp	r3, #3
 8010712:	d10d      	bne.n	8010730 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	799b      	ldrb	r3, [r3, #6]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d105      	bne.n	8010728 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801071c:	f003 faac 	bl	8013c78 <rand>
 8010720:	4603      	mov	r3, r0
 8010722:	461a      	mov	r2, r3
 8010724:	4b45      	ldr	r3, [pc, #276]	; (801083c <dhcp_create_msg+0x1a8>)
 8010726:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8010728:	4b44      	ldr	r3, [pc, #272]	; (801083c <dhcp_create_msg+0x1a8>)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8010736:	f44f 729a 	mov.w	r2, #308	; 0x134
 801073a:	2100      	movs	r1, #0
 801073c:	6978      	ldr	r0, [r7, #20]
 801073e:	f003 fc00 	bl	8013f42 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	2201      	movs	r2, #1
 8010746:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	2201      	movs	r2, #1
 801074c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f7f6 fc0c 	bl	8006f7a <lwip_htonl>
 8010762:	4602      	mov	r2, r0
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010768:	79fb      	ldrb	r3, [r7, #7]
 801076a:	2b08      	cmp	r3, #8
 801076c:	d010      	beq.n	8010790 <dhcp_create_msg+0xfc>
 801076e:	79fb      	ldrb	r3, [r7, #7]
 8010770:	2b04      	cmp	r3, #4
 8010772:	d00d      	beq.n	8010790 <dhcp_create_msg+0xfc>
 8010774:	79fb      	ldrb	r3, [r7, #7]
 8010776:	2b07      	cmp	r3, #7
 8010778:	d00a      	beq.n	8010790 <dhcp_create_msg+0xfc>
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	2b03      	cmp	r3, #3
 801077e:	d10c      	bne.n	801079a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010784:	2b05      	cmp	r3, #5
 8010786:	d003      	beq.n	8010790 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	795b      	ldrb	r3, [r3, #5]
 801078c:	2b04      	cmp	r3, #4
 801078e:	d104      	bne.n	801079a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	3304      	adds	r3, #4
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801079a:	2300      	movs	r3, #0
 801079c:	83fb      	strh	r3, [r7, #30]
 801079e:	e00c      	b.n	80107ba <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80107a0:	8bfa      	ldrh	r2, [r7, #30]
 80107a2:	8bfb      	ldrh	r3, [r7, #30]
 80107a4:	68f9      	ldr	r1, [r7, #12]
 80107a6:	440a      	add	r2, r1
 80107a8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	4413      	add	r3, r2
 80107b0:	460a      	mov	r2, r1
 80107b2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80107b4:	8bfb      	ldrh	r3, [r7, #30]
 80107b6:	3301      	adds	r3, #1
 80107b8:	83fb      	strh	r3, [r7, #30]
 80107ba:	8bfb      	ldrh	r3, [r7, #30]
 80107bc:	2b05      	cmp	r3, #5
 80107be:	d9ef      	bls.n	80107a0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	2200      	movs	r2, #0
 80107c4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80107c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80107cc:	2200      	movs	r2, #0
 80107ce:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80107d2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80107d6:	2200      	movs	r2, #0
 80107d8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80107dc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80107e0:	2200      	movs	r2, #0
 80107e2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80107e6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107f0:	2301      	movs	r3, #1
 80107f2:	2235      	movs	r2, #53	; 0x35
 80107f4:	2000      	movs	r0, #0
 80107f6:	f7ff fadb 	bl	800fdb0 <dhcp_option>
 80107fa:	4603      	mov	r3, r0
 80107fc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010804:	79fa      	ldrb	r2, [r7, #7]
 8010806:	8a7b      	ldrh	r3, [r7, #18]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff fb05 	bl	800fe18 <dhcp_option_byte>
 801080e:	4603      	mov	r3, r0
 8010810:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d002      	beq.n	801081e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	8a7a      	ldrh	r2, [r7, #18]
 801081c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801081e:	69bb      	ldr	r3, [r7, #24]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3720      	adds	r7, #32
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	08019858 	.word	0x08019858
 801082c:	08019b78 	.word	0x08019b78
 8010830:	080198b8 	.word	0x080198b8
 8010834:	08019b98 	.word	0x08019b98
 8010838:	08019bb8 	.word	0x08019bb8
 801083c:	2000c4a8 	.word	0x2000c4a8

08010840 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
 801084c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801084e:	89fb      	ldrh	r3, [r7, #14]
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	81fa      	strh	r2, [r7, #14]
 8010854:	461a      	mov	r2, r3
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	4413      	add	r3, r2
 801085a:	22ff      	movs	r2, #255	; 0xff
 801085c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801085e:	e007      	b.n	8010870 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010860:	89fb      	ldrh	r3, [r7, #14]
 8010862:	1c5a      	adds	r2, r3, #1
 8010864:	81fa      	strh	r2, [r7, #14]
 8010866:	461a      	mov	r2, r3
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	4413      	add	r3, r2
 801086c:	2200      	movs	r2, #0
 801086e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010870:	89fb      	ldrh	r3, [r7, #14]
 8010872:	2b43      	cmp	r3, #67	; 0x43
 8010874:	d904      	bls.n	8010880 <dhcp_option_trailer+0x40>
 8010876:	89fb      	ldrh	r3, [r7, #14]
 8010878:	f003 0303 	and.w	r3, r3, #3
 801087c:	2b00      	cmp	r3, #0
 801087e:	d002      	beq.n	8010886 <dhcp_option_trailer+0x46>
 8010880:	89fb      	ldrh	r3, [r7, #14]
 8010882:	2b43      	cmp	r3, #67	; 0x43
 8010884:	d9ec      	bls.n	8010860 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010886:	89fb      	ldrh	r3, [r7, #14]
 8010888:	33f0      	adds	r3, #240	; 0xf0
 801088a:	b29b      	uxth	r3, r3
 801088c:	4619      	mov	r1, r3
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7f7 fdd6 	bl	8008440 <pbuf_realloc>
}
 8010894:	bf00      	nop
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d017      	beq.n	80108da <dhcp_supplied_address+0x3e>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d013      	beq.n	80108da <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	795b      	ldrb	r3, [r3, #5]
 80108bc:	2b0a      	cmp	r3, #10
 80108be:	d007      	beq.n	80108d0 <dhcp_supplied_address+0x34>
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	795b      	ldrb	r3, [r3, #5]
 80108c4:	2b05      	cmp	r3, #5
 80108c6:	d003      	beq.n	80108d0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80108cc:	2b04      	cmp	r3, #4
 80108ce:	d101      	bne.n	80108d4 <dhcp_supplied_address+0x38>
 80108d0:	2301      	movs	r3, #1
 80108d2:	e000      	b.n	80108d6 <dhcp_supplied_address+0x3a>
 80108d4:	2300      	movs	r3, #0
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	e000      	b.n	80108dc <dhcp_supplied_address+0x40>
  }
  return 0;
 80108da:	2300      	movs	r3, #0
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3714      	adds	r7, #20
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80108f0:	4915      	ldr	r1, [pc, #84]	; (8010948 <etharp_free_entry+0x60>)
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	4613      	mov	r3, r2
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	4413      	add	r3, r2
 80108fa:	00db      	lsls	r3, r3, #3
 80108fc:	440b      	add	r3, r1
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d013      	beq.n	801092c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010904:	4910      	ldr	r1, [pc, #64]	; (8010948 <etharp_free_entry+0x60>)
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	4613      	mov	r3, r2
 801090a:	005b      	lsls	r3, r3, #1
 801090c:	4413      	add	r3, r2
 801090e:	00db      	lsls	r3, r3, #3
 8010910:	440b      	add	r3, r1
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4618      	mov	r0, r3
 8010916:	f7f7 ff19 	bl	800874c <pbuf_free>
    arp_table[i].q = NULL;
 801091a:	490b      	ldr	r1, [pc, #44]	; (8010948 <etharp_free_entry+0x60>)
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	4613      	mov	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4413      	add	r3, r2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	440b      	add	r3, r1
 8010928:	2200      	movs	r2, #0
 801092a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801092c:	4906      	ldr	r1, [pc, #24]	; (8010948 <etharp_free_entry+0x60>)
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	4613      	mov	r3, r2
 8010932:	005b      	lsls	r3, r3, #1
 8010934:	4413      	add	r3, r2
 8010936:	00db      	lsls	r3, r3, #3
 8010938:	440b      	add	r3, r1
 801093a:	3314      	adds	r3, #20
 801093c:	2200      	movs	r2, #0
 801093e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010940:	bf00      	nop
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	2000c4ac 	.word	0x2000c4ac

0801094c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010952:	2300      	movs	r3, #0
 8010954:	607b      	str	r3, [r7, #4]
 8010956:	e096      	b.n	8010a86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010958:	494f      	ldr	r1, [pc, #316]	; (8010a98 <etharp_tmr+0x14c>)
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	4613      	mov	r3, r2
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	4413      	add	r3, r2
 8010962:	00db      	lsls	r3, r3, #3
 8010964:	440b      	add	r3, r1
 8010966:	3314      	adds	r3, #20
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801096c:	78fb      	ldrb	r3, [r7, #3]
 801096e:	2b00      	cmp	r3, #0
 8010970:	f000 8086 	beq.w	8010a80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010974:	4948      	ldr	r1, [pc, #288]	; (8010a98 <etharp_tmr+0x14c>)
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	4613      	mov	r3, r2
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	4413      	add	r3, r2
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	440b      	add	r3, r1
 8010982:	3312      	adds	r3, #18
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	3301      	adds	r3, #1
 8010988:	b298      	uxth	r0, r3
 801098a:	4943      	ldr	r1, [pc, #268]	; (8010a98 <etharp_tmr+0x14c>)
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	4613      	mov	r3, r2
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	4413      	add	r3, r2
 8010994:	00db      	lsls	r3, r3, #3
 8010996:	440b      	add	r3, r1
 8010998:	3312      	adds	r3, #18
 801099a:	4602      	mov	r2, r0
 801099c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801099e:	493e      	ldr	r1, [pc, #248]	; (8010a98 <etharp_tmr+0x14c>)
 80109a0:	687a      	ldr	r2, [r7, #4]
 80109a2:	4613      	mov	r3, r2
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	4413      	add	r3, r2
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	440b      	add	r3, r1
 80109ac:	3312      	adds	r3, #18
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80109b4:	d215      	bcs.n	80109e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80109b6:	4938      	ldr	r1, [pc, #224]	; (8010a98 <etharp_tmr+0x14c>)
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	4613      	mov	r3, r2
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4413      	add	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	440b      	add	r3, r1
 80109c4:	3314      	adds	r3, #20
 80109c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d10e      	bne.n	80109ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80109cc:	4932      	ldr	r1, [pc, #200]	; (8010a98 <etharp_tmr+0x14c>)
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	4613      	mov	r3, r2
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	4413      	add	r3, r2
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	440b      	add	r3, r1
 80109da:	3312      	adds	r3, #18
 80109dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80109de:	2b04      	cmp	r3, #4
 80109e0:	d903      	bls.n	80109ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f7ff ff80 	bl	80108e8 <etharp_free_entry>
 80109e8:	e04a      	b.n	8010a80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80109ea:	492b      	ldr	r1, [pc, #172]	; (8010a98 <etharp_tmr+0x14c>)
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	4613      	mov	r3, r2
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	4413      	add	r3, r2
 80109f4:	00db      	lsls	r3, r3, #3
 80109f6:	440b      	add	r3, r1
 80109f8:	3314      	adds	r3, #20
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d10a      	bne.n	8010a16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010a00:	4925      	ldr	r1, [pc, #148]	; (8010a98 <etharp_tmr+0x14c>)
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	4613      	mov	r3, r2
 8010a06:	005b      	lsls	r3, r3, #1
 8010a08:	4413      	add	r3, r2
 8010a0a:	00db      	lsls	r3, r3, #3
 8010a0c:	440b      	add	r3, r1
 8010a0e:	3314      	adds	r3, #20
 8010a10:	2204      	movs	r2, #4
 8010a12:	701a      	strb	r2, [r3, #0]
 8010a14:	e034      	b.n	8010a80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010a16:	4920      	ldr	r1, [pc, #128]	; (8010a98 <etharp_tmr+0x14c>)
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	4413      	add	r3, r2
 8010a20:	00db      	lsls	r3, r3, #3
 8010a22:	440b      	add	r3, r1
 8010a24:	3314      	adds	r3, #20
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	2b04      	cmp	r3, #4
 8010a2a:	d10a      	bne.n	8010a42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010a2c:	491a      	ldr	r1, [pc, #104]	; (8010a98 <etharp_tmr+0x14c>)
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	4613      	mov	r3, r2
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	4413      	add	r3, r2
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	440b      	add	r3, r1
 8010a3a:	3314      	adds	r3, #20
 8010a3c:	2202      	movs	r2, #2
 8010a3e:	701a      	strb	r2, [r3, #0]
 8010a40:	e01e      	b.n	8010a80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010a42:	4915      	ldr	r1, [pc, #84]	; (8010a98 <etharp_tmr+0x14c>)
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	4613      	mov	r3, r2
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	4413      	add	r3, r2
 8010a4c:	00db      	lsls	r3, r3, #3
 8010a4e:	440b      	add	r3, r1
 8010a50:	3314      	adds	r3, #20
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d113      	bne.n	8010a80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010a58:	490f      	ldr	r1, [pc, #60]	; (8010a98 <etharp_tmr+0x14c>)
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	4413      	add	r3, r2
 8010a62:	00db      	lsls	r3, r3, #3
 8010a64:	440b      	add	r3, r1
 8010a66:	3308      	adds	r3, #8
 8010a68:	6818      	ldr	r0, [r3, #0]
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	4a08      	ldr	r2, [pc, #32]	; (8010a98 <etharp_tmr+0x14c>)
 8010a76:	4413      	add	r3, r2
 8010a78:	3304      	adds	r3, #4
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	f000 fe72 	bl	8011764 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	3301      	adds	r3, #1
 8010a84:	607b      	str	r3, [r7, #4]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2b09      	cmp	r3, #9
 8010a8a:	f77f af65 	ble.w	8010958 <etharp_tmr+0xc>
      }
    }
  }
}
 8010a8e:	bf00      	nop
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	2000c4ac 	.word	0x2000c4ac

08010a9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b08a      	sub	sp, #40	; 0x28
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	607a      	str	r2, [r7, #4]
 8010aa8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010aaa:	230a      	movs	r3, #10
 8010aac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010aae:	230a      	movs	r3, #10
 8010ab0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010ab2:	230a      	movs	r3, #10
 8010ab4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010aba:	230a      	movs	r3, #10
 8010abc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	83bb      	strh	r3, [r7, #28]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	837b      	strh	r3, [r7, #26]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010aca:	2300      	movs	r3, #0
 8010acc:	843b      	strh	r3, [r7, #32]
 8010ace:	e0ae      	b.n	8010c2e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ad4:	49a6      	ldr	r1, [pc, #664]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010ad6:	4613      	mov	r3, r2
 8010ad8:	005b      	lsls	r3, r3, #1
 8010ada:	4413      	add	r3, r2
 8010adc:	00db      	lsls	r3, r3, #3
 8010ade:	440b      	add	r3, r1
 8010ae0:	3314      	adds	r3, #20
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010ae6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010aea:	2b0a      	cmp	r3, #10
 8010aec:	d105      	bne.n	8010afa <etharp_find_entry+0x5e>
 8010aee:	7dfb      	ldrb	r3, [r7, #23]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d102      	bne.n	8010afa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010af4:	8c3b      	ldrh	r3, [r7, #32]
 8010af6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010af8:	e095      	b.n	8010c26 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	f000 8092 	beq.w	8010c26 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010b02:	7dfb      	ldrb	r3, [r7, #23]
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d009      	beq.n	8010b1c <etharp_find_entry+0x80>
 8010b08:	7dfb      	ldrb	r3, [r7, #23]
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d806      	bhi.n	8010b1c <etharp_find_entry+0x80>
 8010b0e:	4b99      	ldr	r3, [pc, #612]	; (8010d74 <etharp_find_entry+0x2d8>)
 8010b10:	f240 1223 	movw	r2, #291	; 0x123
 8010b14:	4998      	ldr	r1, [pc, #608]	; (8010d78 <etharp_find_entry+0x2dc>)
 8010b16:	4899      	ldr	r0, [pc, #612]	; (8010d7c <etharp_find_entry+0x2e0>)
 8010b18:	f003 f9ae 	bl	8013e78 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d020      	beq.n	8010b64 <etharp_find_entry+0xc8>
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	6819      	ldr	r1, [r3, #0]
 8010b26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b2a:	4891      	ldr	r0, [pc, #580]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	4413      	add	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	4403      	add	r3, r0
 8010b36:	3304      	adds	r3, #4
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4299      	cmp	r1, r3
 8010b3c:	d112      	bne.n	8010b64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d00c      	beq.n	8010b5e <etharp_find_entry+0xc2>
 8010b44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b48:	4989      	ldr	r1, [pc, #548]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4413      	add	r3, r2
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	440b      	add	r3, r1
 8010b54:	3308      	adds	r3, #8
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d102      	bne.n	8010b64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010b5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b62:	e100      	b.n	8010d66 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010b64:	7dfb      	ldrb	r3, [r7, #23]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d140      	bne.n	8010bec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010b6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b6e:	4980      	ldr	r1, [pc, #512]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010b70:	4613      	mov	r3, r2
 8010b72:	005b      	lsls	r3, r3, #1
 8010b74:	4413      	add	r3, r2
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	440b      	add	r3, r1
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d01a      	beq.n	8010bb6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010b80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b84:	497a      	ldr	r1, [pc, #488]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010b86:	4613      	mov	r3, r2
 8010b88:	005b      	lsls	r3, r3, #1
 8010b8a:	4413      	add	r3, r2
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	440b      	add	r3, r1
 8010b90:	3312      	adds	r3, #18
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	8bba      	ldrh	r2, [r7, #28]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d845      	bhi.n	8010c26 <etharp_find_entry+0x18a>
            old_queue = i;
 8010b9a:	8c3b      	ldrh	r3, [r7, #32]
 8010b9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ba2:	4973      	ldr	r1, [pc, #460]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	005b      	lsls	r3, r3, #1
 8010ba8:	4413      	add	r3, r2
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	440b      	add	r3, r1
 8010bae:	3312      	adds	r3, #18
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	83bb      	strh	r3, [r7, #28]
 8010bb4:	e037      	b.n	8010c26 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010bb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bba:	496d      	ldr	r1, [pc, #436]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	4413      	add	r3, r2
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	440b      	add	r3, r1
 8010bc6:	3312      	adds	r3, #18
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	8b7a      	ldrh	r2, [r7, #26]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d82a      	bhi.n	8010c26 <etharp_find_entry+0x18a>
            old_pending = i;
 8010bd0:	8c3b      	ldrh	r3, [r7, #32]
 8010bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010bd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bd8:	4965      	ldr	r1, [pc, #404]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010bda:	4613      	mov	r3, r2
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	4413      	add	r3, r2
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	440b      	add	r3, r1
 8010be4:	3312      	adds	r3, #18
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	837b      	strh	r3, [r7, #26]
 8010bea:	e01c      	b.n	8010c26 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010bec:	7dfb      	ldrb	r3, [r7, #23]
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d919      	bls.n	8010c26 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010bf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bf6:	495e      	ldr	r1, [pc, #376]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	005b      	lsls	r3, r3, #1
 8010bfc:	4413      	add	r3, r2
 8010bfe:	00db      	lsls	r3, r3, #3
 8010c00:	440b      	add	r3, r1
 8010c02:	3312      	adds	r3, #18
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	8b3a      	ldrh	r2, [r7, #24]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d80c      	bhi.n	8010c26 <etharp_find_entry+0x18a>
            old_stable = i;
 8010c0c:	8c3b      	ldrh	r3, [r7, #32]
 8010c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010c10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c14:	4956      	ldr	r1, [pc, #344]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010c16:	4613      	mov	r3, r2
 8010c18:	005b      	lsls	r3, r3, #1
 8010c1a:	4413      	add	r3, r2
 8010c1c:	00db      	lsls	r3, r3, #3
 8010c1e:	440b      	add	r3, r1
 8010c20:	3312      	adds	r3, #18
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c26:	8c3b      	ldrh	r3, [r7, #32]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	843b      	strh	r3, [r7, #32]
 8010c2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c32:	2b09      	cmp	r3, #9
 8010c34:	f77f af4c 	ble.w	8010ad0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010c38:	7afb      	ldrb	r3, [r7, #11]
 8010c3a:	f003 0302 	and.w	r3, r3, #2
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d108      	bne.n	8010c54 <etharp_find_entry+0x1b8>
 8010c42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c46:	2b0a      	cmp	r3, #10
 8010c48:	d107      	bne.n	8010c5a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010c4a:	7afb      	ldrb	r3, [r7, #11]
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d102      	bne.n	8010c5a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010c54:	f04f 33ff 	mov.w	r3, #4294967295
 8010c58:	e085      	b.n	8010d66 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010c5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c5e:	2b09      	cmp	r3, #9
 8010c60:	dc02      	bgt.n	8010c68 <etharp_find_entry+0x1cc>
    i = empty;
 8010c62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c64:	843b      	strh	r3, [r7, #32]
 8010c66:	e039      	b.n	8010cdc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010c68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010c6c:	2b09      	cmp	r3, #9
 8010c6e:	dc14      	bgt.n	8010c9a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c72:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010c74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c78:	493d      	ldr	r1, [pc, #244]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	4413      	add	r3, r2
 8010c80:	00db      	lsls	r3, r3, #3
 8010c82:	440b      	add	r3, r1
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d018      	beq.n	8010cbc <etharp_find_entry+0x220>
 8010c8a:	4b3a      	ldr	r3, [pc, #232]	; (8010d74 <etharp_find_entry+0x2d8>)
 8010c8c:	f240 126d 	movw	r2, #365	; 0x16d
 8010c90:	493b      	ldr	r1, [pc, #236]	; (8010d80 <etharp_find_entry+0x2e4>)
 8010c92:	483a      	ldr	r0, [pc, #232]	; (8010d7c <etharp_find_entry+0x2e0>)
 8010c94:	f003 f8f0 	bl	8013e78 <iprintf>
 8010c98:	e010      	b.n	8010cbc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010c9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010c9e:	2b09      	cmp	r3, #9
 8010ca0:	dc02      	bgt.n	8010ca8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010ca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ca4:	843b      	strh	r3, [r7, #32]
 8010ca6:	e009      	b.n	8010cbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010ca8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010cac:	2b09      	cmp	r3, #9
 8010cae:	dc02      	bgt.n	8010cb6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010cb0:	8bfb      	ldrh	r3, [r7, #30]
 8010cb2:	843b      	strh	r3, [r7, #32]
 8010cb4:	e002      	b.n	8010cbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010cba:	e054      	b.n	8010d66 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010cbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cc0:	2b09      	cmp	r3, #9
 8010cc2:	dd06      	ble.n	8010cd2 <etharp_find_entry+0x236>
 8010cc4:	4b2b      	ldr	r3, [pc, #172]	; (8010d74 <etharp_find_entry+0x2d8>)
 8010cc6:	f240 127f 	movw	r2, #383	; 0x17f
 8010cca:	492e      	ldr	r1, [pc, #184]	; (8010d84 <etharp_find_entry+0x2e8>)
 8010ccc:	482b      	ldr	r0, [pc, #172]	; (8010d7c <etharp_find_entry+0x2e0>)
 8010cce:	f003 f8d3 	bl	8013e78 <iprintf>
    etharp_free_entry(i);
 8010cd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7ff fe06 	bl	80108e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010cdc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ce0:	2b09      	cmp	r3, #9
 8010ce2:	dd06      	ble.n	8010cf2 <etharp_find_entry+0x256>
 8010ce4:	4b23      	ldr	r3, [pc, #140]	; (8010d74 <etharp_find_entry+0x2d8>)
 8010ce6:	f240 1283 	movw	r2, #387	; 0x183
 8010cea:	4926      	ldr	r1, [pc, #152]	; (8010d84 <etharp_find_entry+0x2e8>)
 8010cec:	4823      	ldr	r0, [pc, #140]	; (8010d7c <etharp_find_entry+0x2e0>)
 8010cee:	f003 f8c3 	bl	8013e78 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010cf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cf6:	491e      	ldr	r1, [pc, #120]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	4413      	add	r3, r2
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	440b      	add	r3, r1
 8010d02:	3314      	adds	r3, #20
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d006      	beq.n	8010d18 <etharp_find_entry+0x27c>
 8010d0a:	4b1a      	ldr	r3, [pc, #104]	; (8010d74 <etharp_find_entry+0x2d8>)
 8010d0c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010d10:	491d      	ldr	r1, [pc, #116]	; (8010d88 <etharp_find_entry+0x2ec>)
 8010d12:	481a      	ldr	r0, [pc, #104]	; (8010d7c <etharp_find_entry+0x2e0>)
 8010d14:	f003 f8b0 	bl	8013e78 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d00b      	beq.n	8010d36 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010d1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6819      	ldr	r1, [r3, #0]
 8010d26:	4812      	ldr	r0, [pc, #72]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010d28:	4613      	mov	r3, r2
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	4413      	add	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	4403      	add	r3, r0
 8010d32:	3304      	adds	r3, #4
 8010d34:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010d36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d3a:	490d      	ldr	r1, [pc, #52]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	005b      	lsls	r3, r3, #1
 8010d40:	4413      	add	r3, r2
 8010d42:	00db      	lsls	r3, r3, #3
 8010d44:	440b      	add	r3, r1
 8010d46:	3312      	adds	r3, #18
 8010d48:	2200      	movs	r2, #0
 8010d4a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010d4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d50:	4907      	ldr	r1, [pc, #28]	; (8010d70 <etharp_find_entry+0x2d4>)
 8010d52:	4613      	mov	r3, r2
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	4413      	add	r3, r2
 8010d58:	00db      	lsls	r3, r3, #3
 8010d5a:	440b      	add	r3, r1
 8010d5c:	3308      	adds	r3, #8
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010d62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3728      	adds	r7, #40	; 0x28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	2000c4ac 	.word	0x2000c4ac
 8010d74:	08019bf8 	.word	0x08019bf8
 8010d78:	08019c30 	.word	0x08019c30
 8010d7c:	08019c70 	.word	0x08019c70
 8010d80:	08019c98 	.word	0x08019c98
 8010d84:	08019cb0 	.word	0x08019cb0
 8010d88:	08019cc4 	.word	0x08019cc4

08010d8c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af02      	add	r7, sp, #8
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010da0:	2b06      	cmp	r3, #6
 8010da2:	d006      	beq.n	8010db2 <etharp_update_arp_entry+0x26>
 8010da4:	4b48      	ldr	r3, [pc, #288]	; (8010ec8 <etharp_update_arp_entry+0x13c>)
 8010da6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010daa:	4948      	ldr	r1, [pc, #288]	; (8010ecc <etharp_update_arp_entry+0x140>)
 8010dac:	4848      	ldr	r0, [pc, #288]	; (8010ed0 <etharp_update_arp_entry+0x144>)
 8010dae:	f003 f863 	bl	8013e78 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d012      	beq.n	8010dde <etharp_update_arp_entry+0x52>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00e      	beq.n	8010dde <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68f9      	ldr	r1, [r7, #12]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f001 f920 	bl	801200c <ip4_addr_isbroadcast_u32>
 8010dcc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d105      	bne.n	8010dde <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010dda:	2be0      	cmp	r3, #224	; 0xe0
 8010ddc:	d102      	bne.n	8010de4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010dde:	f06f 030f 	mvn.w	r3, #15
 8010de2:	e06c      	b.n	8010ebe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010de4:	78fb      	ldrb	r3, [r7, #3]
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	4619      	mov	r1, r3
 8010dea:	68b8      	ldr	r0, [r7, #8]
 8010dec:	f7ff fe56 	bl	8010a9c <etharp_find_entry>
 8010df0:	4603      	mov	r3, r0
 8010df2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010df4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	da02      	bge.n	8010e02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010dfc:	8afb      	ldrh	r3, [r7, #22]
 8010dfe:	b25b      	sxtb	r3, r3
 8010e00:	e05d      	b.n	8010ebe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010e02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e06:	4933      	ldr	r1, [pc, #204]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e08:	4613      	mov	r3, r2
 8010e0a:	005b      	lsls	r3, r3, #1
 8010e0c:	4413      	add	r3, r2
 8010e0e:	00db      	lsls	r3, r3, #3
 8010e10:	440b      	add	r3, r1
 8010e12:	3314      	adds	r3, #20
 8010e14:	2202      	movs	r2, #2
 8010e16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010e18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e1c:	492d      	ldr	r1, [pc, #180]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e1e:	4613      	mov	r3, r2
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	4413      	add	r3, r2
 8010e24:	00db      	lsls	r3, r3, #3
 8010e26:	440b      	add	r3, r1
 8010e28:	3308      	adds	r3, #8
 8010e2a:	68fa      	ldr	r2, [r7, #12]
 8010e2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010e2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e32:	4613      	mov	r3, r2
 8010e34:	005b      	lsls	r3, r3, #1
 8010e36:	4413      	add	r3, r2
 8010e38:	00db      	lsls	r3, r3, #3
 8010e3a:	3308      	adds	r3, #8
 8010e3c:	4a25      	ldr	r2, [pc, #148]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e3e:	4413      	add	r3, r2
 8010e40:	3304      	adds	r3, #4
 8010e42:	2206      	movs	r2, #6
 8010e44:	6879      	ldr	r1, [r7, #4]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f003 f901 	bl	801404e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010e4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e50:	4920      	ldr	r1, [pc, #128]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e52:	4613      	mov	r3, r2
 8010e54:	005b      	lsls	r3, r3, #1
 8010e56:	4413      	add	r3, r2
 8010e58:	00db      	lsls	r3, r3, #3
 8010e5a:	440b      	add	r3, r1
 8010e5c:	3312      	adds	r3, #18
 8010e5e:	2200      	movs	r2, #0
 8010e60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010e62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e66:	491b      	ldr	r1, [pc, #108]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e68:	4613      	mov	r3, r2
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	4413      	add	r3, r2
 8010e6e:	00db      	lsls	r3, r3, #3
 8010e70:	440b      	add	r3, r1
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d021      	beq.n	8010ebc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010e78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e7c:	4915      	ldr	r1, [pc, #84]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e7e:	4613      	mov	r3, r2
 8010e80:	005b      	lsls	r3, r3, #1
 8010e82:	4413      	add	r3, r2
 8010e84:	00db      	lsls	r3, r3, #3
 8010e86:	440b      	add	r3, r1
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010e8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e90:	4910      	ldr	r1, [pc, #64]	; (8010ed4 <etharp_update_arp_entry+0x148>)
 8010e92:	4613      	mov	r3, r2
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	4413      	add	r3, r2
 8010e98:	00db      	lsls	r3, r3, #3
 8010e9a:	440b      	add	r3, r1
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6939      	ldr	r1, [r7, #16]
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f001 ffb9 	bl	8012e28 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010eb6:	6938      	ldr	r0, [r7, #16]
 8010eb8:	f7f7 fc48 	bl	800874c <pbuf_free>
  }
  return ERR_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3718      	adds	r7, #24
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	08019bf8 	.word	0x08019bf8
 8010ecc:	08019cf0 	.word	0x08019cf0
 8010ed0:	08019c70 	.word	0x08019c70
 8010ed4:	2000c4ac 	.word	0x2000c4ac

08010ed8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	e01e      	b.n	8010f24 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010ee6:	4913      	ldr	r1, [pc, #76]	; (8010f34 <etharp_cleanup_netif+0x5c>)
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	4613      	mov	r3, r2
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	4413      	add	r3, r2
 8010ef0:	00db      	lsls	r3, r3, #3
 8010ef2:	440b      	add	r3, r1
 8010ef4:	3314      	adds	r3, #20
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010efa:	7afb      	ldrb	r3, [r7, #11]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00e      	beq.n	8010f1e <etharp_cleanup_netif+0x46>
 8010f00:	490c      	ldr	r1, [pc, #48]	; (8010f34 <etharp_cleanup_netif+0x5c>)
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	4613      	mov	r3, r2
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	4413      	add	r3, r2
 8010f0a:	00db      	lsls	r3, r3, #3
 8010f0c:	440b      	add	r3, r1
 8010f0e:	3308      	adds	r3, #8
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d102      	bne.n	8010f1e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7ff fce5 	bl	80108e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	3301      	adds	r3, #1
 8010f22:	60fb      	str	r3, [r7, #12]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2b09      	cmp	r3, #9
 8010f28:	dddd      	ble.n	8010ee6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010f2a:	bf00      	nop
 8010f2c:	bf00      	nop
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	2000c4ac 	.word	0x2000c4ac

08010f38 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010f38:	b5b0      	push	{r4, r5, r7, lr}
 8010f3a:	b08a      	sub	sp, #40	; 0x28
 8010f3c:	af04      	add	r7, sp, #16
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d107      	bne.n	8010f58 <etharp_input+0x20>
 8010f48:	4b3f      	ldr	r3, [pc, #252]	; (8011048 <etharp_input+0x110>)
 8010f4a:	f240 228a 	movw	r2, #650	; 0x28a
 8010f4e:	493f      	ldr	r1, [pc, #252]	; (801104c <etharp_input+0x114>)
 8010f50:	483f      	ldr	r0, [pc, #252]	; (8011050 <etharp_input+0x118>)
 8010f52:	f002 ff91 	bl	8013e78 <iprintf>
 8010f56:	e074      	b.n	8011042 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	881b      	ldrh	r3, [r3, #0]
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f68:	d10c      	bne.n	8010f84 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010f6e:	2b06      	cmp	r3, #6
 8010f70:	d108      	bne.n	8010f84 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010f76:	2b04      	cmp	r3, #4
 8010f78:	d104      	bne.n	8010f84 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	885b      	ldrh	r3, [r3, #2]
 8010f7e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010f80:	2b08      	cmp	r3, #8
 8010f82:	d003      	beq.n	8010f8c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7f7 fbe1 	bl	800874c <pbuf_free>
    return;
 8010f8a:	e05a      	b.n	8011042 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	330e      	adds	r3, #14
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	3318      	adds	r3, #24
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d102      	bne.n	8010fac <etharp_input+0x74>
    for_us = 0;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	75fb      	strb	r3, [r7, #23]
 8010faa:	e009      	b.n	8010fc0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	bf0c      	ite	eq
 8010fb8:	2301      	moveq	r3, #1
 8010fba:	2300      	movne	r3, #0
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	f103 0208 	add.w	r2, r3, #8
 8010fc6:	7dfb      	ldrb	r3, [r7, #23]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d001      	beq.n	8010fd0 <etharp_input+0x98>
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e000      	b.n	8010fd2 <etharp_input+0x9a>
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	f107 010c 	add.w	r1, r7, #12
 8010fd6:	6838      	ldr	r0, [r7, #0]
 8010fd8:	f7ff fed8 	bl	8010d8c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	88db      	ldrh	r3, [r3, #6]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fe6:	d003      	beq.n	8010ff0 <etharp_input+0xb8>
 8010fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fec:	d01e      	beq.n	801102c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010fee:	e025      	b.n	801103c <etharp_input+0x104>
      if (for_us) {
 8010ff0:	7dfb      	ldrb	r3, [r7, #23]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d021      	beq.n	801103a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801100c:	693a      	ldr	r2, [r7, #16]
 801100e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011010:	2102      	movs	r1, #2
 8011012:	9103      	str	r1, [sp, #12]
 8011014:	f107 010c 	add.w	r1, r7, #12
 8011018:	9102      	str	r1, [sp, #8]
 801101a:	9201      	str	r2, [sp, #4]
 801101c:	9300      	str	r3, [sp, #0]
 801101e:	462b      	mov	r3, r5
 8011020:	4622      	mov	r2, r4
 8011022:	4601      	mov	r1, r0
 8011024:	6838      	ldr	r0, [r7, #0]
 8011026:	f000 faef 	bl	8011608 <etharp_raw>
      break;
 801102a:	e006      	b.n	801103a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801102c:	f107 030c 	add.w	r3, r7, #12
 8011030:	4619      	mov	r1, r3
 8011032:	6838      	ldr	r0, [r7, #0]
 8011034:	f7fe f9fc 	bl	800f430 <dhcp_arp_reply>
      break;
 8011038:	e000      	b.n	801103c <etharp_input+0x104>
      break;
 801103a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f7f7 fb85 	bl	800874c <pbuf_free>
}
 8011042:	3718      	adds	r7, #24
 8011044:	46bd      	mov	sp, r7
 8011046:	bdb0      	pop	{r4, r5, r7, pc}
 8011048:	08019bf8 	.word	0x08019bf8
 801104c:	08019d48 	.word	0x08019d48
 8011050:	08019c70 	.word	0x08019c70

08011054 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af02      	add	r7, sp, #8
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	4613      	mov	r3, r2
 8011060:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011062:	79fa      	ldrb	r2, [r7, #7]
 8011064:	4944      	ldr	r1, [pc, #272]	; (8011178 <etharp_output_to_arp_index+0x124>)
 8011066:	4613      	mov	r3, r2
 8011068:	005b      	lsls	r3, r3, #1
 801106a:	4413      	add	r3, r2
 801106c:	00db      	lsls	r3, r3, #3
 801106e:	440b      	add	r3, r1
 8011070:	3314      	adds	r3, #20
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	2b01      	cmp	r3, #1
 8011076:	d806      	bhi.n	8011086 <etharp_output_to_arp_index+0x32>
 8011078:	4b40      	ldr	r3, [pc, #256]	; (801117c <etharp_output_to_arp_index+0x128>)
 801107a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801107e:	4940      	ldr	r1, [pc, #256]	; (8011180 <etharp_output_to_arp_index+0x12c>)
 8011080:	4840      	ldr	r0, [pc, #256]	; (8011184 <etharp_output_to_arp_index+0x130>)
 8011082:	f002 fef9 	bl	8013e78 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011086:	79fa      	ldrb	r2, [r7, #7]
 8011088:	493b      	ldr	r1, [pc, #236]	; (8011178 <etharp_output_to_arp_index+0x124>)
 801108a:	4613      	mov	r3, r2
 801108c:	005b      	lsls	r3, r3, #1
 801108e:	4413      	add	r3, r2
 8011090:	00db      	lsls	r3, r3, #3
 8011092:	440b      	add	r3, r1
 8011094:	3314      	adds	r3, #20
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	2b02      	cmp	r3, #2
 801109a:	d153      	bne.n	8011144 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801109c:	79fa      	ldrb	r2, [r7, #7]
 801109e:	4936      	ldr	r1, [pc, #216]	; (8011178 <etharp_output_to_arp_index+0x124>)
 80110a0:	4613      	mov	r3, r2
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	4413      	add	r3, r2
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	440b      	add	r3, r1
 80110aa:	3312      	adds	r3, #18
 80110ac:	881b      	ldrh	r3, [r3, #0]
 80110ae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80110b2:	d919      	bls.n	80110e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80110b4:	79fa      	ldrb	r2, [r7, #7]
 80110b6:	4613      	mov	r3, r2
 80110b8:	005b      	lsls	r3, r3, #1
 80110ba:	4413      	add	r3, r2
 80110bc:	00db      	lsls	r3, r3, #3
 80110be:	4a2e      	ldr	r2, [pc, #184]	; (8011178 <etharp_output_to_arp_index+0x124>)
 80110c0:	4413      	add	r3, r2
 80110c2:	3304      	adds	r3, #4
 80110c4:	4619      	mov	r1, r3
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f000 fb4c 	bl	8011764 <etharp_request>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d138      	bne.n	8011144 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80110d2:	79fa      	ldrb	r2, [r7, #7]
 80110d4:	4928      	ldr	r1, [pc, #160]	; (8011178 <etharp_output_to_arp_index+0x124>)
 80110d6:	4613      	mov	r3, r2
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	4413      	add	r3, r2
 80110dc:	00db      	lsls	r3, r3, #3
 80110de:	440b      	add	r3, r1
 80110e0:	3314      	adds	r3, #20
 80110e2:	2203      	movs	r2, #3
 80110e4:	701a      	strb	r2, [r3, #0]
 80110e6:	e02d      	b.n	8011144 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80110e8:	79fa      	ldrb	r2, [r7, #7]
 80110ea:	4923      	ldr	r1, [pc, #140]	; (8011178 <etharp_output_to_arp_index+0x124>)
 80110ec:	4613      	mov	r3, r2
 80110ee:	005b      	lsls	r3, r3, #1
 80110f0:	4413      	add	r3, r2
 80110f2:	00db      	lsls	r3, r3, #3
 80110f4:	440b      	add	r3, r1
 80110f6:	3312      	adds	r3, #18
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80110fe:	d321      	bcc.n	8011144 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011100:	79fa      	ldrb	r2, [r7, #7]
 8011102:	4613      	mov	r3, r2
 8011104:	005b      	lsls	r3, r3, #1
 8011106:	4413      	add	r3, r2
 8011108:	00db      	lsls	r3, r3, #3
 801110a:	4a1b      	ldr	r2, [pc, #108]	; (8011178 <etharp_output_to_arp_index+0x124>)
 801110c:	4413      	add	r3, r2
 801110e:	1d19      	adds	r1, r3, #4
 8011110:	79fa      	ldrb	r2, [r7, #7]
 8011112:	4613      	mov	r3, r2
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	4413      	add	r3, r2
 8011118:	00db      	lsls	r3, r3, #3
 801111a:	3308      	adds	r3, #8
 801111c:	4a16      	ldr	r2, [pc, #88]	; (8011178 <etharp_output_to_arp_index+0x124>)
 801111e:	4413      	add	r3, r2
 8011120:	3304      	adds	r3, #4
 8011122:	461a      	mov	r2, r3
 8011124:	68f8      	ldr	r0, [r7, #12]
 8011126:	f000 fafb 	bl	8011720 <etharp_request_dst>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d109      	bne.n	8011144 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011130:	79fa      	ldrb	r2, [r7, #7]
 8011132:	4911      	ldr	r1, [pc, #68]	; (8011178 <etharp_output_to_arp_index+0x124>)
 8011134:	4613      	mov	r3, r2
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	00db      	lsls	r3, r3, #3
 801113c:	440b      	add	r3, r1
 801113e:	3314      	adds	r3, #20
 8011140:	2203      	movs	r2, #3
 8011142:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801114a:	79fa      	ldrb	r2, [r7, #7]
 801114c:	4613      	mov	r3, r2
 801114e:	005b      	lsls	r3, r3, #1
 8011150:	4413      	add	r3, r2
 8011152:	00db      	lsls	r3, r3, #3
 8011154:	3308      	adds	r3, #8
 8011156:	4a08      	ldr	r2, [pc, #32]	; (8011178 <etharp_output_to_arp_index+0x124>)
 8011158:	4413      	add	r3, r2
 801115a:	3304      	adds	r3, #4
 801115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011160:	9200      	str	r2, [sp, #0]
 8011162:	460a      	mov	r2, r1
 8011164:	68b9      	ldr	r1, [r7, #8]
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f001 fe5e 	bl	8012e28 <ethernet_output>
 801116c:	4603      	mov	r3, r0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	2000c4ac 	.word	0x2000c4ac
 801117c:	08019bf8 	.word	0x08019bf8
 8011180:	08019d68 	.word	0x08019d68
 8011184:	08019c70 	.word	0x08019c70

08011188 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b08a      	sub	sp, #40	; 0x28
 801118c:	af02      	add	r7, sp, #8
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d106      	bne.n	80111ac <etharp_output+0x24>
 801119e:	4b73      	ldr	r3, [pc, #460]	; (801136c <etharp_output+0x1e4>)
 80111a0:	f240 321e 	movw	r2, #798	; 0x31e
 80111a4:	4972      	ldr	r1, [pc, #456]	; (8011370 <etharp_output+0x1e8>)
 80111a6:	4873      	ldr	r0, [pc, #460]	; (8011374 <etharp_output+0x1ec>)
 80111a8:	f002 fe66 	bl	8013e78 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d106      	bne.n	80111c0 <etharp_output+0x38>
 80111b2:	4b6e      	ldr	r3, [pc, #440]	; (801136c <etharp_output+0x1e4>)
 80111b4:	f240 321f 	movw	r2, #799	; 0x31f
 80111b8:	496f      	ldr	r1, [pc, #444]	; (8011378 <etharp_output+0x1f0>)
 80111ba:	486e      	ldr	r0, [pc, #440]	; (8011374 <etharp_output+0x1ec>)
 80111bc:	f002 fe5c 	bl	8013e78 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d106      	bne.n	80111d4 <etharp_output+0x4c>
 80111c6:	4b69      	ldr	r3, [pc, #420]	; (801136c <etharp_output+0x1e4>)
 80111c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80111cc:	496b      	ldr	r1, [pc, #428]	; (801137c <etharp_output+0x1f4>)
 80111ce:	4869      	ldr	r0, [pc, #420]	; (8011374 <etharp_output+0x1ec>)
 80111d0:	f002 fe52 	bl	8013e78 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	68f9      	ldr	r1, [r7, #12]
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 ff16 	bl	801200c <ip4_addr_isbroadcast_u32>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d002      	beq.n	80111ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80111e6:	4b66      	ldr	r3, [pc, #408]	; (8011380 <etharp_output+0x1f8>)
 80111e8:	61fb      	str	r3, [r7, #28]
 80111ea:	e0af      	b.n	801134c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80111f4:	2be0      	cmp	r3, #224	; 0xe0
 80111f6:	d118      	bne.n	801122a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80111f8:	2301      	movs	r3, #1
 80111fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80111fc:	2300      	movs	r3, #0
 80111fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011200:	235e      	movs	r3, #94	; 0x5e
 8011202:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	3301      	adds	r3, #1
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801120e:	b2db      	uxtb	r3, r3
 8011210:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	3302      	adds	r3, #2
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3303      	adds	r3, #3
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011222:	f107 0310 	add.w	r3, r7, #16
 8011226:	61fb      	str	r3, [r7, #28]
 8011228:	e090      	b.n	801134c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	3304      	adds	r3, #4
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	405a      	eors	r2, r3
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	3308      	adds	r3, #8
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4013      	ands	r3, r2
 801123e:	2b00      	cmp	r3, #0
 8011240:	d012      	beq.n	8011268 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011248:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801124c:	4293      	cmp	r3, r2
 801124e:	d00b      	beq.n	8011268 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	330c      	adds	r3, #12
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d003      	beq.n	8011262 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	330c      	adds	r3, #12
 801125e:	61bb      	str	r3, [r7, #24]
 8011260:	e002      	b.n	8011268 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011262:	f06f 0303 	mvn.w	r3, #3
 8011266:	e07d      	b.n	8011364 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011268:	4b46      	ldr	r3, [pc, #280]	; (8011384 <etharp_output+0x1fc>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	4619      	mov	r1, r3
 801126e:	4a46      	ldr	r2, [pc, #280]	; (8011388 <etharp_output+0x200>)
 8011270:	460b      	mov	r3, r1
 8011272:	005b      	lsls	r3, r3, #1
 8011274:	440b      	add	r3, r1
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	4413      	add	r3, r2
 801127a:	3314      	adds	r3, #20
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d925      	bls.n	80112ce <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011282:	4b40      	ldr	r3, [pc, #256]	; (8011384 <etharp_output+0x1fc>)
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	4619      	mov	r1, r3
 8011288:	4a3f      	ldr	r2, [pc, #252]	; (8011388 <etharp_output+0x200>)
 801128a:	460b      	mov	r3, r1
 801128c:	005b      	lsls	r3, r3, #1
 801128e:	440b      	add	r3, r1
 8011290:	00db      	lsls	r3, r3, #3
 8011292:	4413      	add	r3, r2
 8011294:	3308      	adds	r3, #8
 8011296:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	429a      	cmp	r2, r3
 801129c:	d117      	bne.n	80112ce <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	4b38      	ldr	r3, [pc, #224]	; (8011384 <etharp_output+0x1fc>)
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	4618      	mov	r0, r3
 80112a8:	4937      	ldr	r1, [pc, #220]	; (8011388 <etharp_output+0x200>)
 80112aa:	4603      	mov	r3, r0
 80112ac:	005b      	lsls	r3, r3, #1
 80112ae:	4403      	add	r3, r0
 80112b0:	00db      	lsls	r3, r3, #3
 80112b2:	440b      	add	r3, r1
 80112b4:	3304      	adds	r3, #4
 80112b6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d108      	bne.n	80112ce <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80112bc:	4b31      	ldr	r3, [pc, #196]	; (8011384 <etharp_output+0x1fc>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	461a      	mov	r2, r3
 80112c2:	68b9      	ldr	r1, [r7, #8]
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f7ff fec5 	bl	8011054 <etharp_output_to_arp_index>
 80112ca:	4603      	mov	r3, r0
 80112cc:	e04a      	b.n	8011364 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80112ce:	2300      	movs	r3, #0
 80112d0:	75fb      	strb	r3, [r7, #23]
 80112d2:	e031      	b.n	8011338 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80112d4:	7dfa      	ldrb	r2, [r7, #23]
 80112d6:	492c      	ldr	r1, [pc, #176]	; (8011388 <etharp_output+0x200>)
 80112d8:	4613      	mov	r3, r2
 80112da:	005b      	lsls	r3, r3, #1
 80112dc:	4413      	add	r3, r2
 80112de:	00db      	lsls	r3, r3, #3
 80112e0:	440b      	add	r3, r1
 80112e2:	3314      	adds	r3, #20
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d923      	bls.n	8011332 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80112ea:	7dfa      	ldrb	r2, [r7, #23]
 80112ec:	4926      	ldr	r1, [pc, #152]	; (8011388 <etharp_output+0x200>)
 80112ee:	4613      	mov	r3, r2
 80112f0:	005b      	lsls	r3, r3, #1
 80112f2:	4413      	add	r3, r2
 80112f4:	00db      	lsls	r3, r3, #3
 80112f6:	440b      	add	r3, r1
 80112f8:	3308      	adds	r3, #8
 80112fa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d117      	bne.n	8011332 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	6819      	ldr	r1, [r3, #0]
 8011306:	7dfa      	ldrb	r2, [r7, #23]
 8011308:	481f      	ldr	r0, [pc, #124]	; (8011388 <etharp_output+0x200>)
 801130a:	4613      	mov	r3, r2
 801130c:	005b      	lsls	r3, r3, #1
 801130e:	4413      	add	r3, r2
 8011310:	00db      	lsls	r3, r3, #3
 8011312:	4403      	add	r3, r0
 8011314:	3304      	adds	r3, #4
 8011316:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011318:	4299      	cmp	r1, r3
 801131a:	d10a      	bne.n	8011332 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801131c:	4a19      	ldr	r2, [pc, #100]	; (8011384 <etharp_output+0x1fc>)
 801131e:	7dfb      	ldrb	r3, [r7, #23]
 8011320:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011322:	7dfb      	ldrb	r3, [r7, #23]
 8011324:	461a      	mov	r2, r3
 8011326:	68b9      	ldr	r1, [r7, #8]
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f7ff fe93 	bl	8011054 <etharp_output_to_arp_index>
 801132e:	4603      	mov	r3, r0
 8011330:	e018      	b.n	8011364 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011332:	7dfb      	ldrb	r3, [r7, #23]
 8011334:	3301      	adds	r3, #1
 8011336:	75fb      	strb	r3, [r7, #23]
 8011338:	7dfb      	ldrb	r3, [r7, #23]
 801133a:	2b09      	cmp	r3, #9
 801133c:	d9ca      	bls.n	80112d4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801133e:	68ba      	ldr	r2, [r7, #8]
 8011340:	69b9      	ldr	r1, [r7, #24]
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f000 f822 	bl	801138c <etharp_query>
 8011348:	4603      	mov	r3, r0
 801134a:	e00b      	b.n	8011364 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	68b9      	ldr	r1, [r7, #8]
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f001 fd63 	bl	8012e28 <ethernet_output>
 8011362:	4603      	mov	r3, r0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3720      	adds	r7, #32
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	08019bf8 	.word	0x08019bf8
 8011370:	08019d48 	.word	0x08019d48
 8011374:	08019c70 	.word	0x08019c70
 8011378:	08019d98 	.word	0x08019d98
 801137c:	08019d38 	.word	0x08019d38
 8011380:	0801a40c 	.word	0x0801a40c
 8011384:	2000c59c 	.word	0x2000c59c
 8011388:	2000c4ac 	.word	0x2000c4ac

0801138c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b08c      	sub	sp, #48	; 0x30
 8011390:	af02      	add	r7, sp, #8
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	332a      	adds	r3, #42	; 0x2a
 801139c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801139e:	23ff      	movs	r3, #255	; 0xff
 80113a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80113a4:	2300      	movs	r3, #0
 80113a6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	68f9      	ldr	r1, [r7, #12]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 fe2c 	bl	801200c <ip4_addr_isbroadcast_u32>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d10c      	bne.n	80113d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80113c2:	2be0      	cmp	r3, #224	; 0xe0
 80113c4:	d006      	beq.n	80113d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d003      	beq.n	80113d4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d102      	bne.n	80113da <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80113d4:	f06f 030f 	mvn.w	r3, #15
 80113d8:	e101      	b.n	80115de <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	2101      	movs	r1, #1
 80113de:	68b8      	ldr	r0, [r7, #8]
 80113e0:	f7ff fb5c 	bl	8010a9c <etharp_find_entry>
 80113e4:	4603      	mov	r3, r0
 80113e6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80113e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	da02      	bge.n	80113f6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80113f0:	8a7b      	ldrh	r3, [r7, #18]
 80113f2:	b25b      	sxtb	r3, r3
 80113f4:	e0f3      	b.n	80115de <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80113f6:	8a7b      	ldrh	r3, [r7, #18]
 80113f8:	2b7e      	cmp	r3, #126	; 0x7e
 80113fa:	d906      	bls.n	801140a <etharp_query+0x7e>
 80113fc:	4b7a      	ldr	r3, [pc, #488]	; (80115e8 <etharp_query+0x25c>)
 80113fe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011402:	497a      	ldr	r1, [pc, #488]	; (80115ec <etharp_query+0x260>)
 8011404:	487a      	ldr	r0, [pc, #488]	; (80115f0 <etharp_query+0x264>)
 8011406:	f002 fd37 	bl	8013e78 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801140a:	8a7b      	ldrh	r3, [r7, #18]
 801140c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801140e:	7c7a      	ldrb	r2, [r7, #17]
 8011410:	4978      	ldr	r1, [pc, #480]	; (80115f4 <etharp_query+0x268>)
 8011412:	4613      	mov	r3, r2
 8011414:	005b      	lsls	r3, r3, #1
 8011416:	4413      	add	r3, r2
 8011418:	00db      	lsls	r3, r3, #3
 801141a:	440b      	add	r3, r1
 801141c:	3314      	adds	r3, #20
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d115      	bne.n	8011450 <etharp_query+0xc4>
    is_new_entry = 1;
 8011424:	2301      	movs	r3, #1
 8011426:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011428:	7c7a      	ldrb	r2, [r7, #17]
 801142a:	4972      	ldr	r1, [pc, #456]	; (80115f4 <etharp_query+0x268>)
 801142c:	4613      	mov	r3, r2
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	4413      	add	r3, r2
 8011432:	00db      	lsls	r3, r3, #3
 8011434:	440b      	add	r3, r1
 8011436:	3314      	adds	r3, #20
 8011438:	2201      	movs	r2, #1
 801143a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801143c:	7c7a      	ldrb	r2, [r7, #17]
 801143e:	496d      	ldr	r1, [pc, #436]	; (80115f4 <etharp_query+0x268>)
 8011440:	4613      	mov	r3, r2
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	4413      	add	r3, r2
 8011446:	00db      	lsls	r3, r3, #3
 8011448:	440b      	add	r3, r1
 801144a:	3308      	adds	r3, #8
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011450:	7c7a      	ldrb	r2, [r7, #17]
 8011452:	4968      	ldr	r1, [pc, #416]	; (80115f4 <etharp_query+0x268>)
 8011454:	4613      	mov	r3, r2
 8011456:	005b      	lsls	r3, r3, #1
 8011458:	4413      	add	r3, r2
 801145a:	00db      	lsls	r3, r3, #3
 801145c:	440b      	add	r3, r1
 801145e:	3314      	adds	r3, #20
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2b01      	cmp	r3, #1
 8011464:	d011      	beq.n	801148a <etharp_query+0xfe>
 8011466:	7c7a      	ldrb	r2, [r7, #17]
 8011468:	4962      	ldr	r1, [pc, #392]	; (80115f4 <etharp_query+0x268>)
 801146a:	4613      	mov	r3, r2
 801146c:	005b      	lsls	r3, r3, #1
 801146e:	4413      	add	r3, r2
 8011470:	00db      	lsls	r3, r3, #3
 8011472:	440b      	add	r3, r1
 8011474:	3314      	adds	r3, #20
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	2b01      	cmp	r3, #1
 801147a:	d806      	bhi.n	801148a <etharp_query+0xfe>
 801147c:	4b5a      	ldr	r3, [pc, #360]	; (80115e8 <etharp_query+0x25c>)
 801147e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011482:	495d      	ldr	r1, [pc, #372]	; (80115f8 <etharp_query+0x26c>)
 8011484:	485a      	ldr	r0, [pc, #360]	; (80115f0 <etharp_query+0x264>)
 8011486:	f002 fcf7 	bl	8013e78 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801148a:	6a3b      	ldr	r3, [r7, #32]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <etharp_query+0x10a>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10c      	bne.n	80114b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011496:	68b9      	ldr	r1, [r7, #8]
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f000 f963 	bl	8011764 <etharp_request>
 801149e:	4603      	mov	r3, r0
 80114a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <etharp_query+0x124>
      return result;
 80114aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80114ae:	e096      	b.n	80115de <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d106      	bne.n	80114c4 <etharp_query+0x138>
 80114b6:	4b4c      	ldr	r3, [pc, #304]	; (80115e8 <etharp_query+0x25c>)
 80114b8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80114bc:	494f      	ldr	r1, [pc, #316]	; (80115fc <etharp_query+0x270>)
 80114be:	484c      	ldr	r0, [pc, #304]	; (80115f0 <etharp_query+0x264>)
 80114c0:	f002 fcda 	bl	8013e78 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80114c4:	7c7a      	ldrb	r2, [r7, #17]
 80114c6:	494b      	ldr	r1, [pc, #300]	; (80115f4 <etharp_query+0x268>)
 80114c8:	4613      	mov	r3, r2
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	4413      	add	r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	440b      	add	r3, r1
 80114d2:	3314      	adds	r3, #20
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d917      	bls.n	801150a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80114da:	4a49      	ldr	r2, [pc, #292]	; (8011600 <etharp_query+0x274>)
 80114dc:	7c7b      	ldrb	r3, [r7, #17]
 80114de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80114e0:	7c7a      	ldrb	r2, [r7, #17]
 80114e2:	4613      	mov	r3, r2
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4413      	add	r3, r2
 80114e8:	00db      	lsls	r3, r3, #3
 80114ea:	3308      	adds	r3, #8
 80114ec:	4a41      	ldr	r2, [pc, #260]	; (80115f4 <etharp_query+0x268>)
 80114ee:	4413      	add	r3, r2
 80114f0:	3304      	adds	r3, #4
 80114f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114f6:	9200      	str	r2, [sp, #0]
 80114f8:	697a      	ldr	r2, [r7, #20]
 80114fa:	6879      	ldr	r1, [r7, #4]
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f001 fc93 	bl	8012e28 <ethernet_output>
 8011502:	4603      	mov	r3, r0
 8011504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011508:	e067      	b.n	80115da <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801150a:	7c7a      	ldrb	r2, [r7, #17]
 801150c:	4939      	ldr	r1, [pc, #228]	; (80115f4 <etharp_query+0x268>)
 801150e:	4613      	mov	r3, r2
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	4413      	add	r3, r2
 8011514:	00db      	lsls	r3, r3, #3
 8011516:	440b      	add	r3, r1
 8011518:	3314      	adds	r3, #20
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	2b01      	cmp	r3, #1
 801151e:	d15c      	bne.n	80115da <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011520:	2300      	movs	r3, #0
 8011522:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011528:	e01c      	b.n	8011564 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	895a      	ldrh	r2, [r3, #10]
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	891b      	ldrh	r3, [r3, #8]
 8011532:	429a      	cmp	r2, r3
 8011534:	d10a      	bne.n	801154c <etharp_query+0x1c0>
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d006      	beq.n	801154c <etharp_query+0x1c0>
 801153e:	4b2a      	ldr	r3, [pc, #168]	; (80115e8 <etharp_query+0x25c>)
 8011540:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011544:	492f      	ldr	r1, [pc, #188]	; (8011604 <etharp_query+0x278>)
 8011546:	482a      	ldr	r0, [pc, #168]	; (80115f0 <etharp_query+0x264>)
 8011548:	f002 fc96 	bl	8013e78 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	7b1b      	ldrb	r3, [r3, #12]
 8011550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <etharp_query+0x1d2>
        copy_needed = 1;
 8011558:	2301      	movs	r3, #1
 801155a:	61bb      	str	r3, [r7, #24]
        break;
 801155c:	e005      	b.n	801156a <etharp_query+0x1de>
      }
      p = p->next;
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1df      	bne.n	801152a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d007      	beq.n	8011580 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011576:	200e      	movs	r0, #14
 8011578:	f7f7 fb60 	bl	8008c3c <pbuf_clone>
 801157c:	61f8      	str	r0, [r7, #28]
 801157e:	e004      	b.n	801158a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011584:	69f8      	ldr	r0, [r7, #28]
 8011586:	f7f7 f987 	bl	8008898 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d021      	beq.n	80115d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011590:	7c7a      	ldrb	r2, [r7, #17]
 8011592:	4918      	ldr	r1, [pc, #96]	; (80115f4 <etharp_query+0x268>)
 8011594:	4613      	mov	r3, r2
 8011596:	005b      	lsls	r3, r3, #1
 8011598:	4413      	add	r3, r2
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	440b      	add	r3, r1
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d00a      	beq.n	80115ba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80115a4:	7c7a      	ldrb	r2, [r7, #17]
 80115a6:	4913      	ldr	r1, [pc, #76]	; (80115f4 <etharp_query+0x268>)
 80115a8:	4613      	mov	r3, r2
 80115aa:	005b      	lsls	r3, r3, #1
 80115ac:	4413      	add	r3, r2
 80115ae:	00db      	lsls	r3, r3, #3
 80115b0:	440b      	add	r3, r1
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7f7 f8c9 	bl	800874c <pbuf_free>
      }
      arp_table[i].q = p;
 80115ba:	7c7a      	ldrb	r2, [r7, #17]
 80115bc:	490d      	ldr	r1, [pc, #52]	; (80115f4 <etharp_query+0x268>)
 80115be:	4613      	mov	r3, r2
 80115c0:	005b      	lsls	r3, r3, #1
 80115c2:	4413      	add	r3, r2
 80115c4:	00db      	lsls	r3, r3, #3
 80115c6:	440b      	add	r3, r1
 80115c8:	69fa      	ldr	r2, [r7, #28]
 80115ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80115d2:	e002      	b.n	80115da <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80115d4:	23ff      	movs	r3, #255	; 0xff
 80115d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80115da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3728      	adds	r7, #40	; 0x28
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	08019bf8 	.word	0x08019bf8
 80115ec:	08019da4 	.word	0x08019da4
 80115f0:	08019c70 	.word	0x08019c70
 80115f4:	2000c4ac 	.word	0x2000c4ac
 80115f8:	08019db4 	.word	0x08019db4
 80115fc:	08019d98 	.word	0x08019d98
 8011600:	2000c59c 	.word	0x2000c59c
 8011604:	08019ddc 	.word	0x08019ddc

08011608 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b08a      	sub	sp, #40	; 0x28
 801160c:	af02      	add	r7, sp, #8
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	607a      	str	r2, [r7, #4]
 8011614:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011616:	2300      	movs	r3, #0
 8011618:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d106      	bne.n	801162e <etharp_raw+0x26>
 8011620:	4b3a      	ldr	r3, [pc, #232]	; (801170c <etharp_raw+0x104>)
 8011622:	f240 4257 	movw	r2, #1111	; 0x457
 8011626:	493a      	ldr	r1, [pc, #232]	; (8011710 <etharp_raw+0x108>)
 8011628:	483a      	ldr	r0, [pc, #232]	; (8011714 <etharp_raw+0x10c>)
 801162a:	f002 fc25 	bl	8013e78 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801162e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011632:	211c      	movs	r1, #28
 8011634:	200e      	movs	r0, #14
 8011636:	f7f6 fda5 	bl	8008184 <pbuf_alloc>
 801163a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801163c:	69bb      	ldr	r3, [r7, #24]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d102      	bne.n	8011648 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011642:	f04f 33ff 	mov.w	r3, #4294967295
 8011646:	e05d      	b.n	8011704 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011648:	69bb      	ldr	r3, [r7, #24]
 801164a:	895b      	ldrh	r3, [r3, #10]
 801164c:	2b1b      	cmp	r3, #27
 801164e:	d806      	bhi.n	801165e <etharp_raw+0x56>
 8011650:	4b2e      	ldr	r3, [pc, #184]	; (801170c <etharp_raw+0x104>)
 8011652:	f240 4262 	movw	r2, #1122	; 0x462
 8011656:	4930      	ldr	r1, [pc, #192]	; (8011718 <etharp_raw+0x110>)
 8011658:	482e      	ldr	r0, [pc, #184]	; (8011714 <etharp_raw+0x10c>)
 801165a:	f002 fc0d 	bl	8013e78 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011664:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011666:	4618      	mov	r0, r3
 8011668:	f7f5 fc72 	bl	8006f50 <lwip_htons>
 801166c:	4603      	mov	r3, r0
 801166e:	461a      	mov	r2, r3
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801167a:	2b06      	cmp	r3, #6
 801167c:	d006      	beq.n	801168c <etharp_raw+0x84>
 801167e:	4b23      	ldr	r3, [pc, #140]	; (801170c <etharp_raw+0x104>)
 8011680:	f240 4269 	movw	r2, #1129	; 0x469
 8011684:	4925      	ldr	r1, [pc, #148]	; (801171c <etharp_raw+0x114>)
 8011686:	4823      	ldr	r0, [pc, #140]	; (8011714 <etharp_raw+0x10c>)
 8011688:	f002 fbf6 	bl	8013e78 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	3308      	adds	r3, #8
 8011690:	2206      	movs	r2, #6
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	4618      	mov	r0, r3
 8011696:	f002 fcda 	bl	801404e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	3312      	adds	r3, #18
 801169e:	2206      	movs	r2, #6
 80116a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116a2:	4618      	mov	r0, r3
 80116a4:	f002 fcd3 	bl	801404e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	330e      	adds	r3, #14
 80116ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116ae:	6812      	ldr	r2, [r2, #0]
 80116b0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	3318      	adds	r3, #24
 80116b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116b8:	6812      	ldr	r2, [r2, #0]
 80116ba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	2200      	movs	r2, #0
 80116c0:	701a      	strb	r2, [r3, #0]
 80116c2:	2200      	movs	r2, #0
 80116c4:	f042 0201 	orr.w	r2, r2, #1
 80116c8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f042 0208 	orr.w	r2, r2, #8
 80116d2:	709a      	strb	r2, [r3, #2]
 80116d4:	2200      	movs	r2, #0
 80116d6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2206      	movs	r2, #6
 80116dc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2204      	movs	r2, #4
 80116e2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80116e4:	f640 0306 	movw	r3, #2054	; 0x806
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	69b9      	ldr	r1, [r7, #24]
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f001 fb99 	bl	8012e28 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80116f6:	69b8      	ldr	r0, [r7, #24]
 80116f8:	f7f7 f828 	bl	800874c <pbuf_free>
  p = NULL;
 80116fc:	2300      	movs	r3, #0
 80116fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011700:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3720      	adds	r7, #32
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	08019bf8 	.word	0x08019bf8
 8011710:	08019d48 	.word	0x08019d48
 8011714:	08019c70 	.word	0x08019c70
 8011718:	08019df8 	.word	0x08019df8
 801171c:	08019e2c 	.word	0x08019e2c

08011720 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b088      	sub	sp, #32
 8011724:	af04      	add	r7, sp, #16
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801173c:	2201      	movs	r2, #1
 801173e:	9203      	str	r2, [sp, #12]
 8011740:	68ba      	ldr	r2, [r7, #8]
 8011742:	9202      	str	r2, [sp, #8]
 8011744:	4a06      	ldr	r2, [pc, #24]	; (8011760 <etharp_request_dst+0x40>)
 8011746:	9201      	str	r2, [sp, #4]
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	4603      	mov	r3, r0
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f7ff ff5a 	bl	8011608 <etharp_raw>
 8011754:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011756:	4618      	mov	r0, r3
 8011758:	3710      	adds	r7, #16
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	0801a414 	.word	0x0801a414

08011764 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801176e:	4a05      	ldr	r2, [pc, #20]	; (8011784 <etharp_request+0x20>)
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7ff ffd4 	bl	8011720 <etharp_request_dst>
 8011778:	4603      	mov	r3, r0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3708      	adds	r7, #8
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	0801a40c 	.word	0x0801a40c

08011788 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b08e      	sub	sp, #56	; 0x38
 801178c:	af04      	add	r7, sp, #16
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011792:	4b79      	ldr	r3, [pc, #484]	; (8011978 <icmp_input+0x1f0>)
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	f003 030f 	and.w	r3, r3, #15
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80117a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117aa:	2b13      	cmp	r3, #19
 80117ac:	f240 80cd 	bls.w	801194a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	895b      	ldrh	r3, [r3, #10]
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	f240 80ca 	bls.w	801194e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80117c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 80b7 	beq.w	801193c <icmp_input+0x1b4>
 80117ce:	2b08      	cmp	r3, #8
 80117d0:	f040 80b7 	bne.w	8011942 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80117d4:	4b69      	ldr	r3, [pc, #420]	; (801197c <icmp_input+0x1f4>)
 80117d6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117d8:	4b67      	ldr	r3, [pc, #412]	; (8011978 <icmp_input+0x1f0>)
 80117da:	695b      	ldr	r3, [r3, #20]
 80117dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117e0:	2be0      	cmp	r3, #224	; 0xe0
 80117e2:	f000 80bb 	beq.w	801195c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80117e6:	4b64      	ldr	r3, [pc, #400]	; (8011978 <icmp_input+0x1f0>)
 80117e8:	695b      	ldr	r3, [r3, #20]
 80117ea:	4a63      	ldr	r2, [pc, #396]	; (8011978 <icmp_input+0x1f0>)
 80117ec:	6812      	ldr	r2, [r2, #0]
 80117ee:	4611      	mov	r1, r2
 80117f0:	4618      	mov	r0, r3
 80117f2:	f000 fc0b 	bl	801200c <ip4_addr_isbroadcast_u32>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f040 80b1 	bne.w	8011960 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	891b      	ldrh	r3, [r3, #8]
 8011802:	2b07      	cmp	r3, #7
 8011804:	f240 80a5 	bls.w	8011952 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801180a:	330e      	adds	r3, #14
 801180c:	4619      	mov	r1, r3
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7f6 ff06 	bl	8008620 <pbuf_add_header>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d04b      	beq.n	80118b2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	891a      	ldrh	r2, [r3, #8]
 801181e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011820:	4413      	add	r3, r2
 8011822:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	891b      	ldrh	r3, [r3, #8]
 8011828:	8b7a      	ldrh	r2, [r7, #26]
 801182a:	429a      	cmp	r2, r3
 801182c:	f0c0 809a 	bcc.w	8011964 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011830:	8b7b      	ldrh	r3, [r7, #26]
 8011832:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011836:	4619      	mov	r1, r3
 8011838:	200e      	movs	r0, #14
 801183a:	f7f6 fca3 	bl	8008184 <pbuf_alloc>
 801183e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f000 8090 	beq.w	8011968 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	895b      	ldrh	r3, [r3, #10]
 801184c:	461a      	mov	r2, r3
 801184e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011850:	3308      	adds	r3, #8
 8011852:	429a      	cmp	r2, r3
 8011854:	d203      	bcs.n	801185e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011856:	6978      	ldr	r0, [r7, #20]
 8011858:	f7f6 ff78 	bl	800874c <pbuf_free>
          goto icmperr;
 801185c:	e085      	b.n	801196a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011866:	4618      	mov	r0, r3
 8011868:	f002 fbf1 	bl	801404e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801186c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801186e:	4619      	mov	r1, r3
 8011870:	6978      	ldr	r0, [r7, #20]
 8011872:	f7f6 fee5 	bl	8008640 <pbuf_remove_header>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d009      	beq.n	8011890 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801187c:	4b40      	ldr	r3, [pc, #256]	; (8011980 <icmp_input+0x1f8>)
 801187e:	22b6      	movs	r2, #182	; 0xb6
 8011880:	4940      	ldr	r1, [pc, #256]	; (8011984 <icmp_input+0x1fc>)
 8011882:	4841      	ldr	r0, [pc, #260]	; (8011988 <icmp_input+0x200>)
 8011884:	f002 faf8 	bl	8013e78 <iprintf>
          pbuf_free(r);
 8011888:	6978      	ldr	r0, [r7, #20]
 801188a:	f7f6 ff5f 	bl	800874c <pbuf_free>
          goto icmperr;
 801188e:	e06c      	b.n	801196a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011890:	6879      	ldr	r1, [r7, #4]
 8011892:	6978      	ldr	r0, [r7, #20]
 8011894:	f7f7 f88e 	bl	80089b4 <pbuf_copy>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d003      	beq.n	80118a6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801189e:	6978      	ldr	r0, [r7, #20]
 80118a0:	f7f6 ff54 	bl	800874c <pbuf_free>
          goto icmperr;
 80118a4:	e061      	b.n	801196a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7f6 ff50 	bl	800874c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	607b      	str	r3, [r7, #4]
 80118b0:	e00f      	b.n	80118d2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80118b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118b4:	330e      	adds	r3, #14
 80118b6:	4619      	mov	r1, r3
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7f6 fec1 	bl	8008640 <pbuf_remove_header>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d006      	beq.n	80118d2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80118c4:	4b2e      	ldr	r3, [pc, #184]	; (8011980 <icmp_input+0x1f8>)
 80118c6:	22c7      	movs	r2, #199	; 0xc7
 80118c8:	4930      	ldr	r1, [pc, #192]	; (801198c <icmp_input+0x204>)
 80118ca:	482f      	ldr	r0, [pc, #188]	; (8011988 <icmp_input+0x200>)
 80118cc:	f002 fad4 	bl	8013e78 <iprintf>
          goto icmperr;
 80118d0:	e04b      	b.n	801196a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80118d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118da:	4619      	mov	r1, r3
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7f6 fe9f 	bl	8008620 <pbuf_add_header>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d12b      	bne.n	8011940 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	685b      	ldr	r3, [r3, #4]
 80118ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80118f6:	4b20      	ldr	r3, [pc, #128]	; (8011978 <icmp_input+0x1f0>)
 80118f8:	691a      	ldr	r2, [r3, #16]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	2200      	movs	r2, #0
 8011902:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	2200      	movs	r2, #0
 8011908:	709a      	strb	r2, [r3, #2]
 801190a:	2200      	movs	r2, #0
 801190c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	22ff      	movs	r2, #255	; 0xff
 8011912:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2200      	movs	r2, #0
 8011918:	729a      	strb	r2, [r3, #10]
 801191a:	2200      	movs	r2, #0
 801191c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	9302      	str	r3, [sp, #8]
 8011922:	2301      	movs	r3, #1
 8011924:	9301      	str	r3, [sp, #4]
 8011926:	2300      	movs	r3, #0
 8011928:	9300      	str	r3, [sp, #0]
 801192a:	23ff      	movs	r3, #255	; 0xff
 801192c:	2200      	movs	r2, #0
 801192e:	69f9      	ldr	r1, [r7, #28]
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f000 fa93 	bl	8011e5c <ip4_output_if>
 8011936:	4603      	mov	r3, r0
 8011938:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801193a:	e001      	b.n	8011940 <icmp_input+0x1b8>
      break;
 801193c:	bf00      	nop
 801193e:	e000      	b.n	8011942 <icmp_input+0x1ba>
      break;
 8011940:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7f6 ff02 	bl	800874c <pbuf_free>
  return;
 8011948:	e013      	b.n	8011972 <icmp_input+0x1ea>
    goto lenerr;
 801194a:	bf00      	nop
 801194c:	e002      	b.n	8011954 <icmp_input+0x1cc>
    goto lenerr;
 801194e:	bf00      	nop
 8011950:	e000      	b.n	8011954 <icmp_input+0x1cc>
        goto lenerr;
 8011952:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7f6 fef9 	bl	800874c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801195a:	e00a      	b.n	8011972 <icmp_input+0x1ea>
        goto icmperr;
 801195c:	bf00      	nop
 801195e:	e004      	b.n	801196a <icmp_input+0x1e2>
        goto icmperr;
 8011960:	bf00      	nop
 8011962:	e002      	b.n	801196a <icmp_input+0x1e2>
          goto icmperr;
 8011964:	bf00      	nop
 8011966:	e000      	b.n	801196a <icmp_input+0x1e2>
          goto icmperr;
 8011968:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7f6 feee 	bl	800874c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011970:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011972:	3728      	adds	r7, #40	; 0x28
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}
 8011978:	20008ca4 	.word	0x20008ca4
 801197c:	20008cb8 	.word	0x20008cb8
 8011980:	08019e70 	.word	0x08019e70
 8011984:	08019ea8 	.word	0x08019ea8
 8011988:	08019ee0 	.word	0x08019ee0
 801198c:	08019f08 	.word	0x08019f08

08011990 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	460b      	mov	r3, r1
 801199a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801199c:	78fb      	ldrb	r3, [r7, #3]
 801199e:	461a      	mov	r2, r3
 80119a0:	2103      	movs	r1, #3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 f814 	bl	80119d0 <icmp_send_response>
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	460b      	mov	r3, r1
 80119ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80119bc:	78fb      	ldrb	r3, [r7, #3]
 80119be:	461a      	mov	r2, r3
 80119c0:	210b      	movs	r1, #11
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f804 	bl	80119d0 <icmp_send_response>
}
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08c      	sub	sp, #48	; 0x30
 80119d4:	af04      	add	r7, sp, #16
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	460b      	mov	r3, r1
 80119da:	70fb      	strb	r3, [r7, #3]
 80119dc:	4613      	mov	r3, r2
 80119de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80119e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119e4:	2124      	movs	r1, #36	; 0x24
 80119e6:	2022      	movs	r0, #34	; 0x22
 80119e8:	f7f6 fbcc 	bl	8008184 <pbuf_alloc>
 80119ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d04c      	beq.n	8011a8e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	895b      	ldrh	r3, [r3, #10]
 80119f8:	2b23      	cmp	r3, #35	; 0x23
 80119fa:	d806      	bhi.n	8011a0a <icmp_send_response+0x3a>
 80119fc:	4b26      	ldr	r3, [pc, #152]	; (8011a98 <icmp_send_response+0xc8>)
 80119fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011a02:	4926      	ldr	r1, [pc, #152]	; (8011a9c <icmp_send_response+0xcc>)
 8011a04:	4826      	ldr	r0, [pc, #152]	; (8011aa0 <icmp_send_response+0xd0>)
 8011a06:	f002 fa37 	bl	8013e78 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011a10:	69fb      	ldr	r3, [r7, #28]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	78fa      	ldrb	r2, [r7, #3]
 8011a1a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	78ba      	ldrb	r2, [r7, #2]
 8011a20:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2200      	movs	r2, #0
 8011a26:	711a      	strb	r2, [r3, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	719a      	strb	r2, [r3, #6]
 8011a32:	2200      	movs	r2, #0
 8011a34:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	f103 0008 	add.w	r0, r3, #8
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	221c      	movs	r2, #28
 8011a44:	4619      	mov	r1, r3
 8011a46:	f002 fb02 	bl	801404e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011a50:	f107 030c 	add.w	r3, r7, #12
 8011a54:	4618      	mov	r0, r3
 8011a56:	f000 f825 	bl	8011aa4 <ip4_route>
 8011a5a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d011      	beq.n	8011a86 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	2200      	movs	r2, #0
 8011a66:	709a      	strb	r2, [r3, #2]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011a6c:	f107 020c 	add.w	r2, r7, #12
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	9302      	str	r3, [sp, #8]
 8011a74:	2301      	movs	r3, #1
 8011a76:	9301      	str	r3, [sp, #4]
 8011a78:	2300      	movs	r3, #0
 8011a7a:	9300      	str	r3, [sp, #0]
 8011a7c:	23ff      	movs	r3, #255	; 0xff
 8011a7e:	2100      	movs	r1, #0
 8011a80:	69f8      	ldr	r0, [r7, #28]
 8011a82:	f000 f9eb 	bl	8011e5c <ip4_output_if>
  }
  pbuf_free(q);
 8011a86:	69f8      	ldr	r0, [r7, #28]
 8011a88:	f7f6 fe60 	bl	800874c <pbuf_free>
 8011a8c:	e000      	b.n	8011a90 <icmp_send_response+0xc0>
    return;
 8011a8e:	bf00      	nop
}
 8011a90:	3720      	adds	r7, #32
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	bf00      	nop
 8011a98:	08019e70 	.word	0x08019e70
 8011a9c:	08019f3c 	.word	0x08019f3c
 8011aa0:	08019ee0 	.word	0x08019ee0

08011aa4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b085      	sub	sp, #20
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011aac:	4b33      	ldr	r3, [pc, #204]	; (8011b7c <ip4_route+0xd8>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	60fb      	str	r3, [r7, #12]
 8011ab2:	e036      	b.n	8011b22 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011aba:	f003 0301 	and.w	r3, r3, #1
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d02b      	beq.n	8011b1c <ip4_route+0x78>
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011aca:	089b      	lsrs	r3, r3, #2
 8011acc:	f003 0301 	and.w	r3, r3, #1
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d022      	beq.n	8011b1c <ip4_route+0x78>
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	3304      	adds	r3, #4
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d01d      	beq.n	8011b1c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	405a      	eors	r2, r3
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	3308      	adds	r3, #8
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	4013      	ands	r3, r2
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d101      	bne.n	8011afc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	e038      	b.n	8011b6e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b02:	f003 0302 	and.w	r3, r3, #2
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d108      	bne.n	8011b1c <ip4_route+0x78>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	330c      	adds	r3, #12
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d101      	bne.n	8011b1c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	e028      	b.n	8011b6e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	60fb      	str	r3, [r7, #12]
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1c5      	bne.n	8011ab4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011b28:	4b15      	ldr	r3, [pc, #84]	; (8011b80 <ip4_route+0xdc>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01a      	beq.n	8011b66 <ip4_route+0xc2>
 8011b30:	4b13      	ldr	r3, [pc, #76]	; (8011b80 <ip4_route+0xdc>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b38:	f003 0301 	and.w	r3, r3, #1
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d012      	beq.n	8011b66 <ip4_route+0xc2>
 8011b40:	4b0f      	ldr	r3, [pc, #60]	; (8011b80 <ip4_route+0xdc>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b48:	f003 0304 	and.w	r3, r3, #4
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d00a      	beq.n	8011b66 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011b50:	4b0b      	ldr	r3, [pc, #44]	; (8011b80 <ip4_route+0xdc>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	3304      	adds	r3, #4
 8011b56:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d004      	beq.n	8011b66 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	2b7f      	cmp	r3, #127	; 0x7f
 8011b64:	d101      	bne.n	8011b6a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011b66:	2300      	movs	r3, #0
 8011b68:	e001      	b.n	8011b6e <ip4_route+0xca>
  }

  return netif_default;
 8011b6a:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <ip4_route+0xdc>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop
 8011b7c:	2000c40c 	.word	0x2000c40c
 8011b80:	2000c410 	.word	0x2000c410

08011b84 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b92:	f003 0301 	and.w	r3, r3, #1
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d016      	beq.n	8011bca <ip4_input_accept+0x46>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d011      	beq.n	8011bca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ba6:	4b0b      	ldr	r3, [pc, #44]	; (8011bd4 <ip4_input_accept+0x50>)
 8011ba8:	695a      	ldr	r2, [r3, #20]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	3304      	adds	r3, #4
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d008      	beq.n	8011bc6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011bb4:	4b07      	ldr	r3, [pc, #28]	; (8011bd4 <ip4_input_accept+0x50>)
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	6879      	ldr	r1, [r7, #4]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f000 fa26 	bl	801200c <ip4_addr_isbroadcast_u32>
 8011bc0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d001      	beq.n	8011bca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e000      	b.n	8011bcc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	20008ca4 	.word	0x20008ca4

08011bd8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b088      	sub	sp, #32
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011be2:	2301      	movs	r3, #1
 8011be4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	091b      	lsrs	r3, r3, #4
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b04      	cmp	r3, #4
 8011bf6:	d004      	beq.n	8011c02 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f7f6 fda7 	bl	800874c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	e123      	b.n	8011e4a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	f003 030f 	and.w	r3, r3, #15
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	885b      	ldrh	r3, [r3, #2]
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7f5 f999 	bl	8006f50 <lwip_htons>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	891b      	ldrh	r3, [r3, #8]
 8011c26:	8a3a      	ldrh	r2, [r7, #16]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d204      	bcs.n	8011c36 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011c2c:	8a3b      	ldrh	r3, [r7, #16]
 8011c2e:	4619      	mov	r1, r3
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7f6 fc05 	bl	8008440 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	895b      	ldrh	r3, [r3, #10]
 8011c3a:	8a7a      	ldrh	r2, [r7, #18]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d807      	bhi.n	8011c50 <ip4_input+0x78>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	891b      	ldrh	r3, [r3, #8]
 8011c44:	8a3a      	ldrh	r2, [r7, #16]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d802      	bhi.n	8011c50 <ip4_input+0x78>
 8011c4a:	8a7b      	ldrh	r3, [r7, #18]
 8011c4c:	2b13      	cmp	r3, #19
 8011c4e:	d804      	bhi.n	8011c5a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f7f6 fd7b 	bl	800874c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011c56:	2300      	movs	r3, #0
 8011c58:	e0f7      	b.n	8011e4a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011c5a:	69fb      	ldr	r3, [r7, #28]
 8011c5c:	691b      	ldr	r3, [r3, #16]
 8011c5e:	4a7d      	ldr	r2, [pc, #500]	; (8011e54 <ip4_input+0x27c>)
 8011c60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	68db      	ldr	r3, [r3, #12]
 8011c66:	4a7b      	ldr	r2, [pc, #492]	; (8011e54 <ip4_input+0x27c>)
 8011c68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c6a:	4b7a      	ldr	r3, [pc, #488]	; (8011e54 <ip4_input+0x27c>)
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c72:	2be0      	cmp	r3, #224	; 0xe0
 8011c74:	d112      	bne.n	8011c9c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011c7c:	f003 0301 	and.w	r3, r3, #1
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d007      	beq.n	8011c96 <ip4_input+0xbe>
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	3304      	adds	r3, #4
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <ip4_input+0xbe>
      netif = inp;
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	61bb      	str	r3, [r7, #24]
 8011c94:	e02a      	b.n	8011cec <ip4_input+0x114>
    } else {
      netif = NULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	61bb      	str	r3, [r7, #24]
 8011c9a:	e027      	b.n	8011cec <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011c9c:	6838      	ldr	r0, [r7, #0]
 8011c9e:	f7ff ff71 	bl	8011b84 <ip4_input_accept>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d002      	beq.n	8011cae <ip4_input+0xd6>
      netif = inp;
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	61bb      	str	r3, [r7, #24]
 8011cac:	e01e      	b.n	8011cec <ip4_input+0x114>
    } else {
      netif = NULL;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011cb2:	4b68      	ldr	r3, [pc, #416]	; (8011e54 <ip4_input+0x27c>)
 8011cb4:	695b      	ldr	r3, [r3, #20]
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8011cba:	d017      	beq.n	8011cec <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011cbc:	4b66      	ldr	r3, [pc, #408]	; (8011e58 <ip4_input+0x280>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	61bb      	str	r3, [r7, #24]
 8011cc2:	e00e      	b.n	8011ce2 <ip4_input+0x10a>
          if (netif == inp) {
 8011cc4:	69ba      	ldr	r2, [r7, #24]
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d006      	beq.n	8011cda <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011ccc:	69b8      	ldr	r0, [r7, #24]
 8011cce:	f7ff ff59 	bl	8011b84 <ip4_input_accept>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d108      	bne.n	8011cea <ip4_input+0x112>
 8011cd8:	e000      	b.n	8011cdc <ip4_input+0x104>
            continue;
 8011cda:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	61bb      	str	r3, [r7, #24]
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d1ed      	bne.n	8011cc4 <ip4_input+0xec>
 8011ce8:	e000      	b.n	8011cec <ip4_input+0x114>
            break;
 8011cea:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d111      	bne.n	8011d16 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	7a5b      	ldrb	r3, [r3, #9]
 8011cf6:	2b11      	cmp	r3, #17
 8011cf8:	d10d      	bne.n	8011d16 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011cfa:	8a7b      	ldrh	r3, [r7, #18]
 8011cfc:	69fa      	ldr	r2, [r7, #28]
 8011cfe:	4413      	add	r3, r2
 8011d00:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	885b      	ldrh	r3, [r3, #2]
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011d0c:	d103      	bne.n	8011d16 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d017      	beq.n	8011d4c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011d1c:	4b4d      	ldr	r3, [pc, #308]	; (8011e54 <ip4_input+0x27c>)
 8011d1e:	691b      	ldr	r3, [r3, #16]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d013      	beq.n	8011d4c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011d24:	4b4b      	ldr	r3, [pc, #300]	; (8011e54 <ip4_input+0x27c>)
 8011d26:	691b      	ldr	r3, [r3, #16]
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f000 f96e 	bl	801200c <ip4_addr_isbroadcast_u32>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d105      	bne.n	8011d42 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011d36:	4b47      	ldr	r3, [pc, #284]	; (8011e54 <ip4_input+0x27c>)
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011d3e:	2be0      	cmp	r3, #224	; 0xe0
 8011d40:	d104      	bne.n	8011d4c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7f6 fd02 	bl	800874c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	e07e      	b.n	8011e4a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d104      	bne.n	8011d5c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7f6 fcfa 	bl	800874c <pbuf_free>
    return ERR_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e076      	b.n	8011e4a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	88db      	ldrh	r3, [r3, #6]
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	461a      	mov	r2, r3
 8011d64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011d68:	4013      	ands	r3, r2
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00b      	beq.n	8011d86 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 fc92 	bl	8012698 <ip4_reass>
 8011d74:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d101      	bne.n	8011d80 <ip4_input+0x1a8>
      return ERR_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	e064      	b.n	8011e4a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011d86:	4a33      	ldr	r2, [pc, #204]	; (8011e54 <ip4_input+0x27c>)
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011d8c:	4a31      	ldr	r2, [pc, #196]	; (8011e54 <ip4_input+0x27c>)
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011d92:	4a30      	ldr	r2, [pc, #192]	; (8011e54 <ip4_input+0x27c>)
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	f003 030f 	and.w	r3, r3, #15
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	4b2a      	ldr	r3, [pc, #168]	; (8011e54 <ip4_input+0x27c>)
 8011daa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011dac:	8a7b      	ldrh	r3, [r7, #18]
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7f6 fc45 	bl	8008640 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	7a5b      	ldrb	r3, [r3, #9]
 8011dba:	2b11      	cmp	r3, #17
 8011dbc:	d006      	beq.n	8011dcc <ip4_input+0x1f4>
 8011dbe:	2b11      	cmp	r3, #17
 8011dc0:	dc13      	bgt.n	8011dea <ip4_input+0x212>
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	d00c      	beq.n	8011de0 <ip4_input+0x208>
 8011dc6:	2b06      	cmp	r3, #6
 8011dc8:	d005      	beq.n	8011dd6 <ip4_input+0x1fe>
 8011dca:	e00e      	b.n	8011dea <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7fc faea 	bl	800e3a8 <udp_input>
        break;
 8011dd4:	e026      	b.n	8011e24 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011dd6:	6839      	ldr	r1, [r7, #0]
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7f8 fafb 	bl	800a3d4 <tcp_input>
        break;
 8011dde:	e021      	b.n	8011e24 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011de0:	6839      	ldr	r1, [r7, #0]
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff fcd0 	bl	8011788 <icmp_input>
        break;
 8011de8:	e01c      	b.n	8011e24 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011dea:	4b1a      	ldr	r3, [pc, #104]	; (8011e54 <ip4_input+0x27c>)
 8011dec:	695b      	ldr	r3, [r3, #20]
 8011dee:	69b9      	ldr	r1, [r7, #24]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 f90b 	bl	801200c <ip4_addr_isbroadcast_u32>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d10f      	bne.n	8011e1c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011dfc:	4b15      	ldr	r3, [pc, #84]	; (8011e54 <ip4_input+0x27c>)
 8011dfe:	695b      	ldr	r3, [r3, #20]
 8011e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011e04:	2be0      	cmp	r3, #224	; 0xe0
 8011e06:	d009      	beq.n	8011e1c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011e08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7f6 fc89 	bl	8008726 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011e14:	2102      	movs	r1, #2
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7ff fdba 	bl	8011990 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7f6 fc95 	bl	800874c <pbuf_free>
        break;
 8011e22:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011e24:	4b0b      	ldr	r3, [pc, #44]	; (8011e54 <ip4_input+0x27c>)
 8011e26:	2200      	movs	r2, #0
 8011e28:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011e2a:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <ip4_input+0x27c>)
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011e30:	4b08      	ldr	r3, [pc, #32]	; (8011e54 <ip4_input+0x27c>)
 8011e32:	2200      	movs	r2, #0
 8011e34:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011e36:	4b07      	ldr	r3, [pc, #28]	; (8011e54 <ip4_input+0x27c>)
 8011e38:	2200      	movs	r2, #0
 8011e3a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011e3c:	4b05      	ldr	r3, [pc, #20]	; (8011e54 <ip4_input+0x27c>)
 8011e3e:	2200      	movs	r2, #0
 8011e40:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011e42:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <ip4_input+0x27c>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3720      	adds	r7, #32
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	20008ca4 	.word	0x20008ca4
 8011e58:	2000c40c 	.word	0x2000c40c

08011e5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08a      	sub	sp, #40	; 0x28
 8011e60:	af04      	add	r7, sp, #16
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d009      	beq.n	8011e88 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d003      	beq.n	8011e82 <ip4_output_if+0x26>
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d102      	bne.n	8011e88 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e84:	3304      	adds	r3, #4
 8011e86:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011e88:	78fa      	ldrb	r2, [r7, #3]
 8011e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e8c:	9302      	str	r3, [sp, #8]
 8011e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e92:	9301      	str	r3, [sp, #4]
 8011e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011e98:	9300      	str	r3, [sp, #0]
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	6979      	ldr	r1, [r7, #20]
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f000 f805 	bl	8011eb0 <ip4_output_if_src>
 8011ea6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3718      	adds	r7, #24
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b088      	sub	sp, #32
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
 8011ebc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	7b9b      	ldrb	r3, [r3, #14]
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d006      	beq.n	8011ed4 <ip4_output_if_src+0x24>
 8011ec6:	4b4b      	ldr	r3, [pc, #300]	; (8011ff4 <ip4_output_if_src+0x144>)
 8011ec8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011ecc:	494a      	ldr	r1, [pc, #296]	; (8011ff8 <ip4_output_if_src+0x148>)
 8011ece:	484b      	ldr	r0, [pc, #300]	; (8011ffc <ip4_output_if_src+0x14c>)
 8011ed0:	f001 ffd2 	bl	8013e78 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d060      	beq.n	8011f9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011eda:	2314      	movs	r3, #20
 8011edc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011ede:	2114      	movs	r1, #20
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f7f6 fb9d 	bl	8008620 <pbuf_add_header>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011eec:	f06f 0301 	mvn.w	r3, #1
 8011ef0:	e07c      	b.n	8011fec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	895b      	ldrh	r3, [r3, #10]
 8011efc:	2b13      	cmp	r3, #19
 8011efe:	d806      	bhi.n	8011f0e <ip4_output_if_src+0x5e>
 8011f00:	4b3c      	ldr	r3, [pc, #240]	; (8011ff4 <ip4_output_if_src+0x144>)
 8011f02:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011f06:	493e      	ldr	r1, [pc, #248]	; (8012000 <ip4_output_if_src+0x150>)
 8011f08:	483c      	ldr	r0, [pc, #240]	; (8011ffc <ip4_output_if_src+0x14c>)
 8011f0a:	f001 ffb5 	bl	8013e78 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	78fa      	ldrb	r2, [r7, #3]
 8011f12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011f1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011f24:	8b7b      	ldrh	r3, [r7, #26]
 8011f26:	089b      	lsrs	r3, r3, #2
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f30:	b2da      	uxtb	r2, r3
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011f3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	891b      	ldrh	r3, [r3, #8]
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7f5 f804 	bl	8006f50 <lwip_htons>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	2200      	movs	r2, #0
 8011f54:	719a      	strb	r2, [r3, #6]
 8011f56:	2200      	movs	r2, #0
 8011f58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011f5a:	4b2a      	ldr	r3, [pc, #168]	; (8012004 <ip4_output_if_src+0x154>)
 8011f5c:	881b      	ldrh	r3, [r3, #0]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7f4 fff6 	bl	8006f50 <lwip_htons>
 8011f64:	4603      	mov	r3, r0
 8011f66:	461a      	mov	r2, r3
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011f6c:	4b25      	ldr	r3, [pc, #148]	; (8012004 <ip4_output_if_src+0x154>)
 8011f6e:	881b      	ldrh	r3, [r3, #0]
 8011f70:	3301      	adds	r3, #1
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	4b23      	ldr	r3, [pc, #140]	; (8012004 <ip4_output_if_src+0x154>)
 8011f76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d104      	bne.n	8011f88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011f7e:	4b22      	ldr	r3, [pc, #136]	; (8012008 <ip4_output_if_src+0x158>)
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	60da      	str	r2, [r3, #12]
 8011f86:	e003      	b.n	8011f90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	2200      	movs	r2, #0
 8011f94:	729a      	strb	r2, [r3, #10]
 8011f96:	2200      	movs	r2, #0
 8011f98:	72da      	strb	r2, [r3, #11]
 8011f9a:	e00f      	b.n	8011fbc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	895b      	ldrh	r3, [r3, #10]
 8011fa0:	2b13      	cmp	r3, #19
 8011fa2:	d802      	bhi.n	8011faa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011fa4:	f06f 0301 	mvn.w	r3, #1
 8011fa8:	e020      	b.n	8011fec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	691b      	ldr	r3, [r3, #16]
 8011fb4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011fb6:	f107 0314 	add.w	r3, r7, #20
 8011fba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d00c      	beq.n	8011fde <ip4_output_if_src+0x12e>
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	891a      	ldrh	r2, [r3, #8]
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d906      	bls.n	8011fde <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fd4:	68f8      	ldr	r0, [r7, #12]
 8011fd6:	f000 fd53 	bl	8012a80 <ip4_frag>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	e006      	b.n	8011fec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe0:	695b      	ldr	r3, [r3, #20]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	68f9      	ldr	r1, [r7, #12]
 8011fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fe8:	4798      	blx	r3
 8011fea:	4603      	mov	r3, r0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3720      	adds	r7, #32
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	08019f68 	.word	0x08019f68
 8011ff8:	08019f9c 	.word	0x08019f9c
 8011ffc:	08019fa8 	.word	0x08019fa8
 8012000:	08019fd0 	.word	0x08019fd0
 8012004:	2000c59e 	.word	0x2000c59e
 8012008:	0801a404 	.word	0x0801a404

0801200c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012020:	d002      	beq.n	8012028 <ip4_addr_isbroadcast_u32+0x1c>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012028:	2301      	movs	r3, #1
 801202a:	e02a      	b.n	8012082 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012032:	f003 0302 	and.w	r3, r3, #2
 8012036:	2b00      	cmp	r3, #0
 8012038:	d101      	bne.n	801203e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801203a:	2300      	movs	r3, #0
 801203c:	e021      	b.n	8012082 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	3304      	adds	r3, #4
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	429a      	cmp	r2, r3
 8012048:	d101      	bne.n	801204e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801204a:	2300      	movs	r3, #0
 801204c:	e019      	b.n	8012082 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	3304      	adds	r3, #4
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	405a      	eors	r2, r3
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	3308      	adds	r3, #8
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	4013      	ands	r3, r2
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10d      	bne.n	8012080 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	3308      	adds	r3, #8
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	43da      	mvns	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	3308      	adds	r3, #8
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012078:	429a      	cmp	r2, r3
 801207a:	d101      	bne.n	8012080 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801207c:	2301      	movs	r3, #1
 801207e:	e000      	b.n	8012082 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012080:	2300      	movs	r3, #0
  }
}
 8012082:	4618      	mov	r0, r3
 8012084:	3714      	adds	r7, #20
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
	...

08012090 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012096:	2300      	movs	r3, #0
 8012098:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801209a:	4b12      	ldr	r3, [pc, #72]	; (80120e4 <ip_reass_tmr+0x54>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80120a0:	e018      	b.n	80120d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	7fdb      	ldrb	r3, [r3, #31]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d00b      	beq.n	80120c2 <ip_reass_tmr+0x32>
      r->timer--;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	7fdb      	ldrb	r3, [r3, #31]
 80120ae:	3b01      	subs	r3, #1
 80120b0:	b2da      	uxtb	r2, r3
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	60fb      	str	r3, [r7, #12]
 80120c0:	e008      	b.n	80120d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80120cc:	68b9      	ldr	r1, [r7, #8]
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 f80a 	bl	80120e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1e3      	bne.n	80120a2 <ip_reass_tmr+0x12>
    }
  }
}
 80120da:	bf00      	nop
 80120dc:	bf00      	nop
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	2000c5a0 	.word	0x2000c5a0

080120e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b088      	sub	sp, #32
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80120f2:	2300      	movs	r3, #0
 80120f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d105      	bne.n	801210a <ip_reass_free_complete_datagram+0x22>
 80120fe:	4b45      	ldr	r3, [pc, #276]	; (8012214 <ip_reass_free_complete_datagram+0x12c>)
 8012100:	22ab      	movs	r2, #171	; 0xab
 8012102:	4945      	ldr	r1, [pc, #276]	; (8012218 <ip_reass_free_complete_datagram+0x130>)
 8012104:	4845      	ldr	r0, [pc, #276]	; (801221c <ip_reass_free_complete_datagram+0x134>)
 8012106:	f001 feb7 	bl	8013e78 <iprintf>
  if (prev != NULL) {
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00a      	beq.n	8012126 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	429a      	cmp	r2, r3
 8012118:	d005      	beq.n	8012126 <ip_reass_free_complete_datagram+0x3e>
 801211a:	4b3e      	ldr	r3, [pc, #248]	; (8012214 <ip_reass_free_complete_datagram+0x12c>)
 801211c:	22ad      	movs	r2, #173	; 0xad
 801211e:	4940      	ldr	r1, [pc, #256]	; (8012220 <ip_reass_free_complete_datagram+0x138>)
 8012120:	483e      	ldr	r0, [pc, #248]	; (801221c <ip_reass_free_complete_datagram+0x134>)
 8012122:	f001 fea9 	bl	8013e78 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	889b      	ldrh	r3, [r3, #4]
 8012132:	b29b      	uxth	r3, r3
 8012134:	2b00      	cmp	r3, #0
 8012136:	d12a      	bne.n	801218e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	6858      	ldr	r0, [r3, #4]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3308      	adds	r3, #8
 801214e:	2214      	movs	r2, #20
 8012150:	4619      	mov	r1, r3
 8012152:	f001 ff7c 	bl	801404e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012156:	2101      	movs	r1, #1
 8012158:	69b8      	ldr	r0, [r7, #24]
 801215a:	f7ff fc29 	bl	80119b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801215e:	69b8      	ldr	r0, [r7, #24]
 8012160:	f7f6 fb82 	bl	8008868 <pbuf_clen>
 8012164:	4603      	mov	r3, r0
 8012166:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012168:	8bfa      	ldrh	r2, [r7, #30]
 801216a:	8a7b      	ldrh	r3, [r7, #18]
 801216c:	4413      	add	r3, r2
 801216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012172:	db05      	blt.n	8012180 <ip_reass_free_complete_datagram+0x98>
 8012174:	4b27      	ldr	r3, [pc, #156]	; (8012214 <ip_reass_free_complete_datagram+0x12c>)
 8012176:	22bc      	movs	r2, #188	; 0xbc
 8012178:	492a      	ldr	r1, [pc, #168]	; (8012224 <ip_reass_free_complete_datagram+0x13c>)
 801217a:	4828      	ldr	r0, [pc, #160]	; (801221c <ip_reass_free_complete_datagram+0x134>)
 801217c:	f001 fe7c 	bl	8013e78 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012180:	8bfa      	ldrh	r2, [r7, #30]
 8012182:	8a7b      	ldrh	r3, [r7, #18]
 8012184:	4413      	add	r3, r2
 8012186:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012188:	69b8      	ldr	r0, [r7, #24]
 801218a:	f7f6 fadf 	bl	800874c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012194:	e01f      	b.n	80121d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801219c:	69bb      	ldr	r3, [r7, #24]
 801219e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7f6 fb5e 	bl	8008868 <pbuf_clen>
 80121ac:	4603      	mov	r3, r0
 80121ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80121b0:	8bfa      	ldrh	r2, [r7, #30]
 80121b2:	8a7b      	ldrh	r3, [r7, #18]
 80121b4:	4413      	add	r3, r2
 80121b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121ba:	db05      	blt.n	80121c8 <ip_reass_free_complete_datagram+0xe0>
 80121bc:	4b15      	ldr	r3, [pc, #84]	; (8012214 <ip_reass_free_complete_datagram+0x12c>)
 80121be:	22cc      	movs	r2, #204	; 0xcc
 80121c0:	4918      	ldr	r1, [pc, #96]	; (8012224 <ip_reass_free_complete_datagram+0x13c>)
 80121c2:	4816      	ldr	r0, [pc, #88]	; (801221c <ip_reass_free_complete_datagram+0x134>)
 80121c4:	f001 fe58 	bl	8013e78 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80121c8:	8bfa      	ldrh	r2, [r7, #30]
 80121ca:	8a7b      	ldrh	r3, [r7, #18]
 80121cc:	4413      	add	r3, r2
 80121ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f7f6 fabb 	bl	800874c <pbuf_free>
  while (p != NULL) {
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d1dc      	bne.n	8012196 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80121dc:	6839      	ldr	r1, [r7, #0]
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f8c2 	bl	8012368 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80121e4:	4b10      	ldr	r3, [pc, #64]	; (8012228 <ip_reass_free_complete_datagram+0x140>)
 80121e6:	881b      	ldrh	r3, [r3, #0]
 80121e8:	8bfa      	ldrh	r2, [r7, #30]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d905      	bls.n	80121fa <ip_reass_free_complete_datagram+0x112>
 80121ee:	4b09      	ldr	r3, [pc, #36]	; (8012214 <ip_reass_free_complete_datagram+0x12c>)
 80121f0:	22d2      	movs	r2, #210	; 0xd2
 80121f2:	490e      	ldr	r1, [pc, #56]	; (801222c <ip_reass_free_complete_datagram+0x144>)
 80121f4:	4809      	ldr	r0, [pc, #36]	; (801221c <ip_reass_free_complete_datagram+0x134>)
 80121f6:	f001 fe3f 	bl	8013e78 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80121fa:	4b0b      	ldr	r3, [pc, #44]	; (8012228 <ip_reass_free_complete_datagram+0x140>)
 80121fc:	881a      	ldrh	r2, [r3, #0]
 80121fe:	8bfb      	ldrh	r3, [r7, #30]
 8012200:	1ad3      	subs	r3, r2, r3
 8012202:	b29a      	uxth	r2, r3
 8012204:	4b08      	ldr	r3, [pc, #32]	; (8012228 <ip_reass_free_complete_datagram+0x140>)
 8012206:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012208:	8bfb      	ldrh	r3, [r7, #30]
}
 801220a:	4618      	mov	r0, r3
 801220c:	3720      	adds	r7, #32
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	0801a000 	.word	0x0801a000
 8012218:	0801a03c 	.word	0x0801a03c
 801221c:	0801a048 	.word	0x0801a048
 8012220:	0801a070 	.word	0x0801a070
 8012224:	0801a084 	.word	0x0801a084
 8012228:	2000c5a4 	.word	0x2000c5a4
 801222c:	0801a0a4 	.word	0x0801a0a4

08012230 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b08a      	sub	sp, #40	; 0x28
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801223a:	2300      	movs	r3, #0
 801223c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801223e:	2300      	movs	r3, #0
 8012240:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801224a:	2300      	movs	r3, #0
 801224c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801224e:	4b28      	ldr	r3, [pc, #160]	; (80122f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012254:	e030      	b.n	80122b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012258:	695a      	ldr	r2, [r3, #20]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	429a      	cmp	r2, r3
 8012260:	d10c      	bne.n	801227c <ip_reass_remove_oldest_datagram+0x4c>
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	699a      	ldr	r2, [r3, #24]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	429a      	cmp	r2, r3
 801226c:	d106      	bne.n	801227c <ip_reass_remove_oldest_datagram+0x4c>
 801226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012270:	899a      	ldrh	r2, [r3, #12]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	889b      	ldrh	r3, [r3, #4]
 8012276:	b29b      	uxth	r3, r3
 8012278:	429a      	cmp	r2, r3
 801227a:	d014      	beq.n	80122a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	3301      	adds	r3, #1
 8012280:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d104      	bne.n	8012292 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	61bb      	str	r3, [r7, #24]
 8012290:	e009      	b.n	80122a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012294:	7fda      	ldrb	r2, [r3, #31]
 8012296:	6a3b      	ldr	r3, [r7, #32]
 8012298:	7fdb      	ldrb	r3, [r3, #31]
 801229a:	429a      	cmp	r2, r3
 801229c:	d803      	bhi.n	80122a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80122a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d001      	beq.n	80122b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80122ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80122b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1cb      	bne.n	8012256 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80122be:	6a3b      	ldr	r3, [r7, #32]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d008      	beq.n	80122d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80122c4:	69b9      	ldr	r1, [r7, #24]
 80122c6:	6a38      	ldr	r0, [r7, #32]
 80122c8:	f7ff ff0e 	bl	80120e8 <ip_reass_free_complete_datagram>
 80122cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	4413      	add	r3, r2
 80122d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	429a      	cmp	r2, r3
 80122dc:	da02      	bge.n	80122e4 <ip_reass_remove_oldest_datagram+0xb4>
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	dcac      	bgt.n	801223e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80122e4:	697b      	ldr	r3, [r7, #20]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3728      	adds	r7, #40	; 0x28
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	2000c5a0 	.word	0x2000c5a0

080122f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b084      	sub	sp, #16
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80122fe:	2004      	movs	r0, #4
 8012300:	f7f5 fafe 	bl	8007900 <memp_malloc>
 8012304:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d110      	bne.n	801232e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801230c:	6839      	ldr	r1, [r7, #0]
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7ff ff8e 	bl	8012230 <ip_reass_remove_oldest_datagram>
 8012314:	4602      	mov	r2, r0
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	4293      	cmp	r3, r2
 801231a:	dc03      	bgt.n	8012324 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801231c:	2004      	movs	r0, #4
 801231e:	f7f5 faef 	bl	8007900 <memp_malloc>
 8012322:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d101      	bne.n	801232e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801232a:	2300      	movs	r3, #0
 801232c:	e016      	b.n	801235c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801232e:	2220      	movs	r2, #32
 8012330:	2100      	movs	r1, #0
 8012332:	68f8      	ldr	r0, [r7, #12]
 8012334:	f001 fe05 	bl	8013f42 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	220f      	movs	r2, #15
 801233c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801233e:	4b09      	ldr	r3, [pc, #36]	; (8012364 <ip_reass_enqueue_new_datagram+0x70>)
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012346:	4a07      	ldr	r2, [pc, #28]	; (8012364 <ip_reass_enqueue_new_datagram+0x70>)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	3308      	adds	r3, #8
 8012350:	2214      	movs	r2, #20
 8012352:	6879      	ldr	r1, [r7, #4]
 8012354:	4618      	mov	r0, r3
 8012356:	f001 fe7a 	bl	801404e <memcpy>
  return ipr;
 801235a:	68fb      	ldr	r3, [r7, #12]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3710      	adds	r7, #16
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	2000c5a0 	.word	0x2000c5a0

08012368 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012372:	4b10      	ldr	r3, [pc, #64]	; (80123b4 <ip_reass_dequeue_datagram+0x4c>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	429a      	cmp	r2, r3
 801237a:	d104      	bne.n	8012386 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a0c      	ldr	r2, [pc, #48]	; (80123b4 <ip_reass_dequeue_datagram+0x4c>)
 8012382:	6013      	str	r3, [r2, #0]
 8012384:	e00d      	b.n	80123a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d106      	bne.n	801239a <ip_reass_dequeue_datagram+0x32>
 801238c:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <ip_reass_dequeue_datagram+0x50>)
 801238e:	f240 1245 	movw	r2, #325	; 0x145
 8012392:	490a      	ldr	r1, [pc, #40]	; (80123bc <ip_reass_dequeue_datagram+0x54>)
 8012394:	480a      	ldr	r0, [pc, #40]	; (80123c0 <ip_reass_dequeue_datagram+0x58>)
 8012396:	f001 fd6f 	bl	8013e78 <iprintf>
    prev->next = ipr->next;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80123a2:	6879      	ldr	r1, [r7, #4]
 80123a4:	2004      	movs	r0, #4
 80123a6:	f7f5 fb21 	bl	80079ec <memp_free>
}
 80123aa:	bf00      	nop
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	2000c5a0 	.word	0x2000c5a0
 80123b8:	0801a000 	.word	0x0801a000
 80123bc:	0801a0c8 	.word	0x0801a0c8
 80123c0:	0801a048 	.word	0x0801a048

080123c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b08c      	sub	sp, #48	; 0x30
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80123d0:	2300      	movs	r3, #0
 80123d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80123d4:	2301      	movs	r3, #1
 80123d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	885b      	ldrh	r3, [r3, #2]
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7f4 fdb3 	bl	8006f50 <lwip_htons>
 80123ea:	4603      	mov	r3, r0
 80123ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80123ee:	69fb      	ldr	r3, [r7, #28]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	f003 030f 	and.w	r3, r3, #15
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80123fc:	7e7b      	ldrb	r3, [r7, #25]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	8b7a      	ldrh	r2, [r7, #26]
 8012402:	429a      	cmp	r2, r3
 8012404:	d202      	bcs.n	801240c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012406:	f04f 33ff 	mov.w	r3, #4294967295
 801240a:	e135      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801240c:	7e7b      	ldrb	r3, [r7, #25]
 801240e:	b29b      	uxth	r3, r3
 8012410:	8b7a      	ldrh	r2, [r7, #26]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	88db      	ldrh	r3, [r3, #6]
 801241a:	b29b      	uxth	r3, r3
 801241c:	4618      	mov	r0, r3
 801241e:	f7f4 fd97 	bl	8006f50 <lwip_htons>
 8012422:	4603      	mov	r3, r0
 8012424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012428:	b29b      	uxth	r3, r3
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012436:	2200      	movs	r2, #0
 8012438:	701a      	strb	r2, [r3, #0]
 801243a:	2200      	movs	r2, #0
 801243c:	705a      	strb	r2, [r3, #1]
 801243e:	2200      	movs	r2, #0
 8012440:	709a      	strb	r2, [r3, #2]
 8012442:	2200      	movs	r2, #0
 8012444:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012448:	8afa      	ldrh	r2, [r7, #22]
 801244a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801244c:	8afa      	ldrh	r2, [r7, #22]
 801244e:	8b7b      	ldrh	r3, [r7, #26]
 8012450:	4413      	add	r3, r2
 8012452:	b29a      	uxth	r2, r3
 8012454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012456:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245a:	88db      	ldrh	r3, [r3, #6]
 801245c:	b29b      	uxth	r3, r3
 801245e:	8afa      	ldrh	r2, [r7, #22]
 8012460:	429a      	cmp	r2, r3
 8012462:	d902      	bls.n	801246a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012464:	f04f 33ff 	mov.w	r3, #4294967295
 8012468:	e106      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	627b      	str	r3, [r7, #36]	; 0x24
 8012470:	e068      	b.n	8012544 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247a:	889b      	ldrh	r3, [r3, #4]
 801247c:	b29a      	uxth	r2, r3
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	889b      	ldrh	r3, [r3, #4]
 8012482:	b29b      	uxth	r3, r3
 8012484:	429a      	cmp	r2, r3
 8012486:	d235      	bcs.n	80124f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801248c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	2b00      	cmp	r3, #0
 8012492:	d020      	beq.n	80124d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012496:	889b      	ldrh	r3, [r3, #4]
 8012498:	b29a      	uxth	r2, r3
 801249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249c:	88db      	ldrh	r3, [r3, #6]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d307      	bcc.n	80124b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80124a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a6:	88db      	ldrh	r3, [r3, #6]
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	889b      	ldrh	r3, [r3, #4]
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d902      	bls.n	80124ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124b4:	f04f 33ff 	mov.w	r3, #4294967295
 80124b8:	e0de      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80124ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124bc:	68ba      	ldr	r2, [r7, #8]
 80124be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c2:	88db      	ldrh	r3, [r3, #6]
 80124c4:	b29a      	uxth	r2, r3
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	889b      	ldrh	r3, [r3, #4]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d03d      	beq.n	801254c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80124d0:	2300      	movs	r3, #0
 80124d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80124d4:	e03a      	b.n	801254c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80124d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d8:	88db      	ldrh	r3, [r3, #6]
 80124da:	b29a      	uxth	r2, r3
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	889b      	ldrh	r3, [r3, #4]
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d902      	bls.n	80124ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124e6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ea:	e0c5      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	68ba      	ldr	r2, [r7, #8]
 80124f0:	605a      	str	r2, [r3, #4]
      break;
 80124f2:	e02b      	b.n	801254c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80124f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f6:	889b      	ldrh	r3, [r3, #4]
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	889b      	ldrh	r3, [r3, #4]
 80124fe:	b29b      	uxth	r3, r3
 8012500:	429a      	cmp	r2, r3
 8012502:	d102      	bne.n	801250a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012504:	f04f 33ff 	mov.w	r3, #4294967295
 8012508:	e0b6      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250c:	889b      	ldrh	r3, [r3, #4]
 801250e:	b29a      	uxth	r2, r3
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	88db      	ldrh	r3, [r3, #6]
 8012514:	b29b      	uxth	r3, r3
 8012516:	429a      	cmp	r2, r3
 8012518:	d202      	bcs.n	8012520 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801251a:	f04f 33ff 	mov.w	r3, #4294967295
 801251e:	e0ab      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012522:	2b00      	cmp	r3, #0
 8012524:	d009      	beq.n	801253a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012528:	88db      	ldrh	r3, [r3, #6]
 801252a:	b29a      	uxth	r2, r3
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	889b      	ldrh	r3, [r3, #4]
 8012530:	b29b      	uxth	r3, r3
 8012532:	429a      	cmp	r2, r3
 8012534:	d001      	beq.n	801253a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012546:	2b00      	cmp	r3, #0
 8012548:	d193      	bne.n	8012472 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801254a:	e000      	b.n	801254e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801254c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012550:	2b00      	cmp	r3, #0
 8012552:	d12d      	bne.n	80125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	2b00      	cmp	r3, #0
 8012558:	d01c      	beq.n	8012594 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255c:	88db      	ldrh	r3, [r3, #6]
 801255e:	b29a      	uxth	r2, r3
 8012560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012562:	889b      	ldrh	r3, [r3, #4]
 8012564:	b29b      	uxth	r3, r3
 8012566:	429a      	cmp	r2, r3
 8012568:	d906      	bls.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801256a:	4b45      	ldr	r3, [pc, #276]	; (8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801256c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012570:	4944      	ldr	r1, [pc, #272]	; (8012684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012572:	4845      	ldr	r0, [pc, #276]	; (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012574:	f001 fc80 	bl	8013e78 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012580:	88db      	ldrh	r3, [r3, #6]
 8012582:	b29a      	uxth	r2, r3
 8012584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012586:	889b      	ldrh	r3, [r3, #4]
 8012588:	b29b      	uxth	r3, r3
 801258a:	429a      	cmp	r2, r3
 801258c:	d010      	beq.n	80125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	623b      	str	r3, [r7, #32]
 8012592:	e00d      	b.n	80125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d006      	beq.n	80125aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801259c:	4b38      	ldr	r3, [pc, #224]	; (8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801259e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80125a2:	493a      	ldr	r1, [pc, #232]	; (801268c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80125a4:	4838      	ldr	r0, [pc, #224]	; (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125a6:	f001 fc67 	bl	8013e78 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	68ba      	ldr	r2, [r7, #8]
 80125ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d105      	bne.n	80125c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	7f9b      	ldrb	r3, [r3, #30]
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d059      	beq.n	8012676 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d04f      	beq.n	8012668 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d006      	beq.n	80125de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	889b      	ldrh	r3, [r3, #4]
 80125d8:	b29b      	uxth	r3, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d002      	beq.n	80125e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	623b      	str	r3, [r7, #32]
 80125e2:	e041      	b.n	8012668 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80125e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80125e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80125ee:	e012      	b.n	8012616 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80125f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80125f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f8:	88db      	ldrh	r3, [r3, #6]
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fe:	889b      	ldrh	r3, [r3, #4]
 8012600:	b29b      	uxth	r3, r3
 8012602:	429a      	cmp	r2, r3
 8012604:	d002      	beq.n	801260c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012606:	2300      	movs	r3, #0
 8012608:	623b      	str	r3, [r7, #32]
            break;
 801260a:	e007      	b.n	801261c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801260e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1e9      	bne.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d022      	beq.n	8012668 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801262a:	4b15      	ldr	r3, [pc, #84]	; (8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801262c:	f240 12df 	movw	r2, #479	; 0x1df
 8012630:	4917      	ldr	r1, [pc, #92]	; (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012632:	4815      	ldr	r0, [pc, #84]	; (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012634:	f001 fc20 	bl	8013e78 <iprintf>
          LWIP_ASSERT("sanity check",
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012640:	429a      	cmp	r2, r3
 8012642:	d106      	bne.n	8012652 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012644:	4b0e      	ldr	r3, [pc, #56]	; (8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012646:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801264a:	4911      	ldr	r1, [pc, #68]	; (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801264c:	480e      	ldr	r0, [pc, #56]	; (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801264e:	f001 fc13 	bl	8013e78 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d006      	beq.n	8012668 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801265a:	4b09      	ldr	r3, [pc, #36]	; (8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801265c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012660:	490c      	ldr	r1, [pc, #48]	; (8012694 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012662:	4809      	ldr	r0, [pc, #36]	; (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012664:	f001 fc08 	bl	8013e78 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	2b00      	cmp	r3, #0
 801266c:	bf14      	ite	ne
 801266e:	2301      	movne	r3, #1
 8012670:	2300      	moveq	r3, #0
 8012672:	b2db      	uxtb	r3, r3
 8012674:	e000      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012676:	2300      	movs	r3, #0
}
 8012678:	4618      	mov	r0, r3
 801267a:	3730      	adds	r7, #48	; 0x30
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	0801a000 	.word	0x0801a000
 8012684:	0801a0e4 	.word	0x0801a0e4
 8012688:	0801a048 	.word	0x0801a048
 801268c:	0801a104 	.word	0x0801a104
 8012690:	0801a13c 	.word	0x0801a13c
 8012694:	0801a14c 	.word	0x0801a14c

08012698 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b08e      	sub	sp, #56	; 0x38
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80126a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	f003 030f 	and.w	r3, r3, #15
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	2b14      	cmp	r3, #20
 80126b6:	f040 8171 	bne.w	801299c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80126ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126bc:	88db      	ldrh	r3, [r3, #6]
 80126be:	b29b      	uxth	r3, r3
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7f4 fc45 	bl	8006f50 <lwip_htons>
 80126c6:	4603      	mov	r3, r0
 80126c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	00db      	lsls	r3, r3, #3
 80126d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	885b      	ldrh	r3, [r3, #2]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	4618      	mov	r0, r3
 80126da:	f7f4 fc39 	bl	8006f50 <lwip_htons>
 80126de:	4603      	mov	r3, r0
 80126e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80126e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	f003 030f 	and.w	r3, r3, #15
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80126f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80126fa:	429a      	cmp	r2, r3
 80126fc:	f0c0 8150 	bcc.w	80129a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012704:	b29b      	uxth	r3, r3
 8012706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012708:	1ad3      	subs	r3, r2, r3
 801270a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7f6 f8ab 	bl	8008868 <pbuf_clen>
 8012712:	4603      	mov	r3, r0
 8012714:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012716:	4b8c      	ldr	r3, [pc, #560]	; (8012948 <ip4_reass+0x2b0>)
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	461a      	mov	r2, r3
 801271c:	8c3b      	ldrh	r3, [r7, #32]
 801271e:	4413      	add	r3, r2
 8012720:	2b0a      	cmp	r3, #10
 8012722:	dd10      	ble.n	8012746 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012724:	8c3b      	ldrh	r3, [r7, #32]
 8012726:	4619      	mov	r1, r3
 8012728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801272a:	f7ff fd81 	bl	8012230 <ip_reass_remove_oldest_datagram>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	f000 8137 	beq.w	80129a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012736:	4b84      	ldr	r3, [pc, #528]	; (8012948 <ip4_reass+0x2b0>)
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	461a      	mov	r2, r3
 801273c:	8c3b      	ldrh	r3, [r7, #32]
 801273e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012740:	2b0a      	cmp	r3, #10
 8012742:	f300 812f 	bgt.w	80129a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012746:	4b81      	ldr	r3, [pc, #516]	; (801294c <ip4_reass+0x2b4>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	633b      	str	r3, [r7, #48]	; 0x30
 801274c:	e015      	b.n	801277a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012750:	695a      	ldr	r2, [r3, #20]
 8012752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	429a      	cmp	r2, r3
 8012758:	d10c      	bne.n	8012774 <ip4_reass+0xdc>
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	699a      	ldr	r2, [r3, #24]
 801275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012760:	691b      	ldr	r3, [r3, #16]
 8012762:	429a      	cmp	r2, r3
 8012764:	d106      	bne.n	8012774 <ip4_reass+0xdc>
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	899a      	ldrh	r2, [r3, #12]
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	889b      	ldrh	r3, [r3, #4]
 801276e:	b29b      	uxth	r3, r3
 8012770:	429a      	cmp	r2, r3
 8012772:	d006      	beq.n	8012782 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	633b      	str	r3, [r7, #48]	; 0x30
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	2b00      	cmp	r3, #0
 801277e:	d1e6      	bne.n	801274e <ip4_reass+0xb6>
 8012780:	e000      	b.n	8012784 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012782:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012786:	2b00      	cmp	r3, #0
 8012788:	d109      	bne.n	801279e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801278a:	8c3b      	ldrh	r3, [r7, #32]
 801278c:	4619      	mov	r1, r3
 801278e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012790:	f7ff fdb0 	bl	80122f4 <ip_reass_enqueue_new_datagram>
 8012794:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012798:	2b00      	cmp	r3, #0
 801279a:	d11c      	bne.n	80127d6 <ip4_reass+0x13e>
      goto nullreturn;
 801279c:	e105      	b.n	80129aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a0:	88db      	ldrh	r3, [r3, #6]
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7f4 fbd3 	bl	8006f50 <lwip_htons>
 80127aa:	4603      	mov	r3, r0
 80127ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d110      	bne.n	80127d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	89db      	ldrh	r3, [r3, #14]
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7f4 fbc9 	bl	8006f50 <lwip_htons>
 80127be:	4603      	mov	r3, r0
 80127c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d006      	beq.n	80127d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80127c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ca:	3308      	adds	r3, #8
 80127cc:	2214      	movs	r2, #20
 80127ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80127d0:	4618      	mov	r0, r3
 80127d2:	f001 fc3c 	bl	801404e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80127d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d8:	88db      	ldrh	r3, [r3, #6]
 80127da:	b29b      	uxth	r3, r3
 80127dc:	f003 0320 	and.w	r3, r3, #32
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	bf0c      	ite	eq
 80127e4:	2301      	moveq	r3, #1
 80127e6:	2300      	movne	r3, #0
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00e      	beq.n	8012810 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80127f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80127f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127f6:	4413      	add	r3, r2
 80127f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80127fa:	8b7a      	ldrh	r2, [r7, #26]
 80127fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127fe:	429a      	cmp	r2, r3
 8012800:	f0c0 80a0 	bcc.w	8012944 <ip4_reass+0x2ac>
 8012804:	8b7b      	ldrh	r3, [r7, #26]
 8012806:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801280a:	4293      	cmp	r3, r2
 801280c:	f200 809a 	bhi.w	8012944 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012810:	69fa      	ldr	r2, [r7, #28]
 8012812:	6879      	ldr	r1, [r7, #4]
 8012814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012816:	f7ff fdd5 	bl	80123c4 <ip_reass_chain_frag_into_datagram_and_validate>
 801281a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012822:	f000 809b 	beq.w	801295c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012826:	4b48      	ldr	r3, [pc, #288]	; (8012948 <ip4_reass+0x2b0>)
 8012828:	881a      	ldrh	r2, [r3, #0]
 801282a:	8c3b      	ldrh	r3, [r7, #32]
 801282c:	4413      	add	r3, r2
 801282e:	b29a      	uxth	r2, r3
 8012830:	4b45      	ldr	r3, [pc, #276]	; (8012948 <ip4_reass+0x2b0>)
 8012832:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00d      	beq.n	8012856 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801283a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801283c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801283e:	4413      	add	r3, r2
 8012840:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012844:	8a7a      	ldrh	r2, [r7, #18]
 8012846:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284a:	7f9b      	ldrb	r3, [r3, #30]
 801284c:	f043 0301 	orr.w	r3, r3, #1
 8012850:	b2da      	uxtb	r2, r3
 8012852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012854:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	2b01      	cmp	r3, #1
 801285a:	d171      	bne.n	8012940 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285e:	8b9b      	ldrh	r3, [r3, #28]
 8012860:	3314      	adds	r3, #20
 8012862:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012878:	3308      	adds	r3, #8
 801287a:	2214      	movs	r2, #20
 801287c:	4619      	mov	r1, r3
 801287e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012880:	f001 fbe5 	bl	801404e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012884:	8a3b      	ldrh	r3, [r7, #16]
 8012886:	4618      	mov	r0, r3
 8012888:	f7f4 fb62 	bl	8006f50 <lwip_htons>
 801288c:	4603      	mov	r3, r0
 801288e:	461a      	mov	r2, r3
 8012890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012892:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012896:	2200      	movs	r2, #0
 8012898:	719a      	strb	r2, [r3, #6]
 801289a:	2200      	movs	r2, #0
 801289c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a0:	2200      	movs	r2, #0
 80128a2:	729a      	strb	r2, [r3, #10]
 80128a4:	2200      	movs	r2, #0
 80128a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80128ae:	e00d      	b.n	80128cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80128b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80128b6:	2114      	movs	r1, #20
 80128b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80128ba:	f7f5 fec1 	bl	8008640 <pbuf_remove_header>
      pbuf_cat(p, r);
 80128be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7f6 f811 	bl	80088e8 <pbuf_cat>
      r = iprh->next_pbuf;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80128cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1ee      	bne.n	80128b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80128d2:	4b1e      	ldr	r3, [pc, #120]	; (801294c <ip4_reass+0x2b4>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128d8:	429a      	cmp	r2, r3
 80128da:	d102      	bne.n	80128e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80128dc:	2300      	movs	r3, #0
 80128de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128e0:	e010      	b.n	8012904 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80128e2:	4b1a      	ldr	r3, [pc, #104]	; (801294c <ip4_reass+0x2b4>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128e8:	e007      	b.n	80128fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80128ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d006      	beq.n	8012902 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80128f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d1f4      	bne.n	80128ea <ip4_reass+0x252>
 8012900:	e000      	b.n	8012904 <ip4_reass+0x26c>
          break;
 8012902:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012908:	f7ff fd2e 	bl	8012368 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7f5 ffab 	bl	8008868 <pbuf_clen>
 8012912:	4603      	mov	r3, r0
 8012914:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012916:	4b0c      	ldr	r3, [pc, #48]	; (8012948 <ip4_reass+0x2b0>)
 8012918:	881b      	ldrh	r3, [r3, #0]
 801291a:	8c3a      	ldrh	r2, [r7, #32]
 801291c:	429a      	cmp	r2, r3
 801291e:	d906      	bls.n	801292e <ip4_reass+0x296>
 8012920:	4b0b      	ldr	r3, [pc, #44]	; (8012950 <ip4_reass+0x2b8>)
 8012922:	f240 229b 	movw	r2, #667	; 0x29b
 8012926:	490b      	ldr	r1, [pc, #44]	; (8012954 <ip4_reass+0x2bc>)
 8012928:	480b      	ldr	r0, [pc, #44]	; (8012958 <ip4_reass+0x2c0>)
 801292a:	f001 faa5 	bl	8013e78 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801292e:	4b06      	ldr	r3, [pc, #24]	; (8012948 <ip4_reass+0x2b0>)
 8012930:	881a      	ldrh	r2, [r3, #0]
 8012932:	8c3b      	ldrh	r3, [r7, #32]
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	b29a      	uxth	r2, r3
 8012938:	4b03      	ldr	r3, [pc, #12]	; (8012948 <ip4_reass+0x2b0>)
 801293a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	e038      	b.n	80129b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	e036      	b.n	80129b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012944:	bf00      	nop
 8012946:	e00a      	b.n	801295e <ip4_reass+0x2c6>
 8012948:	2000c5a4 	.word	0x2000c5a4
 801294c:	2000c5a0 	.word	0x2000c5a0
 8012950:	0801a000 	.word	0x0801a000
 8012954:	0801a170 	.word	0x0801a170
 8012958:	0801a048 	.word	0x0801a048
    goto nullreturn_ipr;
 801295c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012960:	2b00      	cmp	r3, #0
 8012962:	d106      	bne.n	8012972 <ip4_reass+0x2da>
 8012964:	4b15      	ldr	r3, [pc, #84]	; (80129bc <ip4_reass+0x324>)
 8012966:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801296a:	4915      	ldr	r1, [pc, #84]	; (80129c0 <ip4_reass+0x328>)
 801296c:	4815      	ldr	r0, [pc, #84]	; (80129c4 <ip4_reass+0x32c>)
 801296e:	f001 fa83 	bl	8013e78 <iprintf>
  if (ipr->p == NULL) {
 8012972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d116      	bne.n	80129a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801297a:	4b13      	ldr	r3, [pc, #76]	; (80129c8 <ip4_reass+0x330>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012980:	429a      	cmp	r2, r3
 8012982:	d006      	beq.n	8012992 <ip4_reass+0x2fa>
 8012984:	4b0d      	ldr	r3, [pc, #52]	; (80129bc <ip4_reass+0x324>)
 8012986:	f240 22ab 	movw	r2, #683	; 0x2ab
 801298a:	4910      	ldr	r1, [pc, #64]	; (80129cc <ip4_reass+0x334>)
 801298c:	480d      	ldr	r0, [pc, #52]	; (80129c4 <ip4_reass+0x32c>)
 801298e:	f001 fa73 	bl	8013e78 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012992:	2100      	movs	r1, #0
 8012994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012996:	f7ff fce7 	bl	8012368 <ip_reass_dequeue_datagram>
 801299a:	e006      	b.n	80129aa <ip4_reass+0x312>
    goto nullreturn;
 801299c:	bf00      	nop
 801299e:	e004      	b.n	80129aa <ip4_reass+0x312>
    goto nullreturn;
 80129a0:	bf00      	nop
 80129a2:	e002      	b.n	80129aa <ip4_reass+0x312>
      goto nullreturn;
 80129a4:	bf00      	nop
 80129a6:	e000      	b.n	80129aa <ip4_reass+0x312>
  }

nullreturn:
 80129a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7f5 fece 	bl	800874c <pbuf_free>
  return NULL;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3738      	adds	r7, #56	; 0x38
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	0801a000 	.word	0x0801a000
 80129c0:	0801a18c 	.word	0x0801a18c
 80129c4:	0801a048 	.word	0x0801a048
 80129c8:	2000c5a0 	.word	0x2000c5a0
 80129cc:	0801a198 	.word	0x0801a198

080129d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80129d4:	2005      	movs	r0, #5
 80129d6:	f7f4 ff93 	bl	8007900 <memp_malloc>
 80129da:	4603      	mov	r3, r0
}
 80129dc:	4618      	mov	r0, r3
 80129de:	bd80      	pop	{r7, pc}

080129e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d106      	bne.n	80129fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80129ee:	4b07      	ldr	r3, [pc, #28]	; (8012a0c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80129f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80129f4:	4906      	ldr	r1, [pc, #24]	; (8012a10 <ip_frag_free_pbuf_custom_ref+0x30>)
 80129f6:	4807      	ldr	r0, [pc, #28]	; (8012a14 <ip_frag_free_pbuf_custom_ref+0x34>)
 80129f8:	f001 fa3e 	bl	8013e78 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80129fc:	6879      	ldr	r1, [r7, #4]
 80129fe:	2005      	movs	r0, #5
 8012a00:	f7f4 fff4 	bl	80079ec <memp_free>
}
 8012a04:	bf00      	nop
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	0801a000 	.word	0x0801a000
 8012a10:	0801a1b8 	.word	0x0801a1b8
 8012a14:	0801a048 	.word	0x0801a048

08012a18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b084      	sub	sp, #16
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <ipfrag_free_pbuf_custom+0x20>
 8012a2a:	4b11      	ldr	r3, [pc, #68]	; (8012a70 <ipfrag_free_pbuf_custom+0x58>)
 8012a2c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012a30:	4910      	ldr	r1, [pc, #64]	; (8012a74 <ipfrag_free_pbuf_custom+0x5c>)
 8012a32:	4811      	ldr	r0, [pc, #68]	; (8012a78 <ipfrag_free_pbuf_custom+0x60>)
 8012a34:	f001 fa20 	bl	8013e78 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d006      	beq.n	8012a4e <ipfrag_free_pbuf_custom+0x36>
 8012a40:	4b0b      	ldr	r3, [pc, #44]	; (8012a70 <ipfrag_free_pbuf_custom+0x58>)
 8012a42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012a46:	490d      	ldr	r1, [pc, #52]	; (8012a7c <ipfrag_free_pbuf_custom+0x64>)
 8012a48:	480b      	ldr	r0, [pc, #44]	; (8012a78 <ipfrag_free_pbuf_custom+0x60>)
 8012a4a:	f001 fa15 	bl	8013e78 <iprintf>
  if (pcr->original != NULL) {
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	695b      	ldr	r3, [r3, #20]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d004      	beq.n	8012a60 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	695b      	ldr	r3, [r3, #20]
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7f5 fe76 	bl	800874c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f7ff ffbd 	bl	80129e0 <ip_frag_free_pbuf_custom_ref>
}
 8012a66:	bf00      	nop
 8012a68:	3710      	adds	r7, #16
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	0801a000 	.word	0x0801a000
 8012a74:	0801a1c4 	.word	0x0801a1c4
 8012a78:	0801a048 	.word	0x0801a048
 8012a7c:	0801a1d0 	.word	0x0801a1d0

08012a80 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b094      	sub	sp, #80	; 0x50
 8012a84:	af02      	add	r7, sp, #8
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a96:	3b14      	subs	r3, #20
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	da00      	bge.n	8012a9e <ip4_frag+0x1e>
 8012a9c:	3307      	adds	r3, #7
 8012a9e:	10db      	asrs	r3, r3, #3
 8012aa0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012aa2:	2314      	movs	r3, #20
 8012aa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	f003 030f 	and.w	r3, r3, #15
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	2b14      	cmp	r3, #20
 8012ac0:	d002      	beq.n	8012ac8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012ac2:	f06f 0305 	mvn.w	r3, #5
 8012ac6:	e110      	b.n	8012cea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	895b      	ldrh	r3, [r3, #10]
 8012acc:	2b13      	cmp	r3, #19
 8012ace:	d809      	bhi.n	8012ae4 <ip4_frag+0x64>
 8012ad0:	4b88      	ldr	r3, [pc, #544]	; (8012cf4 <ip4_frag+0x274>)
 8012ad2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012ad6:	4988      	ldr	r1, [pc, #544]	; (8012cf8 <ip4_frag+0x278>)
 8012ad8:	4888      	ldr	r0, [pc, #544]	; (8012cfc <ip4_frag+0x27c>)
 8012ada:	f001 f9cd 	bl	8013e78 <iprintf>
 8012ade:	f06f 0305 	mvn.w	r3, #5
 8012ae2:	e102      	b.n	8012cea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae6:	88db      	ldrh	r3, [r3, #6]
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7f4 fa30 	bl	8006f50 <lwip_htons>
 8012af0:	4603      	mov	r3, r0
 8012af2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012af4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012af6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012afa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012afe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012b04:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	891b      	ldrh	r3, [r3, #8]
 8012b0a:	3b14      	subs	r3, #20
 8012b0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012b10:	e0e1      	b.n	8012cd6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012b12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	bf28      	it	cs
 8012b20:	4613      	movcs	r3, r2
 8012b22:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012b24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b28:	2114      	movs	r1, #20
 8012b2a:	200e      	movs	r0, #14
 8012b2c:	f7f5 fb2a 	bl	8008184 <pbuf_alloc>
 8012b30:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f000 80d5 	beq.w	8012ce4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3c:	895b      	ldrh	r3, [r3, #10]
 8012b3e:	2b13      	cmp	r3, #19
 8012b40:	d806      	bhi.n	8012b50 <ip4_frag+0xd0>
 8012b42:	4b6c      	ldr	r3, [pc, #432]	; (8012cf4 <ip4_frag+0x274>)
 8012b44:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012b48:	496d      	ldr	r1, [pc, #436]	; (8012d00 <ip4_frag+0x280>)
 8012b4a:	486c      	ldr	r0, [pc, #432]	; (8012cfc <ip4_frag+0x27c>)
 8012b4c:	f001 f994 	bl	8013e78 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	2214      	movs	r2, #20
 8012b56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f001 fa78 	bl	801404e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012b64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012b6a:	e064      	b.n	8012c36 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	895a      	ldrh	r2, [r3, #10]
 8012b70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b72:	1ad3      	subs	r3, r2, r3
 8012b74:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	895b      	ldrh	r3, [r3, #10]
 8012b7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d906      	bls.n	8012b8e <ip4_frag+0x10e>
 8012b80:	4b5c      	ldr	r3, [pc, #368]	; (8012cf4 <ip4_frag+0x274>)
 8012b82:	f240 322d 	movw	r2, #813	; 0x32d
 8012b86:	495f      	ldr	r1, [pc, #380]	; (8012d04 <ip4_frag+0x284>)
 8012b88:	485c      	ldr	r0, [pc, #368]	; (8012cfc <ip4_frag+0x27c>)
 8012b8a:	f001 f975 	bl	8013e78 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012b8e:	8bfa      	ldrh	r2, [r7, #30]
 8012b90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b94:	4293      	cmp	r3, r2
 8012b96:	bf28      	it	cs
 8012b98:	4613      	movcs	r3, r2
 8012b9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012b9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d105      	bne.n	8012bb2 <ip4_frag+0x132>
        poff = 0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	60fb      	str	r3, [r7, #12]
        continue;
 8012bb0:	e041      	b.n	8012c36 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012bb2:	f7ff ff0d 	bl	80129d0 <ip_frag_alloc_pbuf_custom_ref>
 8012bb6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d103      	bne.n	8012bc6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bc0:	f7f5 fdc4 	bl	800874c <pbuf_free>
        goto memerr;
 8012bc4:	e08f      	b.n	8012ce6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012bc6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012bcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012bce:	4413      	add	r3, r2
 8012bd0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012bd4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012bd8:	9201      	str	r2, [sp, #4]
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2241      	movs	r2, #65	; 0x41
 8012be0:	2000      	movs	r0, #0
 8012be2:	f7f5 fbf9 	bl	80083d8 <pbuf_alloced_custom>
 8012be6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d106      	bne.n	8012bfc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012bee:	69b8      	ldr	r0, [r7, #24]
 8012bf0:	f7ff fef6 	bl	80129e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bf6:	f7f5 fda9 	bl	800874c <pbuf_free>
        goto memerr;
 8012bfa:	e074      	b.n	8012ce6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012bfc:	68f8      	ldr	r0, [r7, #12]
 8012bfe:	f7f5 fe4b 	bl	8008898 <pbuf_ref>
      pcr->original = p;
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	4a3f      	ldr	r2, [pc, #252]	; (8012d08 <ip4_frag+0x288>)
 8012c0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012c0e:	6979      	ldr	r1, [r7, #20]
 8012c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c12:	f7f5 fe69 	bl	80088e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012c16:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012c1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012c1e:	1ad3      	subs	r3, r2, r3
 8012c20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012c24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d004      	beq.n	8012c36 <ip4_frag+0x1b6>
        poff = 0;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012c36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d196      	bne.n	8012b6c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012c3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012c44:	4413      	add	r3, r2
 8012c46:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c4c:	f1a3 0213 	sub.w	r2, r3, #19
 8012c50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c54:	429a      	cmp	r2, r3
 8012c56:	bfcc      	ite	gt
 8012c58:	2301      	movgt	r3, #1
 8012c5a:	2300      	movle	r3, #0
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012c60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012c6a:	6a3b      	ldr	r3, [r7, #32]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d002      	beq.n	8012c76 <ip4_frag+0x1f6>
 8012c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d003      	beq.n	8012c7e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012c76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012c7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012c7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f4 f965 	bl	8006f50 <lwip_htons>
 8012c86:	4603      	mov	r3, r0
 8012c88:	461a      	mov	r2, r3
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c90:	3314      	adds	r3, #20
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7f4 f95b 	bl	8006f50 <lwip_htons>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	729a      	strb	r2, [r3, #10]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	695b      	ldr	r3, [r3, #20]
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012cb4:	68b8      	ldr	r0, [r7, #8]
 8012cb6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cba:	f7f5 fd47 	bl	800874c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012cbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012cca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012cce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012cd0:	4413      	add	r3, r2
 8012cd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012cd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	f47f af19 	bne.w	8012b12 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	e002      	b.n	8012cea <ip4_frag+0x26a>
      goto memerr;
 8012ce4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3748      	adds	r7, #72	; 0x48
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0801a000 	.word	0x0801a000
 8012cf8:	0801a1dc 	.word	0x0801a1dc
 8012cfc:	0801a048 	.word	0x0801a048
 8012d00:	0801a1f8 	.word	0x0801a1f8
 8012d04:	0801a218 	.word	0x0801a218
 8012d08:	08012a19 	.word	0x08012a19

08012d0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b086      	sub	sp, #24
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012d16:	230e      	movs	r3, #14
 8012d18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	895b      	ldrh	r3, [r3, #10]
 8012d1e:	2b0e      	cmp	r3, #14
 8012d20:	d96e      	bls.n	8012e00 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	7bdb      	ldrb	r3, [r3, #15]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d106      	bne.n	8012d38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d30:	3301      	adds	r3, #1
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	685b      	ldr	r3, [r3, #4]
 8012d3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	7b1a      	ldrb	r2, [r3, #12]
 8012d42:	7b5b      	ldrb	r3, [r3, #13]
 8012d44:	021b      	lsls	r3, r3, #8
 8012d46:	4313      	orrs	r3, r2
 8012d48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	f003 0301 	and.w	r3, r3, #1
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d023      	beq.n	8012d9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d10f      	bne.n	8012d7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	785b      	ldrb	r3, [r3, #1]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d11b      	bne.n	8012d9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d6a:	2b5e      	cmp	r3, #94	; 0x5e
 8012d6c:	d117      	bne.n	8012d9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	7b5b      	ldrb	r3, [r3, #13]
 8012d72:	f043 0310 	orr.w	r3, r3, #16
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	735a      	strb	r2, [r3, #13]
 8012d7c:	e00f      	b.n	8012d9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	2206      	movs	r2, #6
 8012d82:	4928      	ldr	r1, [pc, #160]	; (8012e24 <ethernet_input+0x118>)
 8012d84:	4618      	mov	r0, r3
 8012d86:	f001 f8cc 	bl	8013f22 <memcmp>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d106      	bne.n	8012d9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	7b5b      	ldrb	r3, [r3, #13]
 8012d94:	f043 0308 	orr.w	r3, r3, #8
 8012d98:	b2da      	uxtb	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012d9e:	89fb      	ldrh	r3, [r7, #14]
 8012da0:	2b08      	cmp	r3, #8
 8012da2:	d003      	beq.n	8012dac <ethernet_input+0xa0>
 8012da4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012da8:	d014      	beq.n	8012dd4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012daa:	e032      	b.n	8012e12 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012db2:	f003 0308 	and.w	r3, r3, #8
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d024      	beq.n	8012e04 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012dba:	8afb      	ldrh	r3, [r7, #22]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f7f5 fc3e 	bl	8008640 <pbuf_remove_header>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d11e      	bne.n	8012e08 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012dca:	6839      	ldr	r1, [r7, #0]
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7fe ff03 	bl	8011bd8 <ip4_input>
      break;
 8012dd2:	e013      	b.n	8012dfc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012dda:	f003 0308 	and.w	r3, r3, #8
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d014      	beq.n	8012e0c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012de2:	8afb      	ldrh	r3, [r7, #22]
 8012de4:	4619      	mov	r1, r3
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7f5 fc2a 	bl	8008640 <pbuf_remove_header>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d10e      	bne.n	8012e10 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012df2:	6839      	ldr	r1, [r7, #0]
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7fe f89f 	bl	8010f38 <etharp_input>
      break;
 8012dfa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	e00c      	b.n	8012e1a <ethernet_input+0x10e>
    goto free_and_return;
 8012e00:	bf00      	nop
 8012e02:	e006      	b.n	8012e12 <ethernet_input+0x106>
        goto free_and_return;
 8012e04:	bf00      	nop
 8012e06:	e004      	b.n	8012e12 <ethernet_input+0x106>
        goto free_and_return;
 8012e08:	bf00      	nop
 8012e0a:	e002      	b.n	8012e12 <ethernet_input+0x106>
        goto free_and_return;
 8012e0c:	bf00      	nop
 8012e0e:	e000      	b.n	8012e12 <ethernet_input+0x106>
        goto free_and_return;
 8012e10:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7f5 fc9a 	bl	800874c <pbuf_free>
  return ERR_OK;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3718      	adds	r7, #24
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	0801a40c 	.word	0x0801a40c

08012e28 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b086      	sub	sp, #24
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
 8012e34:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012e36:	8c3b      	ldrh	r3, [r7, #32]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f4 f889 	bl	8006f50 <lwip_htons>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012e42:	210e      	movs	r1, #14
 8012e44:	68b8      	ldr	r0, [r7, #8]
 8012e46:	f7f5 fbeb 	bl	8008620 <pbuf_add_header>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d125      	bne.n	8012e9c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	8afa      	ldrh	r2, [r7, #22]
 8012e5a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	2206      	movs	r2, #6
 8012e60:	6839      	ldr	r1, [r7, #0]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f001 f8f3 	bl	801404e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	3306      	adds	r3, #6
 8012e6c:	2206      	movs	r2, #6
 8012e6e:	6879      	ldr	r1, [r7, #4]
 8012e70:	4618      	mov	r0, r3
 8012e72:	f001 f8ec 	bl	801404e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e7c:	2b06      	cmp	r3, #6
 8012e7e:	d006      	beq.n	8012e8e <ethernet_output+0x66>
 8012e80:	4b0a      	ldr	r3, [pc, #40]	; (8012eac <ethernet_output+0x84>)
 8012e82:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012e86:	490a      	ldr	r1, [pc, #40]	; (8012eb0 <ethernet_output+0x88>)
 8012e88:	480a      	ldr	r0, [pc, #40]	; (8012eb4 <ethernet_output+0x8c>)
 8012e8a:	f000 fff5 	bl	8013e78 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	68b9      	ldr	r1, [r7, #8]
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	4798      	blx	r3
 8012e98:	4603      	mov	r3, r0
 8012e9a:	e002      	b.n	8012ea2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012e9c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012e9e:	f06f 0301 	mvn.w	r3, #1
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3718      	adds	r7, #24
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	0801a228 	.word	0x0801a228
 8012eb0:	0801a260 	.word	0x0801a260
 8012eb4:	0801a294 	.word	0x0801a294

08012eb8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b086      	sub	sp, #24
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	60bb      	str	r3, [r7, #8]
 8012ec6:	2304      	movs	r3, #4
 8012ec8:	60fb      	str	r3, [r7, #12]
 8012eca:	2300      	movs	r3, #0
 8012ecc:	613b      	str	r3, [r7, #16]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012ed2:	f107 0308 	add.w	r3, r7, #8
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7f1 f987 	bl	80041ec <osMessageCreate>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d102      	bne.n	8012ef2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012eec:	f04f 33ff 	mov.w	r3, #4294967295
 8012ef0:	e000      	b.n	8012ef4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8012ef2:	2300      	movs	r3, #0
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3718      	adds	r7, #24
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	6839      	ldr	r1, [r7, #0]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f1 f994 	bl	800423c <osMessagePut>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d102      	bne.n	8012f20 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	73fb      	strb	r3, [r7, #15]
 8012f1e:	e001      	b.n	8012f24 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012f20:	23ff      	movs	r3, #255	; 0xff
 8012f22:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b08c      	sub	sp, #48	; 0x30
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	61f8      	str	r0, [r7, #28]
 8012f38:	61b9      	str	r1, [r7, #24]
 8012f3a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012f3c:	f7f0 ffc6 	bl	8003ecc <osKernelSysTick>
 8012f40:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d017      	beq.n	8012f78 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	6819      	ldr	r1, [r3, #0]
 8012f4c:	f107 0320 	add.w	r3, r7, #32
 8012f50:	697a      	ldr	r2, [r7, #20]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7f1 f9b2 	bl	80042bc <osMessageGet>

    if(event.status == osEventMessage)
 8012f58:	6a3b      	ldr	r3, [r7, #32]
 8012f5a:	2b10      	cmp	r3, #16
 8012f5c:	d109      	bne.n	8012f72 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f60:	461a      	mov	r2, r3
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012f66:	f7f0 ffb1 	bl	8003ecc <osKernelSysTick>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6e:	1ad3      	subs	r3, r2, r3
 8012f70:	e019      	b.n	8012fa6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012f72:	f04f 33ff 	mov.w	r3, #4294967295
 8012f76:	e016      	b.n	8012fa6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	6819      	ldr	r1, [r3, #0]
 8012f7c:	463b      	mov	r3, r7
 8012f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7f1 f99a 	bl	80042bc <osMessageGet>
 8012f88:	f107 0320 	add.w	r3, r7, #32
 8012f8c:	463a      	mov	r2, r7
 8012f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	461a      	mov	r2, r3
 8012f98:	69bb      	ldr	r3, [r7, #24]
 8012f9a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012f9c:	f7f0 ff96 	bl	8003ecc <osKernelSysTick>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3730      	adds	r7, #48	; 0x30
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012fae:	b480      	push	{r7}
 8012fb0:	b083      	sub	sp, #12
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d101      	bne.n	8012fc2 <sys_mbox_valid+0x14>
    return 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e000      	b.n	8012fc4 <sys_mbox_valid+0x16>
  else
    return 1;
 8012fc2:	2301      	movs	r3, #1
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	370c      	adds	r7, #12
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr

08012fd0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012fd4:	4803      	ldr	r0, [pc, #12]	; (8012fe4 <sys_init+0x14>)
 8012fd6:	f7f0 ffe9 	bl	8003fac <osMutexCreate>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	4a02      	ldr	r2, [pc, #8]	; (8012fe8 <sys_init+0x18>)
 8012fde:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012fe0:	bf00      	nop
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	0801a41c 	.word	0x0801a41c
 8012fe8:	2000c5ac 	.word	0x2000c5ac

08012fec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	60bb      	str	r3, [r7, #8]
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012ffc:	f107 0308 	add.w	r3, r7, #8
 8013000:	4618      	mov	r0, r3
 8013002:	f7f0 ffd3 	bl	8003fac <osMutexCreate>
 8013006:	4602      	mov	r2, r0
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d102      	bne.n	801301a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013014:	f04f 33ff 	mov.w	r3, #4294967295
 8013018:	e000      	b.n	801301c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801301a:	2300      	movs	r3, #0
}
 801301c:	4618      	mov	r0, r3
 801301e:	3710      	adds	r7, #16
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f04f 31ff 	mov.w	r1, #4294967295
 8013034:	4618      	mov	r0, r3
 8013036:	f7f0 ffd1 	bl	8003fdc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b082      	sub	sp, #8
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	4618      	mov	r0, r3
 8013050:	f7f1 f812 	bl	8004078 <osMutexRelease>
}
 8013054:	bf00      	nop
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08c      	sub	sp, #48	; 0x30
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801306a:	f107 0314 	add.w	r3, r7, #20
 801306e:	2200      	movs	r2, #0
 8013070:	601a      	str	r2, [r3, #0]
 8013072:	605a      	str	r2, [r3, #4]
 8013074:	609a      	str	r2, [r3, #8]
 8013076:	60da      	str	r2, [r3, #12]
 8013078:	611a      	str	r2, [r3, #16]
 801307a:	615a      	str	r2, [r3, #20]
 801307c:	619a      	str	r2, [r3, #24]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	617b      	str	r3, [r7, #20]
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	61bb      	str	r3, [r7, #24]
 8013086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013088:	b21b      	sxth	r3, r3
 801308a:	83bb      	strh	r3, [r7, #28]
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013090:	f107 0314 	add.w	r3, r7, #20
 8013094:	6879      	ldr	r1, [r7, #4]
 8013096:	4618      	mov	r0, r3
 8013098:	f7f0 ff28 	bl	8003eec <osThreadCreate>
 801309c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3730      	adds	r7, #48	; 0x30
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
	...

080130a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80130ac:	4b04      	ldr	r3, [pc, #16]	; (80130c0 <sys_arch_protect+0x18>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	f04f 31ff 	mov.w	r1, #4294967295
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7f0 ff91 	bl	8003fdc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80130ba:	2301      	movs	r3, #1
}
 80130bc:	4618      	mov	r0, r3
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	2000c5ac 	.word	0x2000c5ac

080130c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80130cc:	4b04      	ldr	r3, [pc, #16]	; (80130e0 <sys_arch_unprotect+0x1c>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7f0 ffd1 	bl	8004078 <osMutexRelease>
}
 80130d6:	bf00      	nop
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	2000c5ac 	.word	0x2000c5ac

080130e4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80130ea:	4b26      	ldr	r3, [pc, #152]	; (8013184 <_DoInit+0xa0>)
 80130ec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80130ee:	22a8      	movs	r2, #168	; 0xa8
 80130f0:	2100      	movs	r1, #0
 80130f2:	6838      	ldr	r0, [r7, #0]
 80130f4:	f000 ff25 	bl	8013f42 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	2203      	movs	r2, #3
 80130fc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	2203      	movs	r2, #3
 8013102:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	4a20      	ldr	r2, [pc, #128]	; (8013188 <_DoInit+0xa4>)
 8013108:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	4a1f      	ldr	r2, [pc, #124]	; (801318c <_DoInit+0xa8>)
 801310e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013116:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	2200      	movs	r2, #0
 801311c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	2200      	movs	r2, #0
 8013122:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	2200      	movs	r2, #0
 8013128:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	4a16      	ldr	r2, [pc, #88]	; (8013188 <_DoInit+0xa4>)
 801312e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	4a17      	ldr	r2, [pc, #92]	; (8013190 <_DoInit+0xac>)
 8013134:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	2210      	movs	r2, #16
 801313a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	2200      	movs	r2, #0
 8013140:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	2200      	movs	r2, #0
 8013146:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2200      	movs	r2, #0
 801314c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 801314e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8013152:	2300      	movs	r3, #0
 8013154:	607b      	str	r3, [r7, #4]
 8013156:	e00c      	b.n	8013172 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f1c3 030f 	rsb	r3, r3, #15
 801315e:	4a0d      	ldr	r2, [pc, #52]	; (8013194 <_DoInit+0xb0>)
 8013160:	5cd1      	ldrb	r1, [r2, r3]
 8013162:	683a      	ldr	r2, [r7, #0]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	4413      	add	r3, r2
 8013168:	460a      	mov	r2, r1
 801316a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	3301      	adds	r3, #1
 8013170:	607b      	str	r3, [r7, #4]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2b0f      	cmp	r3, #15
 8013176:	d9ef      	bls.n	8013158 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8013178:	f3bf 8f5f 	dmb	sy
}
 801317c:	bf00      	nop
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	2000c5b0 	.word	0x2000c5b0
 8013188:	0801a2bc 	.word	0x0801a2bc
 801318c:	2000c658 	.word	0x2000c658
 8013190:	2000ca58 	.word	0x2000ca58
 8013194:	0801a424 	.word	0x0801a424

08013198 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8013198:	b580      	push	{r7, lr}
 801319a:	b08a      	sub	sp, #40	; 0x28
 801319c:	af00      	add	r7, sp, #0
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	60b9      	str	r1, [r7, #8]
 80131a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80131a4:	2300      	movs	r3, #0
 80131a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68db      	ldr	r3, [r3, #12]
 80131ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	691b      	ldr	r3, [r3, #16]
 80131b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80131b4:	69ba      	ldr	r2, [r7, #24]
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d905      	bls.n	80131c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80131bc:	69ba      	ldr	r2, [r7, #24]
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	3b01      	subs	r3, #1
 80131c4:	627b      	str	r3, [r7, #36]	; 0x24
 80131c6:	e007      	b.n	80131d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	689a      	ldr	r2, [r3, #8]
 80131cc:	69b9      	ldr	r1, [r7, #24]
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	1acb      	subs	r3, r1, r3
 80131d2:	4413      	add	r3, r2
 80131d4:	3b01      	subs	r3, #1
 80131d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	689a      	ldr	r2, [r3, #8]
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131e2:	4293      	cmp	r3, r2
 80131e4:	bf28      	it	cs
 80131e6:	4613      	movcs	r3, r2
 80131e8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80131ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4293      	cmp	r3, r2
 80131f0:	bf28      	it	cs
 80131f2:	4613      	movcs	r3, r2
 80131f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	685a      	ldr	r2, [r3, #4]
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	4413      	add	r3, r2
 80131fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8013200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013202:	68b9      	ldr	r1, [r7, #8]
 8013204:	6978      	ldr	r0, [r7, #20]
 8013206:	f000 ff22 	bl	801404e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 801320a:	6a3a      	ldr	r2, [r7, #32]
 801320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320e:	4413      	add	r3, r2
 8013210:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	4413      	add	r3, r2
 8013218:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321e:	1ad3      	subs	r3, r2, r3
 8013220:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8013222:	69fa      	ldr	r2, [r7, #28]
 8013224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013226:	4413      	add	r3, r2
 8013228:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	689b      	ldr	r3, [r3, #8]
 801322e:	69fa      	ldr	r2, [r7, #28]
 8013230:	429a      	cmp	r2, r3
 8013232:	d101      	bne.n	8013238 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8013234:	2300      	movs	r3, #0
 8013236:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8013238:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	69fa      	ldr	r2, [r7, #28]
 8013240:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d1b2      	bne.n	80131ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8013248:	6a3b      	ldr	r3, [r7, #32]
}
 801324a:	4618      	mov	r0, r3
 801324c:	3728      	adds	r7, #40	; 0x28
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8013252:	b580      	push	{r7, lr}
 8013254:	b088      	sub	sp, #32
 8013256:	af00      	add	r7, sp, #0
 8013258:	60f8      	str	r0, [r7, #12]
 801325a:	60b9      	str	r1, [r7, #8]
 801325c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	68db      	ldr	r3, [r3, #12]
 8013262:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	689a      	ldr	r2, [r3, #8]
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 801326e:	69ba      	ldr	r2, [r7, #24]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	429a      	cmp	r2, r3
 8013274:	d911      	bls.n	801329a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	685a      	ldr	r2, [r3, #4]
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	4413      	add	r3, r2
 801327e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	68b9      	ldr	r1, [r7, #8]
 8013284:	6938      	ldr	r0, [r7, #16]
 8013286:	f000 fee2 	bl	801404e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801328a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 801328e:	69fa      	ldr	r2, [r7, #28]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	441a      	add	r2, r3
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8013298:	e01f      	b.n	80132da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	685a      	ldr	r2, [r3, #4]
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	4413      	add	r3, r2
 80132a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80132a8:	697a      	ldr	r2, [r7, #20]
 80132aa:	68b9      	ldr	r1, [r7, #8]
 80132ac:	6938      	ldr	r0, [r7, #16]
 80132ae:	f000 fece 	bl	801404e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	1ad3      	subs	r3, r2, r3
 80132b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	4413      	add	r3, r2
 80132c6:	697a      	ldr	r2, [r7, #20]
 80132c8:	4619      	mov	r1, r3
 80132ca:	6938      	ldr	r0, [r7, #16]
 80132cc:	f000 febf 	bl	801404e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80132d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	697a      	ldr	r2, [r7, #20]
 80132d8:	60da      	str	r2, [r3, #12]
}
 80132da:	bf00      	nop
 80132dc:	3720      	adds	r7, #32
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80132e2:	b480      	push	{r7}
 80132e4:	b087      	sub	sp, #28
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	691b      	ldr	r3, [r3, #16]
 80132ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80132f6:	693a      	ldr	r2, [r7, #16]
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d808      	bhi.n	8013310 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	689a      	ldr	r2, [r3, #8]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	1ad2      	subs	r2, r2, r3
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	4413      	add	r3, r2
 801330a:	3b01      	subs	r3, #1
 801330c:	617b      	str	r3, [r7, #20]
 801330e:	e004      	b.n	801331a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	3b01      	subs	r3, #1
 8013318:	617b      	str	r3, [r7, #20]
  }
  return r;
 801331a:	697b      	ldr	r3, [r7, #20]
}
 801331c:	4618      	mov	r0, r3
 801331e:	371c      	adds	r7, #28
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8013328:	b580      	push	{r7, lr}
 801332a:	b088      	sub	sp, #32
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	1c5a      	adds	r2, r3, #1
 801333c:	4613      	mov	r3, r2
 801333e:	005b      	lsls	r3, r3, #1
 8013340:	4413      	add	r3, r2
 8013342:	00db      	lsls	r3, r3, #3
 8013344:	4a1f      	ldr	r2, [pc, #124]	; (80133c4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8013346:	4413      	add	r3, r2
 8013348:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	695b      	ldr	r3, [r3, #20]
 801334e:	2b02      	cmp	r3, #2
 8013350:	d029      	beq.n	80133a6 <SEGGER_RTT_WriteNoLock+0x7e>
 8013352:	2b02      	cmp	r3, #2
 8013354:	d82e      	bhi.n	80133b4 <SEGGER_RTT_WriteNoLock+0x8c>
 8013356:	2b00      	cmp	r3, #0
 8013358:	d002      	beq.n	8013360 <SEGGER_RTT_WriteNoLock+0x38>
 801335a:	2b01      	cmp	r3, #1
 801335c:	d013      	beq.n	8013386 <SEGGER_RTT_WriteNoLock+0x5e>
 801335e:	e029      	b.n	80133b4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8013360:	6978      	ldr	r0, [r7, #20]
 8013362:	f7ff ffbe 	bl	80132e2 <_GetAvailWriteSpace>
 8013366:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8013368:	693a      	ldr	r2, [r7, #16]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	429a      	cmp	r2, r3
 801336e:	d202      	bcs.n	8013376 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8013370:	2300      	movs	r3, #0
 8013372:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8013374:	e021      	b.n	80133ba <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	69b9      	ldr	r1, [r7, #24]
 801337e:	6978      	ldr	r0, [r7, #20]
 8013380:	f7ff ff67 	bl	8013252 <_WriteNoCheck>
    break;
 8013384:	e019      	b.n	80133ba <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8013386:	6978      	ldr	r0, [r7, #20]
 8013388:	f7ff ffab 	bl	80132e2 <_GetAvailWriteSpace>
 801338c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	4293      	cmp	r3, r2
 8013394:	bf28      	it	cs
 8013396:	4613      	movcs	r3, r2
 8013398:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 801339a:	69fa      	ldr	r2, [r7, #28]
 801339c:	69b9      	ldr	r1, [r7, #24]
 801339e:	6978      	ldr	r0, [r7, #20]
 80133a0:	f7ff ff57 	bl	8013252 <_WriteNoCheck>
    break;
 80133a4:	e009      	b.n	80133ba <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	69b9      	ldr	r1, [r7, #24]
 80133aa:	6978      	ldr	r0, [r7, #20]
 80133ac:	f7ff fef4 	bl	8013198 <_WriteBlocking>
 80133b0:	61f8      	str	r0, [r7, #28]
    break;
 80133b2:	e002      	b.n	80133ba <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80133b4:	2300      	movs	r3, #0
 80133b6:	61fb      	str	r3, [r7, #28]
    break;
 80133b8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80133ba:	69fb      	ldr	r3, [r7, #28]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3720      	adds	r7, #32
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	2000c5b0 	.word	0x2000c5b0

080133c8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b088      	sub	sp, #32
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80133d4:	4b0e      	ldr	r3, [pc, #56]	; (8013410 <SEGGER_RTT_Write+0x48>)
 80133d6:	61fb      	str	r3, [r7, #28]
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d101      	bne.n	80133e6 <SEGGER_RTT_Write+0x1e>
 80133e2:	f7ff fe7f 	bl	80130e4 <_DoInit>
  SEGGER_RTT_LOCK();
 80133e6:	f3ef 8311 	mrs	r3, BASEPRI
 80133ea:	f04f 0120 	mov.w	r1, #32
 80133ee:	f381 8811 	msr	BASEPRI, r1
 80133f2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	68b9      	ldr	r1, [r7, #8]
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f7ff ff95 	bl	8013328 <SEGGER_RTT_WriteNoLock>
 80133fe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8013406:	697b      	ldr	r3, [r7, #20]
}
 8013408:	4618      	mov	r0, r3
 801340a:	3720      	adds	r7, #32
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	2000c5b0 	.word	0x2000c5b0

08013414 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	460b      	mov	r3, r1
 801341e:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	1c5a      	adds	r2, r3, #1
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	429a      	cmp	r2, r3
 8013430:	d80e      	bhi.n	8013450 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	4413      	add	r3, r2
 801343a:	78fa      	ldrb	r2, [r7, #3]
 801343c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	1c5a      	adds	r2, r3, #1
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	1c5a      	adds	r2, r3, #1
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	689a      	ldr	r2, [r3, #8]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	429a      	cmp	r2, r3
 801345a:	d115      	bne.n	8013488 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6918      	ldr	r0, [r3, #16]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6819      	ldr	r1, [r3, #0]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	461a      	mov	r2, r3
 801346a:	f7ff ffad 	bl	80133c8 <SEGGER_RTT_Write>
 801346e:	4602      	mov	r2, r0
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	429a      	cmp	r2, r3
 8013476:	d004      	beq.n	8013482 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f04f 32ff 	mov.w	r2, #4294967295
 801347e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8013480:	e002      	b.n	8013488 <_StoreChar+0x74>
      p->Cnt = 0u;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2200      	movs	r2, #0
 8013486:	609a      	str	r2, [r3, #8]
}
 8013488:	bf00      	nop
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8013490:	b580      	push	{r7, lr}
 8013492:	b08a      	sub	sp, #40	; 0x28
 8013494:	af00      	add	r7, sp, #0
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	607a      	str	r2, [r7, #4]
 801349c:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80134a2:	2301      	movs	r3, #1
 80134a4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80134a6:	2301      	movs	r3, #1
 80134a8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80134aa:	e007      	b.n	80134bc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80134ac:	6a3a      	ldr	r2, [r7, #32]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80134b4:	623b      	str	r3, [r7, #32]
    Width++;
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	3301      	adds	r3, #1
 80134ba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80134bc:	6a3a      	ldr	r2, [r7, #32]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d2f3      	bcs.n	80134ac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80134c4:	683a      	ldr	r2, [r7, #0]
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d901      	bls.n	80134d0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80134d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d2:	f003 0301 	and.w	r3, r3, #1
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d125      	bne.n	8013526 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80134da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d022      	beq.n	8013526 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80134e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e2:	f003 0302 	and.w	r3, r3, #2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d005      	beq.n	80134f6 <_PrintUnsigned+0x66>
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <_PrintUnsigned+0x66>
        c = '0';
 80134f0:	2330      	movs	r3, #48	; 0x30
 80134f2:	76fb      	strb	r3, [r7, #27]
 80134f4:	e001      	b.n	80134fa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80134f6:	2320      	movs	r3, #32
 80134f8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80134fa:	e00b      	b.n	8013514 <_PrintUnsigned+0x84>
        FieldWidth--;
 80134fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fe:	3b01      	subs	r3, #1
 8013500:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8013502:	7efb      	ldrb	r3, [r7, #27]
 8013504:	4619      	mov	r1, r3
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f7ff ff84 	bl	8013414 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	db07      	blt.n	8013524 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8013514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013516:	2b00      	cmp	r3, #0
 8013518:	d005      	beq.n	8013526 <_PrintUnsigned+0x96>
 801351a:	69fa      	ldr	r2, [r7, #28]
 801351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351e:	429a      	cmp	r2, r3
 8013520:	d3ec      	bcc.n	80134fc <_PrintUnsigned+0x6c>
 8013522:	e000      	b.n	8013526 <_PrintUnsigned+0x96>
          break;
 8013524:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	2b00      	cmp	r3, #0
 801352c:	db55      	blt.n	80135da <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	2b01      	cmp	r3, #1
 8013532:	d903      	bls.n	801353c <_PrintUnsigned+0xac>
        NumDigits--;
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	3b01      	subs	r3, #1
 8013538:	603b      	str	r3, [r7, #0]
 801353a:	e009      	b.n	8013550 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013540:	fbb2 f3f3 	udiv	r3, r2, r3
 8013544:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8013546:	697a      	ldr	r2, [r7, #20]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	429a      	cmp	r2, r3
 801354c:	d200      	bcs.n	8013550 <_PrintUnsigned+0xc0>
          break;
 801354e:	e005      	b.n	801355c <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8013550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	fb02 f303 	mul.w	r3, r2, r3
 8013558:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801355a:	e7e8      	b.n	801352e <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 801355c:	68ba      	ldr	r2, [r7, #8]
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	fbb2 f3f3 	udiv	r3, r2, r3
 8013564:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801356a:	fb02 f303 	mul.w	r3, r2, r3
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8013574:	4a1b      	ldr	r2, [pc, #108]	; (80135e4 <_PrintUnsigned+0x154>)
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	4413      	add	r3, r2
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	4619      	mov	r1, r3
 801357e:	68f8      	ldr	r0, [r7, #12]
 8013580:	f7ff ff48 	bl	8013414 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	2b00      	cmp	r3, #0
 801358a:	db08      	blt.n	801359e <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 801358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	fbb2 f3f3 	udiv	r3, r2, r3
 8013594:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8013596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1df      	bne.n	801355c <_PrintUnsigned+0xcc>
 801359c:	e000      	b.n	80135a0 <_PrintUnsigned+0x110>
        break;
 801359e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80135a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a2:	f003 0301 	and.w	r3, r3, #1
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d017      	beq.n	80135da <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80135aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d014      	beq.n	80135da <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80135b0:	e00a      	b.n	80135c8 <_PrintUnsigned+0x138>
          FieldWidth--;
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	3b01      	subs	r3, #1
 80135b6:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80135b8:	2120      	movs	r1, #32
 80135ba:	68f8      	ldr	r0, [r7, #12]
 80135bc:	f7ff ff2a 	bl	8013414 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	db07      	blt.n	80135d8 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80135c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d005      	beq.n	80135da <_PrintUnsigned+0x14a>
 80135ce:	69fa      	ldr	r2, [r7, #28]
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d3ed      	bcc.n	80135b2 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80135d6:	e000      	b.n	80135da <_PrintUnsigned+0x14a>
            break;
 80135d8:	bf00      	nop
}
 80135da:	bf00      	nop
 80135dc:	3728      	adds	r7, #40	; 0x28
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	0801a438 	.word	0x0801a438

080135e8 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b088      	sub	sp, #32
 80135ec:	af02      	add	r7, sp, #8
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
 80135f4:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	bfb8      	it	lt
 80135fc:	425b      	neglt	r3, r3
 80135fe:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8013600:	2301      	movs	r3, #1
 8013602:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8013604:	e007      	b.n	8013616 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	693a      	ldr	r2, [r7, #16]
 801360a:	fb92 f3f3 	sdiv	r3, r2, r3
 801360e:	613b      	str	r3, [r7, #16]
    Width++;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	3301      	adds	r3, #1
 8013614:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	693a      	ldr	r2, [r7, #16]
 801361a:	429a      	cmp	r2, r3
 801361c:	daf3      	bge.n	8013606 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 801361e:	683a      	ldr	r2, [r7, #0]
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	429a      	cmp	r2, r3
 8013624:	d901      	bls.n	801362a <_PrintInt+0x42>
    Width = NumDigits;
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 801362a:	6a3b      	ldr	r3, [r7, #32]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00a      	beq.n	8013646 <_PrintInt+0x5e>
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	2b00      	cmp	r3, #0
 8013634:	db04      	blt.n	8013640 <_PrintInt+0x58>
 8013636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013638:	f003 0304 	and.w	r3, r3, #4
 801363c:	2b00      	cmp	r3, #0
 801363e:	d002      	beq.n	8013646 <_PrintInt+0x5e>
    FieldWidth--;
 8013640:	6a3b      	ldr	r3, [r7, #32]
 8013642:	3b01      	subs	r3, #1
 8013644:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8013646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013648:	f003 0302 	and.w	r3, r3, #2
 801364c:	2b00      	cmp	r3, #0
 801364e:	d002      	beq.n	8013656 <_PrintInt+0x6e>
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d01c      	beq.n	8013690 <_PrintInt+0xa8>
 8013656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013658:	f003 0301 	and.w	r3, r3, #1
 801365c:	2b00      	cmp	r3, #0
 801365e:	d117      	bne.n	8013690 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8013660:	6a3b      	ldr	r3, [r7, #32]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d014      	beq.n	8013690 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8013666:	e00a      	b.n	801367e <_PrintInt+0x96>
        FieldWidth--;
 8013668:	6a3b      	ldr	r3, [r7, #32]
 801366a:	3b01      	subs	r3, #1
 801366c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 801366e:	2120      	movs	r1, #32
 8013670:	68f8      	ldr	r0, [r7, #12]
 8013672:	f7ff fecf 	bl	8013414 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	68db      	ldr	r3, [r3, #12]
 801367a:	2b00      	cmp	r3, #0
 801367c:	db07      	blt.n	801368e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801367e:	6a3b      	ldr	r3, [r7, #32]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d005      	beq.n	8013690 <_PrintInt+0xa8>
 8013684:	697a      	ldr	r2, [r7, #20]
 8013686:	6a3b      	ldr	r3, [r7, #32]
 8013688:	429a      	cmp	r2, r3
 801368a:	d3ed      	bcc.n	8013668 <_PrintInt+0x80>
 801368c:	e000      	b.n	8013690 <_PrintInt+0xa8>
          break;
 801368e:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	db4a      	blt.n	801372e <_PrintInt+0x146>
    if (v < 0) {
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	2b00      	cmp	r3, #0
 801369c:	da07      	bge.n	80136ae <_PrintInt+0xc6>
      v = -v;
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	425b      	negs	r3, r3
 80136a2:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80136a4:	212d      	movs	r1, #45	; 0x2d
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7ff feb4 	bl	8013414 <_StoreChar>
 80136ac:	e008      	b.n	80136c0 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80136ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b0:	f003 0304 	and.w	r3, r3, #4
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d003      	beq.n	80136c0 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80136b8:	212b      	movs	r1, #43	; 0x2b
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	f7ff feaa 	bl	8013414 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	db32      	blt.n	801372e <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80136c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ca:	f003 0302 	and.w	r3, r3, #2
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d01f      	beq.n	8013712 <_PrintInt+0x12a>
 80136d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d4:	f003 0301 	and.w	r3, r3, #1
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d11a      	bne.n	8013712 <_PrintInt+0x12a>
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d117      	bne.n	8013712 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80136e2:	6a3b      	ldr	r3, [r7, #32]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d014      	beq.n	8013712 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80136e8:	e00a      	b.n	8013700 <_PrintInt+0x118>
            FieldWidth--;
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	3b01      	subs	r3, #1
 80136ee:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80136f0:	2130      	movs	r1, #48	; 0x30
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f7ff fe8e 	bl	8013414 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	db07      	blt.n	8013710 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8013700:	6a3b      	ldr	r3, [r7, #32]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d005      	beq.n	8013712 <_PrintInt+0x12a>
 8013706:	697a      	ldr	r2, [r7, #20]
 8013708:	6a3b      	ldr	r3, [r7, #32]
 801370a:	429a      	cmp	r2, r3
 801370c:	d3ed      	bcc.n	80136ea <_PrintInt+0x102>
 801370e:	e000      	b.n	8013712 <_PrintInt+0x12a>
              break;
 8013710:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	db09      	blt.n	801372e <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 801371a:	68b9      	ldr	r1, [r7, #8]
 801371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371e:	9301      	str	r3, [sp, #4]
 8013720:	6a3b      	ldr	r3, [r7, #32]
 8013722:	9300      	str	r3, [sp, #0]
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	68f8      	ldr	r0, [r7, #12]
 801372a:	f7ff feb1 	bl	8013490 <_PrintUnsigned>
      }
    }
  }
}
 801372e:	bf00      	nop
 8013730:	3718      	adds	r7, #24
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
	...

08013738 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8013738:	b580      	push	{r7, lr}
 801373a:	b0a2      	sub	sp, #136	; 0x88
 801373c:	af02      	add	r7, sp, #8
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8013744:	f107 0310 	add.w	r3, r7, #16
 8013748:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 801374a:	2340      	movs	r3, #64	; 0x40
 801374c:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 801374e:	2300      	movs	r3, #0
 8013750:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8013756:	2300      	movs	r3, #0
 8013758:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	3301      	adds	r3, #1
 8013766:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8013768:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801376c:	2b00      	cmp	r3, #0
 801376e:	f000 819f 	beq.w	8013ab0 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8013772:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013776:	2b25      	cmp	r3, #37	; 0x25
 8013778:	f040 818d 	bne.w	8013a96 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 801377c:	2300      	movs	r3, #0
 801377e:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8013780:	2301      	movs	r3, #1
 8013782:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 801378c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013790:	3b23      	subs	r3, #35	; 0x23
 8013792:	2b0d      	cmp	r3, #13
 8013794:	d83e      	bhi.n	8013814 <SEGGER_RTT_vprintf+0xdc>
 8013796:	a201      	add	r2, pc, #4	; (adr r2, 801379c <SEGGER_RTT_vprintf+0x64>)
 8013798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801379c:	08013805 	.word	0x08013805
 80137a0:	08013815 	.word	0x08013815
 80137a4:	08013815 	.word	0x08013815
 80137a8:	08013815 	.word	0x08013815
 80137ac:	08013815 	.word	0x08013815
 80137b0:	08013815 	.word	0x08013815
 80137b4:	08013815 	.word	0x08013815
 80137b8:	08013815 	.word	0x08013815
 80137bc:	080137f5 	.word	0x080137f5
 80137c0:	08013815 	.word	0x08013815
 80137c4:	080137d5 	.word	0x080137d5
 80137c8:	08013815 	.word	0x08013815
 80137cc:	08013815 	.word	0x08013815
 80137d0:	080137e5 	.word	0x080137e5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80137d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137d6:	f043 0301 	orr.w	r3, r3, #1
 80137da:	673b      	str	r3, [r7, #112]	; 0x70
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	3301      	adds	r3, #1
 80137e0:	60bb      	str	r3, [r7, #8]
 80137e2:	e01a      	b.n	801381a <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80137e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137e6:	f043 0302 	orr.w	r3, r3, #2
 80137ea:	673b      	str	r3, [r7, #112]	; 0x70
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	3301      	adds	r3, #1
 80137f0:	60bb      	str	r3, [r7, #8]
 80137f2:	e012      	b.n	801381a <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80137f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137f6:	f043 0304 	orr.w	r3, r3, #4
 80137fa:	673b      	str	r3, [r7, #112]	; 0x70
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	3301      	adds	r3, #1
 8013800:	60bb      	str	r3, [r7, #8]
 8013802:	e00a      	b.n	801381a <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8013804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013806:	f043 0308 	orr.w	r3, r3, #8
 801380a:	673b      	str	r3, [r7, #112]	; 0x70
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	3301      	adds	r3, #1
 8013810:	60bb      	str	r3, [r7, #8]
 8013812:	e002      	b.n	801381a <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8013814:	2300      	movs	r3, #0
 8013816:	67bb      	str	r3, [r7, #120]	; 0x78
 8013818:	bf00      	nop
        }
      } while (v);
 801381a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801381c:	2b00      	cmp	r3, #0
 801381e:	d1b1      	bne.n	8013784 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8013820:	2300      	movs	r3, #0
 8013822:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 801382c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013830:	2b2f      	cmp	r3, #47	; 0x2f
 8013832:	d912      	bls.n	801385a <SEGGER_RTT_vprintf+0x122>
 8013834:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013838:	2b39      	cmp	r3, #57	; 0x39
 801383a:	d80e      	bhi.n	801385a <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	3301      	adds	r3, #1
 8013840:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8013842:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013844:	4613      	mov	r3, r2
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	4413      	add	r3, r2
 801384a:	005b      	lsls	r3, r3, #1
 801384c:	461a      	mov	r2, r3
 801384e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013852:	4413      	add	r3, r2
 8013854:	3b30      	subs	r3, #48	; 0x30
 8013856:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8013858:	e7e4      	b.n	8013824 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 801385a:	2300      	movs	r3, #0
 801385c:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8013866:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801386a:	2b2e      	cmp	r3, #46	; 0x2e
 801386c:	d11d      	bne.n	80138aa <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	3301      	adds	r3, #1
 8013872:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 801387c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013880:	2b2f      	cmp	r3, #47	; 0x2f
 8013882:	d912      	bls.n	80138aa <SEGGER_RTT_vprintf+0x172>
 8013884:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013888:	2b39      	cmp	r3, #57	; 0x39
 801388a:	d80e      	bhi.n	80138aa <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	3301      	adds	r3, #1
 8013890:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8013892:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013894:	4613      	mov	r3, r2
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	4413      	add	r3, r2
 801389a:	005b      	lsls	r3, r3, #1
 801389c:	461a      	mov	r2, r3
 801389e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80138a2:	4413      	add	r3, r2
 80138a4:	3b30      	subs	r3, #48	; 0x30
 80138a6:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 80138a8:	e7e4      	b.n	8013874 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80138b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80138b6:	2b6c      	cmp	r3, #108	; 0x6c
 80138b8:	d003      	beq.n	80138c2 <SEGGER_RTT_vprintf+0x18a>
 80138ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80138be:	2b68      	cmp	r3, #104	; 0x68
 80138c0:	d107      	bne.n	80138d2 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	3301      	adds	r3, #1
 80138c6:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 80138d0:	e7ef      	b.n	80138b2 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80138d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80138d6:	2b25      	cmp	r3, #37	; 0x25
 80138d8:	f000 80d1 	beq.w	8013a7e <SEGGER_RTT_vprintf+0x346>
 80138dc:	2b25      	cmp	r3, #37	; 0x25
 80138de:	f2c0 80d5 	blt.w	8013a8c <SEGGER_RTT_vprintf+0x354>
 80138e2:	2b78      	cmp	r3, #120	; 0x78
 80138e4:	f300 80d2 	bgt.w	8013a8c <SEGGER_RTT_vprintf+0x354>
 80138e8:	2b58      	cmp	r3, #88	; 0x58
 80138ea:	f2c0 80cf 	blt.w	8013a8c <SEGGER_RTT_vprintf+0x354>
 80138ee:	3b58      	subs	r3, #88	; 0x58
 80138f0:	2b20      	cmp	r3, #32
 80138f2:	f200 80cb 	bhi.w	8013a8c <SEGGER_RTT_vprintf+0x354>
 80138f6:	a201      	add	r2, pc, #4	; (adr r2, 80138fc <SEGGER_RTT_vprintf+0x1c4>)
 80138f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138fc:	080139f3 	.word	0x080139f3
 8013900:	08013a8d 	.word	0x08013a8d
 8013904:	08013a8d 	.word	0x08013a8d
 8013908:	08013a8d 	.word	0x08013a8d
 801390c:	08013a8d 	.word	0x08013a8d
 8013910:	08013a8d 	.word	0x08013a8d
 8013914:	08013a8d 	.word	0x08013a8d
 8013918:	08013a8d 	.word	0x08013a8d
 801391c:	08013a8d 	.word	0x08013a8d
 8013920:	08013a8d 	.word	0x08013a8d
 8013924:	08013a8d 	.word	0x08013a8d
 8013928:	08013981 	.word	0x08013981
 801392c:	080139a7 	.word	0x080139a7
 8013930:	08013a8d 	.word	0x08013a8d
 8013934:	08013a8d 	.word	0x08013a8d
 8013938:	08013a8d 	.word	0x08013a8d
 801393c:	08013a8d 	.word	0x08013a8d
 8013940:	08013a8d 	.word	0x08013a8d
 8013944:	08013a8d 	.word	0x08013a8d
 8013948:	08013a8d 	.word	0x08013a8d
 801394c:	08013a8d 	.word	0x08013a8d
 8013950:	08013a8d 	.word	0x08013a8d
 8013954:	08013a8d 	.word	0x08013a8d
 8013958:	08013a8d 	.word	0x08013a8d
 801395c:	08013a59 	.word	0x08013a59
 8013960:	08013a8d 	.word	0x08013a8d
 8013964:	08013a8d 	.word	0x08013a8d
 8013968:	08013a19 	.word	0x08013a19
 801396c:	08013a8d 	.word	0x08013a8d
 8013970:	080139cd 	.word	0x080139cd
 8013974:	08013a8d 	.word	0x08013a8d
 8013978:	08013a8d 	.word	0x08013a8d
 801397c:	080139f3 	.word	0x080139f3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	1d19      	adds	r1, r3, #4
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	6011      	str	r1, [r2, #0]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 801398e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8013994:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8013998:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff fd38 	bl	8013414 <_StoreChar>
        break;
 80139a4:	e073      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	1d19      	adds	r1, r3, #4
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	6011      	str	r1, [r2, #0]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80139b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80139b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80139ba:	9301      	str	r3, [sp, #4]
 80139bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139be:	9300      	str	r3, [sp, #0]
 80139c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80139c2:	220a      	movs	r2, #10
 80139c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80139c6:	f7ff fe0f 	bl	80135e8 <_PrintInt>
        break;
 80139ca:	e060      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	1d19      	adds	r1, r3, #4
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	6011      	str	r1, [r2, #0]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80139da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80139dc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80139e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80139ea:	220a      	movs	r2, #10
 80139ec:	f7ff fd50 	bl	8013490 <_PrintUnsigned>
        break;
 80139f0:	e04d      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	1d19      	adds	r1, r3, #4
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	6011      	str	r1, [r2, #0]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8013a00:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013a02:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8013a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013a08:	9301      	str	r3, [sp, #4]
 8013a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013a10:	2210      	movs	r2, #16
 8013a12:	f7ff fd3d 	bl	8013490 <_PrintUnsigned>
        break;
 8013a16:	e03a      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	1d19      	adds	r1, r3, #4
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	6011      	str	r1, [r2, #0]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8013a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8013a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a30:	3301      	adds	r3, #1
 8013a32:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8013a34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d00b      	beq.n	8013a54 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8013a3c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8013a40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a44:	4611      	mov	r1, r2
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff fce4 	bl	8013414 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8013a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	dae9      	bge.n	8013a26 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8013a52:	e01c      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
              break;
 8013a54:	bf00      	nop
        break;
 8013a56:	e01a      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	1d19      	adds	r1, r3, #4
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	6011      	str	r1, [r2, #0]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8013a66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013a68:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	9301      	str	r3, [sp, #4]
 8013a70:	2308      	movs	r3, #8
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	2308      	movs	r3, #8
 8013a76:	2210      	movs	r2, #16
 8013a78:	f7ff fd0a 	bl	8013490 <_PrintUnsigned>
        break;
 8013a7c:	e007      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8013a7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a82:	2125      	movs	r1, #37	; 0x25
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7ff fcc5 	bl	8013414 <_StoreChar>
        break;
 8013a8a:	e000      	b.n	8013a8e <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8013a8c:	bf00      	nop
      }
      sFormat++;
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	3301      	adds	r3, #1
 8013a92:	60bb      	str	r3, [r7, #8]
 8013a94:	e007      	b.n	8013aa6 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8013a96:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8013a9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7ff fcb7 	bl	8013414 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8013aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f6bf ae56 	bge.w	801375a <SEGGER_RTT_vprintf+0x22>
 8013aae:	e000      	b.n	8013ab2 <SEGGER_RTT_vprintf+0x37a>
      break;
 8013ab0:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8013ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	dd0d      	ble.n	8013ad4 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8013ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d006      	beq.n	8013acc <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8013abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ac0:	f107 0310 	add.w	r3, r7, #16
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	68f8      	ldr	r0, [r7, #12]
 8013ac8:	f7ff fc7e 	bl	80133c8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8013acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ace:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ad0:	4413      	add	r3, r2
 8013ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8013ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3780      	adds	r7, #128	; 0x80
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop

08013ae0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8013ae0:	b40e      	push	{r1, r2, r3}
 8013ae2:	b580      	push	{r7, lr}
 8013ae4:	b085      	sub	sp, #20
 8013ae6:	af00      	add	r7, sp, #0
 8013ae8:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8013aea:	f107 0320 	add.w	r3, r7, #32
 8013aee:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8013af0:	f107 0308 	add.w	r3, r7, #8
 8013af4:	461a      	mov	r2, r3
 8013af6:	69f9      	ldr	r1, [r7, #28]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff fe1d 	bl	8013738 <SEGGER_RTT_vprintf>
 8013afe:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8013b00:	68fb      	ldr	r3, [r7, #12]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3714      	adds	r7, #20
 8013b06:	46bd      	mov	sp, r7
 8013b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b0c:	b003      	add	sp, #12
 8013b0e:	4770      	bx	lr

08013b10 <malloc>:
 8013b10:	4b02      	ldr	r3, [pc, #8]	; (8013b1c <malloc+0xc>)
 8013b12:	4601      	mov	r1, r0
 8013b14:	6818      	ldr	r0, [r3, #0]
 8013b16:	f000 b823 	b.w	8013b60 <_malloc_r>
 8013b1a:	bf00      	nop
 8013b1c:	2000008c 	.word	0x2000008c

08013b20 <sbrk_aligned>:
 8013b20:	b570      	push	{r4, r5, r6, lr}
 8013b22:	4e0e      	ldr	r6, [pc, #56]	; (8013b5c <sbrk_aligned+0x3c>)
 8013b24:	460c      	mov	r4, r1
 8013b26:	6831      	ldr	r1, [r6, #0]
 8013b28:	4605      	mov	r5, r0
 8013b2a:	b911      	cbnz	r1, 8013b32 <sbrk_aligned+0x12>
 8013b2c:	f000 fa46 	bl	8013fbc <_sbrk_r>
 8013b30:	6030      	str	r0, [r6, #0]
 8013b32:	4621      	mov	r1, r4
 8013b34:	4628      	mov	r0, r5
 8013b36:	f000 fa41 	bl	8013fbc <_sbrk_r>
 8013b3a:	1c43      	adds	r3, r0, #1
 8013b3c:	d00a      	beq.n	8013b54 <sbrk_aligned+0x34>
 8013b3e:	1cc4      	adds	r4, r0, #3
 8013b40:	f024 0403 	bic.w	r4, r4, #3
 8013b44:	42a0      	cmp	r0, r4
 8013b46:	d007      	beq.n	8013b58 <sbrk_aligned+0x38>
 8013b48:	1a21      	subs	r1, r4, r0
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	f000 fa36 	bl	8013fbc <_sbrk_r>
 8013b50:	3001      	adds	r0, #1
 8013b52:	d101      	bne.n	8013b58 <sbrk_aligned+0x38>
 8013b54:	f04f 34ff 	mov.w	r4, #4294967295
 8013b58:	4620      	mov	r0, r4
 8013b5a:	bd70      	pop	{r4, r5, r6, pc}
 8013b5c:	2000ca6c 	.word	0x2000ca6c

08013b60 <_malloc_r>:
 8013b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b64:	1ccd      	adds	r5, r1, #3
 8013b66:	f025 0503 	bic.w	r5, r5, #3
 8013b6a:	3508      	adds	r5, #8
 8013b6c:	2d0c      	cmp	r5, #12
 8013b6e:	bf38      	it	cc
 8013b70:	250c      	movcc	r5, #12
 8013b72:	2d00      	cmp	r5, #0
 8013b74:	4607      	mov	r7, r0
 8013b76:	db01      	blt.n	8013b7c <_malloc_r+0x1c>
 8013b78:	42a9      	cmp	r1, r5
 8013b7a:	d905      	bls.n	8013b88 <_malloc_r+0x28>
 8013b7c:	230c      	movs	r3, #12
 8013b7e:	603b      	str	r3, [r7, #0]
 8013b80:	2600      	movs	r6, #0
 8013b82:	4630      	mov	r0, r6
 8013b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013c5c <_malloc_r+0xfc>
 8013b8c:	f000 f868 	bl	8013c60 <__malloc_lock>
 8013b90:	f8d8 3000 	ldr.w	r3, [r8]
 8013b94:	461c      	mov	r4, r3
 8013b96:	bb5c      	cbnz	r4, 8013bf0 <_malloc_r+0x90>
 8013b98:	4629      	mov	r1, r5
 8013b9a:	4638      	mov	r0, r7
 8013b9c:	f7ff ffc0 	bl	8013b20 <sbrk_aligned>
 8013ba0:	1c43      	adds	r3, r0, #1
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	d155      	bne.n	8013c52 <_malloc_r+0xf2>
 8013ba6:	f8d8 4000 	ldr.w	r4, [r8]
 8013baa:	4626      	mov	r6, r4
 8013bac:	2e00      	cmp	r6, #0
 8013bae:	d145      	bne.n	8013c3c <_malloc_r+0xdc>
 8013bb0:	2c00      	cmp	r4, #0
 8013bb2:	d048      	beq.n	8013c46 <_malloc_r+0xe6>
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	4631      	mov	r1, r6
 8013bb8:	4638      	mov	r0, r7
 8013bba:	eb04 0903 	add.w	r9, r4, r3
 8013bbe:	f000 f9fd 	bl	8013fbc <_sbrk_r>
 8013bc2:	4581      	cmp	r9, r0
 8013bc4:	d13f      	bne.n	8013c46 <_malloc_r+0xe6>
 8013bc6:	6821      	ldr	r1, [r4, #0]
 8013bc8:	1a6d      	subs	r5, r5, r1
 8013bca:	4629      	mov	r1, r5
 8013bcc:	4638      	mov	r0, r7
 8013bce:	f7ff ffa7 	bl	8013b20 <sbrk_aligned>
 8013bd2:	3001      	adds	r0, #1
 8013bd4:	d037      	beq.n	8013c46 <_malloc_r+0xe6>
 8013bd6:	6823      	ldr	r3, [r4, #0]
 8013bd8:	442b      	add	r3, r5
 8013bda:	6023      	str	r3, [r4, #0]
 8013bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d038      	beq.n	8013c56 <_malloc_r+0xf6>
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	42a2      	cmp	r2, r4
 8013be8:	d12b      	bne.n	8013c42 <_malloc_r+0xe2>
 8013bea:	2200      	movs	r2, #0
 8013bec:	605a      	str	r2, [r3, #4]
 8013bee:	e00f      	b.n	8013c10 <_malloc_r+0xb0>
 8013bf0:	6822      	ldr	r2, [r4, #0]
 8013bf2:	1b52      	subs	r2, r2, r5
 8013bf4:	d41f      	bmi.n	8013c36 <_malloc_r+0xd6>
 8013bf6:	2a0b      	cmp	r2, #11
 8013bf8:	d917      	bls.n	8013c2a <_malloc_r+0xca>
 8013bfa:	1961      	adds	r1, r4, r5
 8013bfc:	42a3      	cmp	r3, r4
 8013bfe:	6025      	str	r5, [r4, #0]
 8013c00:	bf18      	it	ne
 8013c02:	6059      	strne	r1, [r3, #4]
 8013c04:	6863      	ldr	r3, [r4, #4]
 8013c06:	bf08      	it	eq
 8013c08:	f8c8 1000 	streq.w	r1, [r8]
 8013c0c:	5162      	str	r2, [r4, r5]
 8013c0e:	604b      	str	r3, [r1, #4]
 8013c10:	4638      	mov	r0, r7
 8013c12:	f104 060b 	add.w	r6, r4, #11
 8013c16:	f000 f829 	bl	8013c6c <__malloc_unlock>
 8013c1a:	f026 0607 	bic.w	r6, r6, #7
 8013c1e:	1d23      	adds	r3, r4, #4
 8013c20:	1af2      	subs	r2, r6, r3
 8013c22:	d0ae      	beq.n	8013b82 <_malloc_r+0x22>
 8013c24:	1b9b      	subs	r3, r3, r6
 8013c26:	50a3      	str	r3, [r4, r2]
 8013c28:	e7ab      	b.n	8013b82 <_malloc_r+0x22>
 8013c2a:	42a3      	cmp	r3, r4
 8013c2c:	6862      	ldr	r2, [r4, #4]
 8013c2e:	d1dd      	bne.n	8013bec <_malloc_r+0x8c>
 8013c30:	f8c8 2000 	str.w	r2, [r8]
 8013c34:	e7ec      	b.n	8013c10 <_malloc_r+0xb0>
 8013c36:	4623      	mov	r3, r4
 8013c38:	6864      	ldr	r4, [r4, #4]
 8013c3a:	e7ac      	b.n	8013b96 <_malloc_r+0x36>
 8013c3c:	4634      	mov	r4, r6
 8013c3e:	6876      	ldr	r6, [r6, #4]
 8013c40:	e7b4      	b.n	8013bac <_malloc_r+0x4c>
 8013c42:	4613      	mov	r3, r2
 8013c44:	e7cc      	b.n	8013be0 <_malloc_r+0x80>
 8013c46:	230c      	movs	r3, #12
 8013c48:	603b      	str	r3, [r7, #0]
 8013c4a:	4638      	mov	r0, r7
 8013c4c:	f000 f80e 	bl	8013c6c <__malloc_unlock>
 8013c50:	e797      	b.n	8013b82 <_malloc_r+0x22>
 8013c52:	6025      	str	r5, [r4, #0]
 8013c54:	e7dc      	b.n	8013c10 <_malloc_r+0xb0>
 8013c56:	605b      	str	r3, [r3, #4]
 8013c58:	deff      	udf	#255	; 0xff
 8013c5a:	bf00      	nop
 8013c5c:	2000ca68 	.word	0x2000ca68

08013c60 <__malloc_lock>:
 8013c60:	4801      	ldr	r0, [pc, #4]	; (8013c68 <__malloc_lock+0x8>)
 8013c62:	f000 b9f2 	b.w	801404a <__retarget_lock_acquire_recursive>
 8013c66:	bf00      	nop
 8013c68:	2000cbac 	.word	0x2000cbac

08013c6c <__malloc_unlock>:
 8013c6c:	4801      	ldr	r0, [pc, #4]	; (8013c74 <__malloc_unlock+0x8>)
 8013c6e:	f000 b9ed 	b.w	801404c <__retarget_lock_release_recursive>
 8013c72:	bf00      	nop
 8013c74:	2000cbac 	.word	0x2000cbac

08013c78 <rand>:
 8013c78:	4b16      	ldr	r3, [pc, #88]	; (8013cd4 <rand+0x5c>)
 8013c7a:	b510      	push	{r4, lr}
 8013c7c:	681c      	ldr	r4, [r3, #0]
 8013c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013c80:	b9b3      	cbnz	r3, 8013cb0 <rand+0x38>
 8013c82:	2018      	movs	r0, #24
 8013c84:	f7ff ff44 	bl	8013b10 <malloc>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	6320      	str	r0, [r4, #48]	; 0x30
 8013c8c:	b920      	cbnz	r0, 8013c98 <rand+0x20>
 8013c8e:	4b12      	ldr	r3, [pc, #72]	; (8013cd8 <rand+0x60>)
 8013c90:	4812      	ldr	r0, [pc, #72]	; (8013cdc <rand+0x64>)
 8013c92:	2152      	movs	r1, #82	; 0x52
 8013c94:	f000 f9ea 	bl	801406c <__assert_func>
 8013c98:	4911      	ldr	r1, [pc, #68]	; (8013ce0 <rand+0x68>)
 8013c9a:	4b12      	ldr	r3, [pc, #72]	; (8013ce4 <rand+0x6c>)
 8013c9c:	e9c0 1300 	strd	r1, r3, [r0]
 8013ca0:	4b11      	ldr	r3, [pc, #68]	; (8013ce8 <rand+0x70>)
 8013ca2:	6083      	str	r3, [r0, #8]
 8013ca4:	230b      	movs	r3, #11
 8013ca6:	8183      	strh	r3, [r0, #12]
 8013ca8:	2100      	movs	r1, #0
 8013caa:	2001      	movs	r0, #1
 8013cac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013cb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013cb2:	480e      	ldr	r0, [pc, #56]	; (8013cec <rand+0x74>)
 8013cb4:	690b      	ldr	r3, [r1, #16]
 8013cb6:	694c      	ldr	r4, [r1, #20]
 8013cb8:	4a0d      	ldr	r2, [pc, #52]	; (8013cf0 <rand+0x78>)
 8013cba:	4358      	muls	r0, r3
 8013cbc:	fb02 0004 	mla	r0, r2, r4, r0
 8013cc0:	fba3 3202 	umull	r3, r2, r3, r2
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	eb40 0002 	adc.w	r0, r0, r2
 8013cca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013cce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013cd2:	bd10      	pop	{r4, pc}
 8013cd4:	2000008c 	.word	0x2000008c
 8013cd8:	0801a448 	.word	0x0801a448
 8013cdc:	0801a45f 	.word	0x0801a45f
 8013ce0:	abcd330e 	.word	0xabcd330e
 8013ce4:	e66d1234 	.word	0xe66d1234
 8013ce8:	0005deec 	.word	0x0005deec
 8013cec:	5851f42d 	.word	0x5851f42d
 8013cf0:	4c957f2d 	.word	0x4c957f2d

08013cf4 <std>:
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	b510      	push	{r4, lr}
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8013cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d02:	6083      	str	r3, [r0, #8]
 8013d04:	8181      	strh	r1, [r0, #12]
 8013d06:	6643      	str	r3, [r0, #100]	; 0x64
 8013d08:	81c2      	strh	r2, [r0, #14]
 8013d0a:	6183      	str	r3, [r0, #24]
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	2208      	movs	r2, #8
 8013d10:	305c      	adds	r0, #92	; 0x5c
 8013d12:	f000 f916 	bl	8013f42 <memset>
 8013d16:	4b0d      	ldr	r3, [pc, #52]	; (8013d4c <std+0x58>)
 8013d18:	6263      	str	r3, [r4, #36]	; 0x24
 8013d1a:	4b0d      	ldr	r3, [pc, #52]	; (8013d50 <std+0x5c>)
 8013d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d1e:	4b0d      	ldr	r3, [pc, #52]	; (8013d54 <std+0x60>)
 8013d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d22:	4b0d      	ldr	r3, [pc, #52]	; (8013d58 <std+0x64>)
 8013d24:	6323      	str	r3, [r4, #48]	; 0x30
 8013d26:	4b0d      	ldr	r3, [pc, #52]	; (8013d5c <std+0x68>)
 8013d28:	6224      	str	r4, [r4, #32]
 8013d2a:	429c      	cmp	r4, r3
 8013d2c:	d006      	beq.n	8013d3c <std+0x48>
 8013d2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013d32:	4294      	cmp	r4, r2
 8013d34:	d002      	beq.n	8013d3c <std+0x48>
 8013d36:	33d0      	adds	r3, #208	; 0xd0
 8013d38:	429c      	cmp	r4, r3
 8013d3a:	d105      	bne.n	8013d48 <std+0x54>
 8013d3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d44:	f000 b980 	b.w	8014048 <__retarget_lock_init_recursive>
 8013d48:	bd10      	pop	{r4, pc}
 8013d4a:	bf00      	nop
 8013d4c:	08013e9d 	.word	0x08013e9d
 8013d50:	08013ebf 	.word	0x08013ebf
 8013d54:	08013ef7 	.word	0x08013ef7
 8013d58:	08013f1b 	.word	0x08013f1b
 8013d5c:	2000ca70 	.word	0x2000ca70

08013d60 <stdio_exit_handler>:
 8013d60:	4a02      	ldr	r2, [pc, #8]	; (8013d6c <stdio_exit_handler+0xc>)
 8013d62:	4903      	ldr	r1, [pc, #12]	; (8013d70 <stdio_exit_handler+0x10>)
 8013d64:	4803      	ldr	r0, [pc, #12]	; (8013d74 <stdio_exit_handler+0x14>)
 8013d66:	f000 b869 	b.w	8013e3c <_fwalk_sglue>
 8013d6a:	bf00      	nop
 8013d6c:	20000034 	.word	0x20000034
 8013d70:	080147f5 	.word	0x080147f5
 8013d74:	20000040 	.word	0x20000040

08013d78 <cleanup_stdio>:
 8013d78:	6841      	ldr	r1, [r0, #4]
 8013d7a:	4b0c      	ldr	r3, [pc, #48]	; (8013dac <cleanup_stdio+0x34>)
 8013d7c:	4299      	cmp	r1, r3
 8013d7e:	b510      	push	{r4, lr}
 8013d80:	4604      	mov	r4, r0
 8013d82:	d001      	beq.n	8013d88 <cleanup_stdio+0x10>
 8013d84:	f000 fd36 	bl	80147f4 <_fflush_r>
 8013d88:	68a1      	ldr	r1, [r4, #8]
 8013d8a:	4b09      	ldr	r3, [pc, #36]	; (8013db0 <cleanup_stdio+0x38>)
 8013d8c:	4299      	cmp	r1, r3
 8013d8e:	d002      	beq.n	8013d96 <cleanup_stdio+0x1e>
 8013d90:	4620      	mov	r0, r4
 8013d92:	f000 fd2f 	bl	80147f4 <_fflush_r>
 8013d96:	68e1      	ldr	r1, [r4, #12]
 8013d98:	4b06      	ldr	r3, [pc, #24]	; (8013db4 <cleanup_stdio+0x3c>)
 8013d9a:	4299      	cmp	r1, r3
 8013d9c:	d004      	beq.n	8013da8 <cleanup_stdio+0x30>
 8013d9e:	4620      	mov	r0, r4
 8013da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013da4:	f000 bd26 	b.w	80147f4 <_fflush_r>
 8013da8:	bd10      	pop	{r4, pc}
 8013daa:	bf00      	nop
 8013dac:	2000ca70 	.word	0x2000ca70
 8013db0:	2000cad8 	.word	0x2000cad8
 8013db4:	2000cb40 	.word	0x2000cb40

08013db8 <global_stdio_init.part.0>:
 8013db8:	b510      	push	{r4, lr}
 8013dba:	4b0b      	ldr	r3, [pc, #44]	; (8013de8 <global_stdio_init.part.0+0x30>)
 8013dbc:	4c0b      	ldr	r4, [pc, #44]	; (8013dec <global_stdio_init.part.0+0x34>)
 8013dbe:	4a0c      	ldr	r2, [pc, #48]	; (8013df0 <global_stdio_init.part.0+0x38>)
 8013dc0:	601a      	str	r2, [r3, #0]
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	2104      	movs	r1, #4
 8013dc8:	f7ff ff94 	bl	8013cf4 <std>
 8013dcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	2109      	movs	r1, #9
 8013dd4:	f7ff ff8e 	bl	8013cf4 <std>
 8013dd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013ddc:	2202      	movs	r2, #2
 8013dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013de2:	2112      	movs	r1, #18
 8013de4:	f7ff bf86 	b.w	8013cf4 <std>
 8013de8:	2000cba8 	.word	0x2000cba8
 8013dec:	2000ca70 	.word	0x2000ca70
 8013df0:	08013d61 	.word	0x08013d61

08013df4 <__sfp_lock_acquire>:
 8013df4:	4801      	ldr	r0, [pc, #4]	; (8013dfc <__sfp_lock_acquire+0x8>)
 8013df6:	f000 b928 	b.w	801404a <__retarget_lock_acquire_recursive>
 8013dfa:	bf00      	nop
 8013dfc:	2000cbad 	.word	0x2000cbad

08013e00 <__sfp_lock_release>:
 8013e00:	4801      	ldr	r0, [pc, #4]	; (8013e08 <__sfp_lock_release+0x8>)
 8013e02:	f000 b923 	b.w	801404c <__retarget_lock_release_recursive>
 8013e06:	bf00      	nop
 8013e08:	2000cbad 	.word	0x2000cbad

08013e0c <__sinit>:
 8013e0c:	b510      	push	{r4, lr}
 8013e0e:	4604      	mov	r4, r0
 8013e10:	f7ff fff0 	bl	8013df4 <__sfp_lock_acquire>
 8013e14:	6a23      	ldr	r3, [r4, #32]
 8013e16:	b11b      	cbz	r3, 8013e20 <__sinit+0x14>
 8013e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e1c:	f7ff bff0 	b.w	8013e00 <__sfp_lock_release>
 8013e20:	4b04      	ldr	r3, [pc, #16]	; (8013e34 <__sinit+0x28>)
 8013e22:	6223      	str	r3, [r4, #32]
 8013e24:	4b04      	ldr	r3, [pc, #16]	; (8013e38 <__sinit+0x2c>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1f5      	bne.n	8013e18 <__sinit+0xc>
 8013e2c:	f7ff ffc4 	bl	8013db8 <global_stdio_init.part.0>
 8013e30:	e7f2      	b.n	8013e18 <__sinit+0xc>
 8013e32:	bf00      	nop
 8013e34:	08013d79 	.word	0x08013d79
 8013e38:	2000cba8 	.word	0x2000cba8

08013e3c <_fwalk_sglue>:
 8013e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e40:	4607      	mov	r7, r0
 8013e42:	4688      	mov	r8, r1
 8013e44:	4614      	mov	r4, r2
 8013e46:	2600      	movs	r6, #0
 8013e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8013e50:	d505      	bpl.n	8013e5e <_fwalk_sglue+0x22>
 8013e52:	6824      	ldr	r4, [r4, #0]
 8013e54:	2c00      	cmp	r4, #0
 8013e56:	d1f7      	bne.n	8013e48 <_fwalk_sglue+0xc>
 8013e58:	4630      	mov	r0, r6
 8013e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e5e:	89ab      	ldrh	r3, [r5, #12]
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d907      	bls.n	8013e74 <_fwalk_sglue+0x38>
 8013e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	d003      	beq.n	8013e74 <_fwalk_sglue+0x38>
 8013e6c:	4629      	mov	r1, r5
 8013e6e:	4638      	mov	r0, r7
 8013e70:	47c0      	blx	r8
 8013e72:	4306      	orrs	r6, r0
 8013e74:	3568      	adds	r5, #104	; 0x68
 8013e76:	e7e9      	b.n	8013e4c <_fwalk_sglue+0x10>

08013e78 <iprintf>:
 8013e78:	b40f      	push	{r0, r1, r2, r3}
 8013e7a:	b507      	push	{r0, r1, r2, lr}
 8013e7c:	4906      	ldr	r1, [pc, #24]	; (8013e98 <iprintf+0x20>)
 8013e7e:	ab04      	add	r3, sp, #16
 8013e80:	6808      	ldr	r0, [r1, #0]
 8013e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e86:	6881      	ldr	r1, [r0, #8]
 8013e88:	9301      	str	r3, [sp, #4]
 8013e8a:	f000 f983 	bl	8014194 <_vfiprintf_r>
 8013e8e:	b003      	add	sp, #12
 8013e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e94:	b004      	add	sp, #16
 8013e96:	4770      	bx	lr
 8013e98:	2000008c 	.word	0x2000008c

08013e9c <__sread>:
 8013e9c:	b510      	push	{r4, lr}
 8013e9e:	460c      	mov	r4, r1
 8013ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ea4:	f000 f878 	bl	8013f98 <_read_r>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	bfab      	itete	ge
 8013eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013eae:	89a3      	ldrhlt	r3, [r4, #12]
 8013eb0:	181b      	addge	r3, r3, r0
 8013eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013eb6:	bfac      	ite	ge
 8013eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013eba:	81a3      	strhlt	r3, [r4, #12]
 8013ebc:	bd10      	pop	{r4, pc}

08013ebe <__swrite>:
 8013ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ec2:	461f      	mov	r7, r3
 8013ec4:	898b      	ldrh	r3, [r1, #12]
 8013ec6:	05db      	lsls	r3, r3, #23
 8013ec8:	4605      	mov	r5, r0
 8013eca:	460c      	mov	r4, r1
 8013ecc:	4616      	mov	r6, r2
 8013ece:	d505      	bpl.n	8013edc <__swrite+0x1e>
 8013ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ed4:	2302      	movs	r3, #2
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	f000 f84c 	bl	8013f74 <_lseek_r>
 8013edc:	89a3      	ldrh	r3, [r4, #12]
 8013ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ee6:	81a3      	strh	r3, [r4, #12]
 8013ee8:	4632      	mov	r2, r6
 8013eea:	463b      	mov	r3, r7
 8013eec:	4628      	mov	r0, r5
 8013eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef2:	f000 b873 	b.w	8013fdc <_write_r>

08013ef6 <__sseek>:
 8013ef6:	b510      	push	{r4, lr}
 8013ef8:	460c      	mov	r4, r1
 8013efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013efe:	f000 f839 	bl	8013f74 <_lseek_r>
 8013f02:	1c43      	adds	r3, r0, #1
 8013f04:	89a3      	ldrh	r3, [r4, #12]
 8013f06:	bf15      	itete	ne
 8013f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f12:	81a3      	strheq	r3, [r4, #12]
 8013f14:	bf18      	it	ne
 8013f16:	81a3      	strhne	r3, [r4, #12]
 8013f18:	bd10      	pop	{r4, pc}

08013f1a <__sclose>:
 8013f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f1e:	f000 b819 	b.w	8013f54 <_close_r>

08013f22 <memcmp>:
 8013f22:	b510      	push	{r4, lr}
 8013f24:	3901      	subs	r1, #1
 8013f26:	4402      	add	r2, r0
 8013f28:	4290      	cmp	r0, r2
 8013f2a:	d101      	bne.n	8013f30 <memcmp+0xe>
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	e005      	b.n	8013f3c <memcmp+0x1a>
 8013f30:	7803      	ldrb	r3, [r0, #0]
 8013f32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f36:	42a3      	cmp	r3, r4
 8013f38:	d001      	beq.n	8013f3e <memcmp+0x1c>
 8013f3a:	1b18      	subs	r0, r3, r4
 8013f3c:	bd10      	pop	{r4, pc}
 8013f3e:	3001      	adds	r0, #1
 8013f40:	e7f2      	b.n	8013f28 <memcmp+0x6>

08013f42 <memset>:
 8013f42:	4402      	add	r2, r0
 8013f44:	4603      	mov	r3, r0
 8013f46:	4293      	cmp	r3, r2
 8013f48:	d100      	bne.n	8013f4c <memset+0xa>
 8013f4a:	4770      	bx	lr
 8013f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8013f50:	e7f9      	b.n	8013f46 <memset+0x4>
	...

08013f54 <_close_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4d06      	ldr	r5, [pc, #24]	; (8013f70 <_close_r+0x1c>)
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	4608      	mov	r0, r1
 8013f5e:	602b      	str	r3, [r5, #0]
 8013f60:	f7ec fe15 	bl	8000b8e <_close>
 8013f64:	1c43      	adds	r3, r0, #1
 8013f66:	d102      	bne.n	8013f6e <_close_r+0x1a>
 8013f68:	682b      	ldr	r3, [r5, #0]
 8013f6a:	b103      	cbz	r3, 8013f6e <_close_r+0x1a>
 8013f6c:	6023      	str	r3, [r4, #0]
 8013f6e:	bd38      	pop	{r3, r4, r5, pc}
 8013f70:	2000c5a8 	.word	0x2000c5a8

08013f74 <_lseek_r>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	4d07      	ldr	r5, [pc, #28]	; (8013f94 <_lseek_r+0x20>)
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4608      	mov	r0, r1
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	2200      	movs	r2, #0
 8013f80:	602a      	str	r2, [r5, #0]
 8013f82:	461a      	mov	r2, r3
 8013f84:	f7ec fe2a 	bl	8000bdc <_lseek>
 8013f88:	1c43      	adds	r3, r0, #1
 8013f8a:	d102      	bne.n	8013f92 <_lseek_r+0x1e>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	b103      	cbz	r3, 8013f92 <_lseek_r+0x1e>
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	bd38      	pop	{r3, r4, r5, pc}
 8013f94:	2000c5a8 	.word	0x2000c5a8

08013f98 <_read_r>:
 8013f98:	b538      	push	{r3, r4, r5, lr}
 8013f9a:	4d07      	ldr	r5, [pc, #28]	; (8013fb8 <_read_r+0x20>)
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	4611      	mov	r1, r2
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	602a      	str	r2, [r5, #0]
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	f7ec fdb8 	bl	8000b1c <_read>
 8013fac:	1c43      	adds	r3, r0, #1
 8013fae:	d102      	bne.n	8013fb6 <_read_r+0x1e>
 8013fb0:	682b      	ldr	r3, [r5, #0]
 8013fb2:	b103      	cbz	r3, 8013fb6 <_read_r+0x1e>
 8013fb4:	6023      	str	r3, [r4, #0]
 8013fb6:	bd38      	pop	{r3, r4, r5, pc}
 8013fb8:	2000c5a8 	.word	0x2000c5a8

08013fbc <_sbrk_r>:
 8013fbc:	b538      	push	{r3, r4, r5, lr}
 8013fbe:	4d06      	ldr	r5, [pc, #24]	; (8013fd8 <_sbrk_r+0x1c>)
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	4608      	mov	r0, r1
 8013fc6:	602b      	str	r3, [r5, #0]
 8013fc8:	f7ec fe16 	bl	8000bf8 <_sbrk>
 8013fcc:	1c43      	adds	r3, r0, #1
 8013fce:	d102      	bne.n	8013fd6 <_sbrk_r+0x1a>
 8013fd0:	682b      	ldr	r3, [r5, #0]
 8013fd2:	b103      	cbz	r3, 8013fd6 <_sbrk_r+0x1a>
 8013fd4:	6023      	str	r3, [r4, #0]
 8013fd6:	bd38      	pop	{r3, r4, r5, pc}
 8013fd8:	2000c5a8 	.word	0x2000c5a8

08013fdc <_write_r>:
 8013fdc:	b538      	push	{r3, r4, r5, lr}
 8013fde:	4d07      	ldr	r5, [pc, #28]	; (8013ffc <_write_r+0x20>)
 8013fe0:	4604      	mov	r4, r0
 8013fe2:	4608      	mov	r0, r1
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	602a      	str	r2, [r5, #0]
 8013fea:	461a      	mov	r2, r3
 8013fec:	f7ec fdb3 	bl	8000b56 <_write>
 8013ff0:	1c43      	adds	r3, r0, #1
 8013ff2:	d102      	bne.n	8013ffa <_write_r+0x1e>
 8013ff4:	682b      	ldr	r3, [r5, #0]
 8013ff6:	b103      	cbz	r3, 8013ffa <_write_r+0x1e>
 8013ff8:	6023      	str	r3, [r4, #0]
 8013ffa:	bd38      	pop	{r3, r4, r5, pc}
 8013ffc:	2000c5a8 	.word	0x2000c5a8

08014000 <__libc_init_array>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	4d0d      	ldr	r5, [pc, #52]	; (8014038 <__libc_init_array+0x38>)
 8014004:	4c0d      	ldr	r4, [pc, #52]	; (801403c <__libc_init_array+0x3c>)
 8014006:	1b64      	subs	r4, r4, r5
 8014008:	10a4      	asrs	r4, r4, #2
 801400a:	2600      	movs	r6, #0
 801400c:	42a6      	cmp	r6, r4
 801400e:	d109      	bne.n	8014024 <__libc_init_array+0x24>
 8014010:	4d0b      	ldr	r5, [pc, #44]	; (8014040 <__libc_init_array+0x40>)
 8014012:	4c0c      	ldr	r4, [pc, #48]	; (8014044 <__libc_init_array+0x44>)
 8014014:	f000 fd8e 	bl	8014b34 <_init>
 8014018:	1b64      	subs	r4, r4, r5
 801401a:	10a4      	asrs	r4, r4, #2
 801401c:	2600      	movs	r6, #0
 801401e:	42a6      	cmp	r6, r4
 8014020:	d105      	bne.n	801402e <__libc_init_array+0x2e>
 8014022:	bd70      	pop	{r4, r5, r6, pc}
 8014024:	f855 3b04 	ldr.w	r3, [r5], #4
 8014028:	4798      	blx	r3
 801402a:	3601      	adds	r6, #1
 801402c:	e7ee      	b.n	801400c <__libc_init_array+0xc>
 801402e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014032:	4798      	blx	r3
 8014034:	3601      	adds	r6, #1
 8014036:	e7f2      	b.n	801401e <__libc_init_array+0x1e>
 8014038:	0801a530 	.word	0x0801a530
 801403c:	0801a530 	.word	0x0801a530
 8014040:	0801a530 	.word	0x0801a530
 8014044:	0801a534 	.word	0x0801a534

08014048 <__retarget_lock_init_recursive>:
 8014048:	4770      	bx	lr

0801404a <__retarget_lock_acquire_recursive>:
 801404a:	4770      	bx	lr

0801404c <__retarget_lock_release_recursive>:
 801404c:	4770      	bx	lr

0801404e <memcpy>:
 801404e:	440a      	add	r2, r1
 8014050:	4291      	cmp	r1, r2
 8014052:	f100 33ff 	add.w	r3, r0, #4294967295
 8014056:	d100      	bne.n	801405a <memcpy+0xc>
 8014058:	4770      	bx	lr
 801405a:	b510      	push	{r4, lr}
 801405c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014064:	4291      	cmp	r1, r2
 8014066:	d1f9      	bne.n	801405c <memcpy+0xe>
 8014068:	bd10      	pop	{r4, pc}
	...

0801406c <__assert_func>:
 801406c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801406e:	4614      	mov	r4, r2
 8014070:	461a      	mov	r2, r3
 8014072:	4b09      	ldr	r3, [pc, #36]	; (8014098 <__assert_func+0x2c>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4605      	mov	r5, r0
 8014078:	68d8      	ldr	r0, [r3, #12]
 801407a:	b14c      	cbz	r4, 8014090 <__assert_func+0x24>
 801407c:	4b07      	ldr	r3, [pc, #28]	; (801409c <__assert_func+0x30>)
 801407e:	9100      	str	r1, [sp, #0]
 8014080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014084:	4906      	ldr	r1, [pc, #24]	; (80140a0 <__assert_func+0x34>)
 8014086:	462b      	mov	r3, r5
 8014088:	f000 fbdc 	bl	8014844 <fiprintf>
 801408c:	f000 fc82 	bl	8014994 <abort>
 8014090:	4b04      	ldr	r3, [pc, #16]	; (80140a4 <__assert_func+0x38>)
 8014092:	461c      	mov	r4, r3
 8014094:	e7f3      	b.n	801407e <__assert_func+0x12>
 8014096:	bf00      	nop
 8014098:	2000008c 	.word	0x2000008c
 801409c:	0801a4b7 	.word	0x0801a4b7
 80140a0:	0801a4c4 	.word	0x0801a4c4
 80140a4:	0801a4f2 	.word	0x0801a4f2

080140a8 <_free_r>:
 80140a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140aa:	2900      	cmp	r1, #0
 80140ac:	d044      	beq.n	8014138 <_free_r+0x90>
 80140ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140b2:	9001      	str	r0, [sp, #4]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f1a1 0404 	sub.w	r4, r1, #4
 80140ba:	bfb8      	it	lt
 80140bc:	18e4      	addlt	r4, r4, r3
 80140be:	f7ff fdcf 	bl	8013c60 <__malloc_lock>
 80140c2:	4a1e      	ldr	r2, [pc, #120]	; (801413c <_free_r+0x94>)
 80140c4:	9801      	ldr	r0, [sp, #4]
 80140c6:	6813      	ldr	r3, [r2, #0]
 80140c8:	b933      	cbnz	r3, 80140d8 <_free_r+0x30>
 80140ca:	6063      	str	r3, [r4, #4]
 80140cc:	6014      	str	r4, [r2, #0]
 80140ce:	b003      	add	sp, #12
 80140d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140d4:	f7ff bdca 	b.w	8013c6c <__malloc_unlock>
 80140d8:	42a3      	cmp	r3, r4
 80140da:	d908      	bls.n	80140ee <_free_r+0x46>
 80140dc:	6825      	ldr	r5, [r4, #0]
 80140de:	1961      	adds	r1, r4, r5
 80140e0:	428b      	cmp	r3, r1
 80140e2:	bf01      	itttt	eq
 80140e4:	6819      	ldreq	r1, [r3, #0]
 80140e6:	685b      	ldreq	r3, [r3, #4]
 80140e8:	1949      	addeq	r1, r1, r5
 80140ea:	6021      	streq	r1, [r4, #0]
 80140ec:	e7ed      	b.n	80140ca <_free_r+0x22>
 80140ee:	461a      	mov	r2, r3
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	b10b      	cbz	r3, 80140f8 <_free_r+0x50>
 80140f4:	42a3      	cmp	r3, r4
 80140f6:	d9fa      	bls.n	80140ee <_free_r+0x46>
 80140f8:	6811      	ldr	r1, [r2, #0]
 80140fa:	1855      	adds	r5, r2, r1
 80140fc:	42a5      	cmp	r5, r4
 80140fe:	d10b      	bne.n	8014118 <_free_r+0x70>
 8014100:	6824      	ldr	r4, [r4, #0]
 8014102:	4421      	add	r1, r4
 8014104:	1854      	adds	r4, r2, r1
 8014106:	42a3      	cmp	r3, r4
 8014108:	6011      	str	r1, [r2, #0]
 801410a:	d1e0      	bne.n	80140ce <_free_r+0x26>
 801410c:	681c      	ldr	r4, [r3, #0]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	6053      	str	r3, [r2, #4]
 8014112:	440c      	add	r4, r1
 8014114:	6014      	str	r4, [r2, #0]
 8014116:	e7da      	b.n	80140ce <_free_r+0x26>
 8014118:	d902      	bls.n	8014120 <_free_r+0x78>
 801411a:	230c      	movs	r3, #12
 801411c:	6003      	str	r3, [r0, #0]
 801411e:	e7d6      	b.n	80140ce <_free_r+0x26>
 8014120:	6825      	ldr	r5, [r4, #0]
 8014122:	1961      	adds	r1, r4, r5
 8014124:	428b      	cmp	r3, r1
 8014126:	bf04      	itt	eq
 8014128:	6819      	ldreq	r1, [r3, #0]
 801412a:	685b      	ldreq	r3, [r3, #4]
 801412c:	6063      	str	r3, [r4, #4]
 801412e:	bf04      	itt	eq
 8014130:	1949      	addeq	r1, r1, r5
 8014132:	6021      	streq	r1, [r4, #0]
 8014134:	6054      	str	r4, [r2, #4]
 8014136:	e7ca      	b.n	80140ce <_free_r+0x26>
 8014138:	b003      	add	sp, #12
 801413a:	bd30      	pop	{r4, r5, pc}
 801413c:	2000ca68 	.word	0x2000ca68

08014140 <__sfputc_r>:
 8014140:	6893      	ldr	r3, [r2, #8]
 8014142:	3b01      	subs	r3, #1
 8014144:	2b00      	cmp	r3, #0
 8014146:	b410      	push	{r4}
 8014148:	6093      	str	r3, [r2, #8]
 801414a:	da08      	bge.n	801415e <__sfputc_r+0x1e>
 801414c:	6994      	ldr	r4, [r2, #24]
 801414e:	42a3      	cmp	r3, r4
 8014150:	db01      	blt.n	8014156 <__sfputc_r+0x16>
 8014152:	290a      	cmp	r1, #10
 8014154:	d103      	bne.n	801415e <__sfputc_r+0x1e>
 8014156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801415a:	f000 bb85 	b.w	8014868 <__swbuf_r>
 801415e:	6813      	ldr	r3, [r2, #0]
 8014160:	1c58      	adds	r0, r3, #1
 8014162:	6010      	str	r0, [r2, #0]
 8014164:	7019      	strb	r1, [r3, #0]
 8014166:	4608      	mov	r0, r1
 8014168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801416c:	4770      	bx	lr

0801416e <__sfputs_r>:
 801416e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014170:	4606      	mov	r6, r0
 8014172:	460f      	mov	r7, r1
 8014174:	4614      	mov	r4, r2
 8014176:	18d5      	adds	r5, r2, r3
 8014178:	42ac      	cmp	r4, r5
 801417a:	d101      	bne.n	8014180 <__sfputs_r+0x12>
 801417c:	2000      	movs	r0, #0
 801417e:	e007      	b.n	8014190 <__sfputs_r+0x22>
 8014180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014184:	463a      	mov	r2, r7
 8014186:	4630      	mov	r0, r6
 8014188:	f7ff ffda 	bl	8014140 <__sfputc_r>
 801418c:	1c43      	adds	r3, r0, #1
 801418e:	d1f3      	bne.n	8014178 <__sfputs_r+0xa>
 8014190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014194 <_vfiprintf_r>:
 8014194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014198:	460d      	mov	r5, r1
 801419a:	b09d      	sub	sp, #116	; 0x74
 801419c:	4614      	mov	r4, r2
 801419e:	4698      	mov	r8, r3
 80141a0:	4606      	mov	r6, r0
 80141a2:	b118      	cbz	r0, 80141ac <_vfiprintf_r+0x18>
 80141a4:	6a03      	ldr	r3, [r0, #32]
 80141a6:	b90b      	cbnz	r3, 80141ac <_vfiprintf_r+0x18>
 80141a8:	f7ff fe30 	bl	8013e0c <__sinit>
 80141ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141ae:	07d9      	lsls	r1, r3, #31
 80141b0:	d405      	bmi.n	80141be <_vfiprintf_r+0x2a>
 80141b2:	89ab      	ldrh	r3, [r5, #12]
 80141b4:	059a      	lsls	r2, r3, #22
 80141b6:	d402      	bmi.n	80141be <_vfiprintf_r+0x2a>
 80141b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141ba:	f7ff ff46 	bl	801404a <__retarget_lock_acquire_recursive>
 80141be:	89ab      	ldrh	r3, [r5, #12]
 80141c0:	071b      	lsls	r3, r3, #28
 80141c2:	d501      	bpl.n	80141c8 <_vfiprintf_r+0x34>
 80141c4:	692b      	ldr	r3, [r5, #16]
 80141c6:	b99b      	cbnz	r3, 80141f0 <_vfiprintf_r+0x5c>
 80141c8:	4629      	mov	r1, r5
 80141ca:	4630      	mov	r0, r6
 80141cc:	f000 fb8a 	bl	80148e4 <__swsetup_r>
 80141d0:	b170      	cbz	r0, 80141f0 <_vfiprintf_r+0x5c>
 80141d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141d4:	07dc      	lsls	r4, r3, #31
 80141d6:	d504      	bpl.n	80141e2 <_vfiprintf_r+0x4e>
 80141d8:	f04f 30ff 	mov.w	r0, #4294967295
 80141dc:	b01d      	add	sp, #116	; 0x74
 80141de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e2:	89ab      	ldrh	r3, [r5, #12]
 80141e4:	0598      	lsls	r0, r3, #22
 80141e6:	d4f7      	bmi.n	80141d8 <_vfiprintf_r+0x44>
 80141e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141ea:	f7ff ff2f 	bl	801404c <__retarget_lock_release_recursive>
 80141ee:	e7f3      	b.n	80141d8 <_vfiprintf_r+0x44>
 80141f0:	2300      	movs	r3, #0
 80141f2:	9309      	str	r3, [sp, #36]	; 0x24
 80141f4:	2320      	movs	r3, #32
 80141f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80141fe:	2330      	movs	r3, #48	; 0x30
 8014200:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80143b4 <_vfiprintf_r+0x220>
 8014204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014208:	f04f 0901 	mov.w	r9, #1
 801420c:	4623      	mov	r3, r4
 801420e:	469a      	mov	sl, r3
 8014210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014214:	b10a      	cbz	r2, 801421a <_vfiprintf_r+0x86>
 8014216:	2a25      	cmp	r2, #37	; 0x25
 8014218:	d1f9      	bne.n	801420e <_vfiprintf_r+0x7a>
 801421a:	ebba 0b04 	subs.w	fp, sl, r4
 801421e:	d00b      	beq.n	8014238 <_vfiprintf_r+0xa4>
 8014220:	465b      	mov	r3, fp
 8014222:	4622      	mov	r2, r4
 8014224:	4629      	mov	r1, r5
 8014226:	4630      	mov	r0, r6
 8014228:	f7ff ffa1 	bl	801416e <__sfputs_r>
 801422c:	3001      	adds	r0, #1
 801422e:	f000 80a9 	beq.w	8014384 <_vfiprintf_r+0x1f0>
 8014232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014234:	445a      	add	r2, fp
 8014236:	9209      	str	r2, [sp, #36]	; 0x24
 8014238:	f89a 3000 	ldrb.w	r3, [sl]
 801423c:	2b00      	cmp	r3, #0
 801423e:	f000 80a1 	beq.w	8014384 <_vfiprintf_r+0x1f0>
 8014242:	2300      	movs	r3, #0
 8014244:	f04f 32ff 	mov.w	r2, #4294967295
 8014248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801424c:	f10a 0a01 	add.w	sl, sl, #1
 8014250:	9304      	str	r3, [sp, #16]
 8014252:	9307      	str	r3, [sp, #28]
 8014254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014258:	931a      	str	r3, [sp, #104]	; 0x68
 801425a:	4654      	mov	r4, sl
 801425c:	2205      	movs	r2, #5
 801425e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014262:	4854      	ldr	r0, [pc, #336]	; (80143b4 <_vfiprintf_r+0x220>)
 8014264:	f7eb ffc4 	bl	80001f0 <memchr>
 8014268:	9a04      	ldr	r2, [sp, #16]
 801426a:	b9d8      	cbnz	r0, 80142a4 <_vfiprintf_r+0x110>
 801426c:	06d1      	lsls	r1, r2, #27
 801426e:	bf44      	itt	mi
 8014270:	2320      	movmi	r3, #32
 8014272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014276:	0713      	lsls	r3, r2, #28
 8014278:	bf44      	itt	mi
 801427a:	232b      	movmi	r3, #43	; 0x2b
 801427c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014280:	f89a 3000 	ldrb.w	r3, [sl]
 8014284:	2b2a      	cmp	r3, #42	; 0x2a
 8014286:	d015      	beq.n	80142b4 <_vfiprintf_r+0x120>
 8014288:	9a07      	ldr	r2, [sp, #28]
 801428a:	4654      	mov	r4, sl
 801428c:	2000      	movs	r0, #0
 801428e:	f04f 0c0a 	mov.w	ip, #10
 8014292:	4621      	mov	r1, r4
 8014294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014298:	3b30      	subs	r3, #48	; 0x30
 801429a:	2b09      	cmp	r3, #9
 801429c:	d94d      	bls.n	801433a <_vfiprintf_r+0x1a6>
 801429e:	b1b0      	cbz	r0, 80142ce <_vfiprintf_r+0x13a>
 80142a0:	9207      	str	r2, [sp, #28]
 80142a2:	e014      	b.n	80142ce <_vfiprintf_r+0x13a>
 80142a4:	eba0 0308 	sub.w	r3, r0, r8
 80142a8:	fa09 f303 	lsl.w	r3, r9, r3
 80142ac:	4313      	orrs	r3, r2
 80142ae:	9304      	str	r3, [sp, #16]
 80142b0:	46a2      	mov	sl, r4
 80142b2:	e7d2      	b.n	801425a <_vfiprintf_r+0xc6>
 80142b4:	9b03      	ldr	r3, [sp, #12]
 80142b6:	1d19      	adds	r1, r3, #4
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	9103      	str	r1, [sp, #12]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	bfbb      	ittet	lt
 80142c0:	425b      	neglt	r3, r3
 80142c2:	f042 0202 	orrlt.w	r2, r2, #2
 80142c6:	9307      	strge	r3, [sp, #28]
 80142c8:	9307      	strlt	r3, [sp, #28]
 80142ca:	bfb8      	it	lt
 80142cc:	9204      	strlt	r2, [sp, #16]
 80142ce:	7823      	ldrb	r3, [r4, #0]
 80142d0:	2b2e      	cmp	r3, #46	; 0x2e
 80142d2:	d10c      	bne.n	80142ee <_vfiprintf_r+0x15a>
 80142d4:	7863      	ldrb	r3, [r4, #1]
 80142d6:	2b2a      	cmp	r3, #42	; 0x2a
 80142d8:	d134      	bne.n	8014344 <_vfiprintf_r+0x1b0>
 80142da:	9b03      	ldr	r3, [sp, #12]
 80142dc:	1d1a      	adds	r2, r3, #4
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	9203      	str	r2, [sp, #12]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	bfb8      	it	lt
 80142e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80142ea:	3402      	adds	r4, #2
 80142ec:	9305      	str	r3, [sp, #20]
 80142ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80143c4 <_vfiprintf_r+0x230>
 80142f2:	7821      	ldrb	r1, [r4, #0]
 80142f4:	2203      	movs	r2, #3
 80142f6:	4650      	mov	r0, sl
 80142f8:	f7eb ff7a 	bl	80001f0 <memchr>
 80142fc:	b138      	cbz	r0, 801430e <_vfiprintf_r+0x17a>
 80142fe:	9b04      	ldr	r3, [sp, #16]
 8014300:	eba0 000a 	sub.w	r0, r0, sl
 8014304:	2240      	movs	r2, #64	; 0x40
 8014306:	4082      	lsls	r2, r0
 8014308:	4313      	orrs	r3, r2
 801430a:	3401      	adds	r4, #1
 801430c:	9304      	str	r3, [sp, #16]
 801430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014312:	4829      	ldr	r0, [pc, #164]	; (80143b8 <_vfiprintf_r+0x224>)
 8014314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014318:	2206      	movs	r2, #6
 801431a:	f7eb ff69 	bl	80001f0 <memchr>
 801431e:	2800      	cmp	r0, #0
 8014320:	d03f      	beq.n	80143a2 <_vfiprintf_r+0x20e>
 8014322:	4b26      	ldr	r3, [pc, #152]	; (80143bc <_vfiprintf_r+0x228>)
 8014324:	bb1b      	cbnz	r3, 801436e <_vfiprintf_r+0x1da>
 8014326:	9b03      	ldr	r3, [sp, #12]
 8014328:	3307      	adds	r3, #7
 801432a:	f023 0307 	bic.w	r3, r3, #7
 801432e:	3308      	adds	r3, #8
 8014330:	9303      	str	r3, [sp, #12]
 8014332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014334:	443b      	add	r3, r7
 8014336:	9309      	str	r3, [sp, #36]	; 0x24
 8014338:	e768      	b.n	801420c <_vfiprintf_r+0x78>
 801433a:	fb0c 3202 	mla	r2, ip, r2, r3
 801433e:	460c      	mov	r4, r1
 8014340:	2001      	movs	r0, #1
 8014342:	e7a6      	b.n	8014292 <_vfiprintf_r+0xfe>
 8014344:	2300      	movs	r3, #0
 8014346:	3401      	adds	r4, #1
 8014348:	9305      	str	r3, [sp, #20]
 801434a:	4619      	mov	r1, r3
 801434c:	f04f 0c0a 	mov.w	ip, #10
 8014350:	4620      	mov	r0, r4
 8014352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014356:	3a30      	subs	r2, #48	; 0x30
 8014358:	2a09      	cmp	r2, #9
 801435a:	d903      	bls.n	8014364 <_vfiprintf_r+0x1d0>
 801435c:	2b00      	cmp	r3, #0
 801435e:	d0c6      	beq.n	80142ee <_vfiprintf_r+0x15a>
 8014360:	9105      	str	r1, [sp, #20]
 8014362:	e7c4      	b.n	80142ee <_vfiprintf_r+0x15a>
 8014364:	fb0c 2101 	mla	r1, ip, r1, r2
 8014368:	4604      	mov	r4, r0
 801436a:	2301      	movs	r3, #1
 801436c:	e7f0      	b.n	8014350 <_vfiprintf_r+0x1bc>
 801436e:	ab03      	add	r3, sp, #12
 8014370:	9300      	str	r3, [sp, #0]
 8014372:	462a      	mov	r2, r5
 8014374:	4b12      	ldr	r3, [pc, #72]	; (80143c0 <_vfiprintf_r+0x22c>)
 8014376:	a904      	add	r1, sp, #16
 8014378:	4630      	mov	r0, r6
 801437a:	f3af 8000 	nop.w
 801437e:	4607      	mov	r7, r0
 8014380:	1c78      	adds	r0, r7, #1
 8014382:	d1d6      	bne.n	8014332 <_vfiprintf_r+0x19e>
 8014384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014386:	07d9      	lsls	r1, r3, #31
 8014388:	d405      	bmi.n	8014396 <_vfiprintf_r+0x202>
 801438a:	89ab      	ldrh	r3, [r5, #12]
 801438c:	059a      	lsls	r2, r3, #22
 801438e:	d402      	bmi.n	8014396 <_vfiprintf_r+0x202>
 8014390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014392:	f7ff fe5b 	bl	801404c <__retarget_lock_release_recursive>
 8014396:	89ab      	ldrh	r3, [r5, #12]
 8014398:	065b      	lsls	r3, r3, #25
 801439a:	f53f af1d 	bmi.w	80141d8 <_vfiprintf_r+0x44>
 801439e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143a0:	e71c      	b.n	80141dc <_vfiprintf_r+0x48>
 80143a2:	ab03      	add	r3, sp, #12
 80143a4:	9300      	str	r3, [sp, #0]
 80143a6:	462a      	mov	r2, r5
 80143a8:	4b05      	ldr	r3, [pc, #20]	; (80143c0 <_vfiprintf_r+0x22c>)
 80143aa:	a904      	add	r1, sp, #16
 80143ac:	4630      	mov	r0, r6
 80143ae:	f000 f879 	bl	80144a4 <_printf_i>
 80143b2:	e7e4      	b.n	801437e <_vfiprintf_r+0x1ea>
 80143b4:	0801a4f3 	.word	0x0801a4f3
 80143b8:	0801a4fd 	.word	0x0801a4fd
 80143bc:	00000000 	.word	0x00000000
 80143c0:	0801416f 	.word	0x0801416f
 80143c4:	0801a4f9 	.word	0x0801a4f9

080143c8 <_printf_common>:
 80143c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143cc:	4616      	mov	r6, r2
 80143ce:	4699      	mov	r9, r3
 80143d0:	688a      	ldr	r2, [r1, #8]
 80143d2:	690b      	ldr	r3, [r1, #16]
 80143d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143d8:	4293      	cmp	r3, r2
 80143da:	bfb8      	it	lt
 80143dc:	4613      	movlt	r3, r2
 80143de:	6033      	str	r3, [r6, #0]
 80143e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143e4:	4607      	mov	r7, r0
 80143e6:	460c      	mov	r4, r1
 80143e8:	b10a      	cbz	r2, 80143ee <_printf_common+0x26>
 80143ea:	3301      	adds	r3, #1
 80143ec:	6033      	str	r3, [r6, #0]
 80143ee:	6823      	ldr	r3, [r4, #0]
 80143f0:	0699      	lsls	r1, r3, #26
 80143f2:	bf42      	ittt	mi
 80143f4:	6833      	ldrmi	r3, [r6, #0]
 80143f6:	3302      	addmi	r3, #2
 80143f8:	6033      	strmi	r3, [r6, #0]
 80143fa:	6825      	ldr	r5, [r4, #0]
 80143fc:	f015 0506 	ands.w	r5, r5, #6
 8014400:	d106      	bne.n	8014410 <_printf_common+0x48>
 8014402:	f104 0a19 	add.w	sl, r4, #25
 8014406:	68e3      	ldr	r3, [r4, #12]
 8014408:	6832      	ldr	r2, [r6, #0]
 801440a:	1a9b      	subs	r3, r3, r2
 801440c:	42ab      	cmp	r3, r5
 801440e:	dc26      	bgt.n	801445e <_printf_common+0x96>
 8014410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014414:	1e13      	subs	r3, r2, #0
 8014416:	6822      	ldr	r2, [r4, #0]
 8014418:	bf18      	it	ne
 801441a:	2301      	movne	r3, #1
 801441c:	0692      	lsls	r2, r2, #26
 801441e:	d42b      	bmi.n	8014478 <_printf_common+0xb0>
 8014420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014424:	4649      	mov	r1, r9
 8014426:	4638      	mov	r0, r7
 8014428:	47c0      	blx	r8
 801442a:	3001      	adds	r0, #1
 801442c:	d01e      	beq.n	801446c <_printf_common+0xa4>
 801442e:	6823      	ldr	r3, [r4, #0]
 8014430:	6922      	ldr	r2, [r4, #16]
 8014432:	f003 0306 	and.w	r3, r3, #6
 8014436:	2b04      	cmp	r3, #4
 8014438:	bf02      	ittt	eq
 801443a:	68e5      	ldreq	r5, [r4, #12]
 801443c:	6833      	ldreq	r3, [r6, #0]
 801443e:	1aed      	subeq	r5, r5, r3
 8014440:	68a3      	ldr	r3, [r4, #8]
 8014442:	bf0c      	ite	eq
 8014444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014448:	2500      	movne	r5, #0
 801444a:	4293      	cmp	r3, r2
 801444c:	bfc4      	itt	gt
 801444e:	1a9b      	subgt	r3, r3, r2
 8014450:	18ed      	addgt	r5, r5, r3
 8014452:	2600      	movs	r6, #0
 8014454:	341a      	adds	r4, #26
 8014456:	42b5      	cmp	r5, r6
 8014458:	d11a      	bne.n	8014490 <_printf_common+0xc8>
 801445a:	2000      	movs	r0, #0
 801445c:	e008      	b.n	8014470 <_printf_common+0xa8>
 801445e:	2301      	movs	r3, #1
 8014460:	4652      	mov	r2, sl
 8014462:	4649      	mov	r1, r9
 8014464:	4638      	mov	r0, r7
 8014466:	47c0      	blx	r8
 8014468:	3001      	adds	r0, #1
 801446a:	d103      	bne.n	8014474 <_printf_common+0xac>
 801446c:	f04f 30ff 	mov.w	r0, #4294967295
 8014470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014474:	3501      	adds	r5, #1
 8014476:	e7c6      	b.n	8014406 <_printf_common+0x3e>
 8014478:	18e1      	adds	r1, r4, r3
 801447a:	1c5a      	adds	r2, r3, #1
 801447c:	2030      	movs	r0, #48	; 0x30
 801447e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014482:	4422      	add	r2, r4
 8014484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801448c:	3302      	adds	r3, #2
 801448e:	e7c7      	b.n	8014420 <_printf_common+0x58>
 8014490:	2301      	movs	r3, #1
 8014492:	4622      	mov	r2, r4
 8014494:	4649      	mov	r1, r9
 8014496:	4638      	mov	r0, r7
 8014498:	47c0      	blx	r8
 801449a:	3001      	adds	r0, #1
 801449c:	d0e6      	beq.n	801446c <_printf_common+0xa4>
 801449e:	3601      	adds	r6, #1
 80144a0:	e7d9      	b.n	8014456 <_printf_common+0x8e>
	...

080144a4 <_printf_i>:
 80144a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	7e0f      	ldrb	r7, [r1, #24]
 80144aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80144ac:	2f78      	cmp	r7, #120	; 0x78
 80144ae:	4691      	mov	r9, r2
 80144b0:	4680      	mov	r8, r0
 80144b2:	460c      	mov	r4, r1
 80144b4:	469a      	mov	sl, r3
 80144b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80144ba:	d807      	bhi.n	80144cc <_printf_i+0x28>
 80144bc:	2f62      	cmp	r7, #98	; 0x62
 80144be:	d80a      	bhi.n	80144d6 <_printf_i+0x32>
 80144c0:	2f00      	cmp	r7, #0
 80144c2:	f000 80d4 	beq.w	801466e <_printf_i+0x1ca>
 80144c6:	2f58      	cmp	r7, #88	; 0x58
 80144c8:	f000 80c0 	beq.w	801464c <_printf_i+0x1a8>
 80144cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80144d4:	e03a      	b.n	801454c <_printf_i+0xa8>
 80144d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80144da:	2b15      	cmp	r3, #21
 80144dc:	d8f6      	bhi.n	80144cc <_printf_i+0x28>
 80144de:	a101      	add	r1, pc, #4	; (adr r1, 80144e4 <_printf_i+0x40>)
 80144e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144e4:	0801453d 	.word	0x0801453d
 80144e8:	08014551 	.word	0x08014551
 80144ec:	080144cd 	.word	0x080144cd
 80144f0:	080144cd 	.word	0x080144cd
 80144f4:	080144cd 	.word	0x080144cd
 80144f8:	080144cd 	.word	0x080144cd
 80144fc:	08014551 	.word	0x08014551
 8014500:	080144cd 	.word	0x080144cd
 8014504:	080144cd 	.word	0x080144cd
 8014508:	080144cd 	.word	0x080144cd
 801450c:	080144cd 	.word	0x080144cd
 8014510:	08014655 	.word	0x08014655
 8014514:	0801457d 	.word	0x0801457d
 8014518:	0801460f 	.word	0x0801460f
 801451c:	080144cd 	.word	0x080144cd
 8014520:	080144cd 	.word	0x080144cd
 8014524:	08014677 	.word	0x08014677
 8014528:	080144cd 	.word	0x080144cd
 801452c:	0801457d 	.word	0x0801457d
 8014530:	080144cd 	.word	0x080144cd
 8014534:	080144cd 	.word	0x080144cd
 8014538:	08014617 	.word	0x08014617
 801453c:	682b      	ldr	r3, [r5, #0]
 801453e:	1d1a      	adds	r2, r3, #4
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	602a      	str	r2, [r5, #0]
 8014544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801454c:	2301      	movs	r3, #1
 801454e:	e09f      	b.n	8014690 <_printf_i+0x1ec>
 8014550:	6820      	ldr	r0, [r4, #0]
 8014552:	682b      	ldr	r3, [r5, #0]
 8014554:	0607      	lsls	r7, r0, #24
 8014556:	f103 0104 	add.w	r1, r3, #4
 801455a:	6029      	str	r1, [r5, #0]
 801455c:	d501      	bpl.n	8014562 <_printf_i+0xbe>
 801455e:	681e      	ldr	r6, [r3, #0]
 8014560:	e003      	b.n	801456a <_printf_i+0xc6>
 8014562:	0646      	lsls	r6, r0, #25
 8014564:	d5fb      	bpl.n	801455e <_printf_i+0xba>
 8014566:	f9b3 6000 	ldrsh.w	r6, [r3]
 801456a:	2e00      	cmp	r6, #0
 801456c:	da03      	bge.n	8014576 <_printf_i+0xd2>
 801456e:	232d      	movs	r3, #45	; 0x2d
 8014570:	4276      	negs	r6, r6
 8014572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014576:	485a      	ldr	r0, [pc, #360]	; (80146e0 <_printf_i+0x23c>)
 8014578:	230a      	movs	r3, #10
 801457a:	e012      	b.n	80145a2 <_printf_i+0xfe>
 801457c:	682b      	ldr	r3, [r5, #0]
 801457e:	6820      	ldr	r0, [r4, #0]
 8014580:	1d19      	adds	r1, r3, #4
 8014582:	6029      	str	r1, [r5, #0]
 8014584:	0605      	lsls	r5, r0, #24
 8014586:	d501      	bpl.n	801458c <_printf_i+0xe8>
 8014588:	681e      	ldr	r6, [r3, #0]
 801458a:	e002      	b.n	8014592 <_printf_i+0xee>
 801458c:	0641      	lsls	r1, r0, #25
 801458e:	d5fb      	bpl.n	8014588 <_printf_i+0xe4>
 8014590:	881e      	ldrh	r6, [r3, #0]
 8014592:	4853      	ldr	r0, [pc, #332]	; (80146e0 <_printf_i+0x23c>)
 8014594:	2f6f      	cmp	r7, #111	; 0x6f
 8014596:	bf0c      	ite	eq
 8014598:	2308      	moveq	r3, #8
 801459a:	230a      	movne	r3, #10
 801459c:	2100      	movs	r1, #0
 801459e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80145a2:	6865      	ldr	r5, [r4, #4]
 80145a4:	60a5      	str	r5, [r4, #8]
 80145a6:	2d00      	cmp	r5, #0
 80145a8:	bfa2      	ittt	ge
 80145aa:	6821      	ldrge	r1, [r4, #0]
 80145ac:	f021 0104 	bicge.w	r1, r1, #4
 80145b0:	6021      	strge	r1, [r4, #0]
 80145b2:	b90e      	cbnz	r6, 80145b8 <_printf_i+0x114>
 80145b4:	2d00      	cmp	r5, #0
 80145b6:	d04b      	beq.n	8014650 <_printf_i+0x1ac>
 80145b8:	4615      	mov	r5, r2
 80145ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80145be:	fb03 6711 	mls	r7, r3, r1, r6
 80145c2:	5dc7      	ldrb	r7, [r0, r7]
 80145c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80145c8:	4637      	mov	r7, r6
 80145ca:	42bb      	cmp	r3, r7
 80145cc:	460e      	mov	r6, r1
 80145ce:	d9f4      	bls.n	80145ba <_printf_i+0x116>
 80145d0:	2b08      	cmp	r3, #8
 80145d2:	d10b      	bne.n	80145ec <_printf_i+0x148>
 80145d4:	6823      	ldr	r3, [r4, #0]
 80145d6:	07de      	lsls	r6, r3, #31
 80145d8:	d508      	bpl.n	80145ec <_printf_i+0x148>
 80145da:	6923      	ldr	r3, [r4, #16]
 80145dc:	6861      	ldr	r1, [r4, #4]
 80145de:	4299      	cmp	r1, r3
 80145e0:	bfde      	ittt	le
 80145e2:	2330      	movle	r3, #48	; 0x30
 80145e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80145e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80145ec:	1b52      	subs	r2, r2, r5
 80145ee:	6122      	str	r2, [r4, #16]
 80145f0:	f8cd a000 	str.w	sl, [sp]
 80145f4:	464b      	mov	r3, r9
 80145f6:	aa03      	add	r2, sp, #12
 80145f8:	4621      	mov	r1, r4
 80145fa:	4640      	mov	r0, r8
 80145fc:	f7ff fee4 	bl	80143c8 <_printf_common>
 8014600:	3001      	adds	r0, #1
 8014602:	d14a      	bne.n	801469a <_printf_i+0x1f6>
 8014604:	f04f 30ff 	mov.w	r0, #4294967295
 8014608:	b004      	add	sp, #16
 801460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801460e:	6823      	ldr	r3, [r4, #0]
 8014610:	f043 0320 	orr.w	r3, r3, #32
 8014614:	6023      	str	r3, [r4, #0]
 8014616:	4833      	ldr	r0, [pc, #204]	; (80146e4 <_printf_i+0x240>)
 8014618:	2778      	movs	r7, #120	; 0x78
 801461a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801461e:	6823      	ldr	r3, [r4, #0]
 8014620:	6829      	ldr	r1, [r5, #0]
 8014622:	061f      	lsls	r7, r3, #24
 8014624:	f851 6b04 	ldr.w	r6, [r1], #4
 8014628:	d402      	bmi.n	8014630 <_printf_i+0x18c>
 801462a:	065f      	lsls	r7, r3, #25
 801462c:	bf48      	it	mi
 801462e:	b2b6      	uxthmi	r6, r6
 8014630:	07df      	lsls	r7, r3, #31
 8014632:	bf48      	it	mi
 8014634:	f043 0320 	orrmi.w	r3, r3, #32
 8014638:	6029      	str	r1, [r5, #0]
 801463a:	bf48      	it	mi
 801463c:	6023      	strmi	r3, [r4, #0]
 801463e:	b91e      	cbnz	r6, 8014648 <_printf_i+0x1a4>
 8014640:	6823      	ldr	r3, [r4, #0]
 8014642:	f023 0320 	bic.w	r3, r3, #32
 8014646:	6023      	str	r3, [r4, #0]
 8014648:	2310      	movs	r3, #16
 801464a:	e7a7      	b.n	801459c <_printf_i+0xf8>
 801464c:	4824      	ldr	r0, [pc, #144]	; (80146e0 <_printf_i+0x23c>)
 801464e:	e7e4      	b.n	801461a <_printf_i+0x176>
 8014650:	4615      	mov	r5, r2
 8014652:	e7bd      	b.n	80145d0 <_printf_i+0x12c>
 8014654:	682b      	ldr	r3, [r5, #0]
 8014656:	6826      	ldr	r6, [r4, #0]
 8014658:	6961      	ldr	r1, [r4, #20]
 801465a:	1d18      	adds	r0, r3, #4
 801465c:	6028      	str	r0, [r5, #0]
 801465e:	0635      	lsls	r5, r6, #24
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	d501      	bpl.n	8014668 <_printf_i+0x1c4>
 8014664:	6019      	str	r1, [r3, #0]
 8014666:	e002      	b.n	801466e <_printf_i+0x1ca>
 8014668:	0670      	lsls	r0, r6, #25
 801466a:	d5fb      	bpl.n	8014664 <_printf_i+0x1c0>
 801466c:	8019      	strh	r1, [r3, #0]
 801466e:	2300      	movs	r3, #0
 8014670:	6123      	str	r3, [r4, #16]
 8014672:	4615      	mov	r5, r2
 8014674:	e7bc      	b.n	80145f0 <_printf_i+0x14c>
 8014676:	682b      	ldr	r3, [r5, #0]
 8014678:	1d1a      	adds	r2, r3, #4
 801467a:	602a      	str	r2, [r5, #0]
 801467c:	681d      	ldr	r5, [r3, #0]
 801467e:	6862      	ldr	r2, [r4, #4]
 8014680:	2100      	movs	r1, #0
 8014682:	4628      	mov	r0, r5
 8014684:	f7eb fdb4 	bl	80001f0 <memchr>
 8014688:	b108      	cbz	r0, 801468e <_printf_i+0x1ea>
 801468a:	1b40      	subs	r0, r0, r5
 801468c:	6060      	str	r0, [r4, #4]
 801468e:	6863      	ldr	r3, [r4, #4]
 8014690:	6123      	str	r3, [r4, #16]
 8014692:	2300      	movs	r3, #0
 8014694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014698:	e7aa      	b.n	80145f0 <_printf_i+0x14c>
 801469a:	6923      	ldr	r3, [r4, #16]
 801469c:	462a      	mov	r2, r5
 801469e:	4649      	mov	r1, r9
 80146a0:	4640      	mov	r0, r8
 80146a2:	47d0      	blx	sl
 80146a4:	3001      	adds	r0, #1
 80146a6:	d0ad      	beq.n	8014604 <_printf_i+0x160>
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	079b      	lsls	r3, r3, #30
 80146ac:	d413      	bmi.n	80146d6 <_printf_i+0x232>
 80146ae:	68e0      	ldr	r0, [r4, #12]
 80146b0:	9b03      	ldr	r3, [sp, #12]
 80146b2:	4298      	cmp	r0, r3
 80146b4:	bfb8      	it	lt
 80146b6:	4618      	movlt	r0, r3
 80146b8:	e7a6      	b.n	8014608 <_printf_i+0x164>
 80146ba:	2301      	movs	r3, #1
 80146bc:	4632      	mov	r2, r6
 80146be:	4649      	mov	r1, r9
 80146c0:	4640      	mov	r0, r8
 80146c2:	47d0      	blx	sl
 80146c4:	3001      	adds	r0, #1
 80146c6:	d09d      	beq.n	8014604 <_printf_i+0x160>
 80146c8:	3501      	adds	r5, #1
 80146ca:	68e3      	ldr	r3, [r4, #12]
 80146cc:	9903      	ldr	r1, [sp, #12]
 80146ce:	1a5b      	subs	r3, r3, r1
 80146d0:	42ab      	cmp	r3, r5
 80146d2:	dcf2      	bgt.n	80146ba <_printf_i+0x216>
 80146d4:	e7eb      	b.n	80146ae <_printf_i+0x20a>
 80146d6:	2500      	movs	r5, #0
 80146d8:	f104 0619 	add.w	r6, r4, #25
 80146dc:	e7f5      	b.n	80146ca <_printf_i+0x226>
 80146de:	bf00      	nop
 80146e0:	0801a504 	.word	0x0801a504
 80146e4:	0801a515 	.word	0x0801a515

080146e8 <__sflush_r>:
 80146e8:	898a      	ldrh	r2, [r1, #12]
 80146ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ee:	4605      	mov	r5, r0
 80146f0:	0710      	lsls	r0, r2, #28
 80146f2:	460c      	mov	r4, r1
 80146f4:	d458      	bmi.n	80147a8 <__sflush_r+0xc0>
 80146f6:	684b      	ldr	r3, [r1, #4]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	dc05      	bgt.n	8014708 <__sflush_r+0x20>
 80146fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146fe:	2b00      	cmp	r3, #0
 8014700:	dc02      	bgt.n	8014708 <__sflush_r+0x20>
 8014702:	2000      	movs	r0, #0
 8014704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801470a:	2e00      	cmp	r6, #0
 801470c:	d0f9      	beq.n	8014702 <__sflush_r+0x1a>
 801470e:	2300      	movs	r3, #0
 8014710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014714:	682f      	ldr	r7, [r5, #0]
 8014716:	6a21      	ldr	r1, [r4, #32]
 8014718:	602b      	str	r3, [r5, #0]
 801471a:	d032      	beq.n	8014782 <__sflush_r+0x9a>
 801471c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	075a      	lsls	r2, r3, #29
 8014722:	d505      	bpl.n	8014730 <__sflush_r+0x48>
 8014724:	6863      	ldr	r3, [r4, #4]
 8014726:	1ac0      	subs	r0, r0, r3
 8014728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801472a:	b10b      	cbz	r3, 8014730 <__sflush_r+0x48>
 801472c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801472e:	1ac0      	subs	r0, r0, r3
 8014730:	2300      	movs	r3, #0
 8014732:	4602      	mov	r2, r0
 8014734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014736:	6a21      	ldr	r1, [r4, #32]
 8014738:	4628      	mov	r0, r5
 801473a:	47b0      	blx	r6
 801473c:	1c43      	adds	r3, r0, #1
 801473e:	89a3      	ldrh	r3, [r4, #12]
 8014740:	d106      	bne.n	8014750 <__sflush_r+0x68>
 8014742:	6829      	ldr	r1, [r5, #0]
 8014744:	291d      	cmp	r1, #29
 8014746:	d82b      	bhi.n	80147a0 <__sflush_r+0xb8>
 8014748:	4a29      	ldr	r2, [pc, #164]	; (80147f0 <__sflush_r+0x108>)
 801474a:	410a      	asrs	r2, r1
 801474c:	07d6      	lsls	r6, r2, #31
 801474e:	d427      	bmi.n	80147a0 <__sflush_r+0xb8>
 8014750:	2200      	movs	r2, #0
 8014752:	6062      	str	r2, [r4, #4]
 8014754:	04d9      	lsls	r1, r3, #19
 8014756:	6922      	ldr	r2, [r4, #16]
 8014758:	6022      	str	r2, [r4, #0]
 801475a:	d504      	bpl.n	8014766 <__sflush_r+0x7e>
 801475c:	1c42      	adds	r2, r0, #1
 801475e:	d101      	bne.n	8014764 <__sflush_r+0x7c>
 8014760:	682b      	ldr	r3, [r5, #0]
 8014762:	b903      	cbnz	r3, 8014766 <__sflush_r+0x7e>
 8014764:	6560      	str	r0, [r4, #84]	; 0x54
 8014766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014768:	602f      	str	r7, [r5, #0]
 801476a:	2900      	cmp	r1, #0
 801476c:	d0c9      	beq.n	8014702 <__sflush_r+0x1a>
 801476e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014772:	4299      	cmp	r1, r3
 8014774:	d002      	beq.n	801477c <__sflush_r+0x94>
 8014776:	4628      	mov	r0, r5
 8014778:	f7ff fc96 	bl	80140a8 <_free_r>
 801477c:	2000      	movs	r0, #0
 801477e:	6360      	str	r0, [r4, #52]	; 0x34
 8014780:	e7c0      	b.n	8014704 <__sflush_r+0x1c>
 8014782:	2301      	movs	r3, #1
 8014784:	4628      	mov	r0, r5
 8014786:	47b0      	blx	r6
 8014788:	1c41      	adds	r1, r0, #1
 801478a:	d1c8      	bne.n	801471e <__sflush_r+0x36>
 801478c:	682b      	ldr	r3, [r5, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d0c5      	beq.n	801471e <__sflush_r+0x36>
 8014792:	2b1d      	cmp	r3, #29
 8014794:	d001      	beq.n	801479a <__sflush_r+0xb2>
 8014796:	2b16      	cmp	r3, #22
 8014798:	d101      	bne.n	801479e <__sflush_r+0xb6>
 801479a:	602f      	str	r7, [r5, #0]
 801479c:	e7b1      	b.n	8014702 <__sflush_r+0x1a>
 801479e:	89a3      	ldrh	r3, [r4, #12]
 80147a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147a4:	81a3      	strh	r3, [r4, #12]
 80147a6:	e7ad      	b.n	8014704 <__sflush_r+0x1c>
 80147a8:	690f      	ldr	r7, [r1, #16]
 80147aa:	2f00      	cmp	r7, #0
 80147ac:	d0a9      	beq.n	8014702 <__sflush_r+0x1a>
 80147ae:	0793      	lsls	r3, r2, #30
 80147b0:	680e      	ldr	r6, [r1, #0]
 80147b2:	bf08      	it	eq
 80147b4:	694b      	ldreq	r3, [r1, #20]
 80147b6:	600f      	str	r7, [r1, #0]
 80147b8:	bf18      	it	ne
 80147ba:	2300      	movne	r3, #0
 80147bc:	eba6 0807 	sub.w	r8, r6, r7
 80147c0:	608b      	str	r3, [r1, #8]
 80147c2:	f1b8 0f00 	cmp.w	r8, #0
 80147c6:	dd9c      	ble.n	8014702 <__sflush_r+0x1a>
 80147c8:	6a21      	ldr	r1, [r4, #32]
 80147ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80147cc:	4643      	mov	r3, r8
 80147ce:	463a      	mov	r2, r7
 80147d0:	4628      	mov	r0, r5
 80147d2:	47b0      	blx	r6
 80147d4:	2800      	cmp	r0, #0
 80147d6:	dc06      	bgt.n	80147e6 <__sflush_r+0xfe>
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147de:	81a3      	strh	r3, [r4, #12]
 80147e0:	f04f 30ff 	mov.w	r0, #4294967295
 80147e4:	e78e      	b.n	8014704 <__sflush_r+0x1c>
 80147e6:	4407      	add	r7, r0
 80147e8:	eba8 0800 	sub.w	r8, r8, r0
 80147ec:	e7e9      	b.n	80147c2 <__sflush_r+0xda>
 80147ee:	bf00      	nop
 80147f0:	dfbffffe 	.word	0xdfbffffe

080147f4 <_fflush_r>:
 80147f4:	b538      	push	{r3, r4, r5, lr}
 80147f6:	690b      	ldr	r3, [r1, #16]
 80147f8:	4605      	mov	r5, r0
 80147fa:	460c      	mov	r4, r1
 80147fc:	b913      	cbnz	r3, 8014804 <_fflush_r+0x10>
 80147fe:	2500      	movs	r5, #0
 8014800:	4628      	mov	r0, r5
 8014802:	bd38      	pop	{r3, r4, r5, pc}
 8014804:	b118      	cbz	r0, 801480e <_fflush_r+0x1a>
 8014806:	6a03      	ldr	r3, [r0, #32]
 8014808:	b90b      	cbnz	r3, 801480e <_fflush_r+0x1a>
 801480a:	f7ff faff 	bl	8013e0c <__sinit>
 801480e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d0f3      	beq.n	80147fe <_fflush_r+0xa>
 8014816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014818:	07d0      	lsls	r0, r2, #31
 801481a:	d404      	bmi.n	8014826 <_fflush_r+0x32>
 801481c:	0599      	lsls	r1, r3, #22
 801481e:	d402      	bmi.n	8014826 <_fflush_r+0x32>
 8014820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014822:	f7ff fc12 	bl	801404a <__retarget_lock_acquire_recursive>
 8014826:	4628      	mov	r0, r5
 8014828:	4621      	mov	r1, r4
 801482a:	f7ff ff5d 	bl	80146e8 <__sflush_r>
 801482e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014830:	07da      	lsls	r2, r3, #31
 8014832:	4605      	mov	r5, r0
 8014834:	d4e4      	bmi.n	8014800 <_fflush_r+0xc>
 8014836:	89a3      	ldrh	r3, [r4, #12]
 8014838:	059b      	lsls	r3, r3, #22
 801483a:	d4e1      	bmi.n	8014800 <_fflush_r+0xc>
 801483c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801483e:	f7ff fc05 	bl	801404c <__retarget_lock_release_recursive>
 8014842:	e7dd      	b.n	8014800 <_fflush_r+0xc>

08014844 <fiprintf>:
 8014844:	b40e      	push	{r1, r2, r3}
 8014846:	b503      	push	{r0, r1, lr}
 8014848:	4601      	mov	r1, r0
 801484a:	ab03      	add	r3, sp, #12
 801484c:	4805      	ldr	r0, [pc, #20]	; (8014864 <fiprintf+0x20>)
 801484e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014852:	6800      	ldr	r0, [r0, #0]
 8014854:	9301      	str	r3, [sp, #4]
 8014856:	f7ff fc9d 	bl	8014194 <_vfiprintf_r>
 801485a:	b002      	add	sp, #8
 801485c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014860:	b003      	add	sp, #12
 8014862:	4770      	bx	lr
 8014864:	2000008c 	.word	0x2000008c

08014868 <__swbuf_r>:
 8014868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486a:	460e      	mov	r6, r1
 801486c:	4614      	mov	r4, r2
 801486e:	4605      	mov	r5, r0
 8014870:	b118      	cbz	r0, 801487a <__swbuf_r+0x12>
 8014872:	6a03      	ldr	r3, [r0, #32]
 8014874:	b90b      	cbnz	r3, 801487a <__swbuf_r+0x12>
 8014876:	f7ff fac9 	bl	8013e0c <__sinit>
 801487a:	69a3      	ldr	r3, [r4, #24]
 801487c:	60a3      	str	r3, [r4, #8]
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	071a      	lsls	r2, r3, #28
 8014882:	d525      	bpl.n	80148d0 <__swbuf_r+0x68>
 8014884:	6923      	ldr	r3, [r4, #16]
 8014886:	b31b      	cbz	r3, 80148d0 <__swbuf_r+0x68>
 8014888:	6823      	ldr	r3, [r4, #0]
 801488a:	6922      	ldr	r2, [r4, #16]
 801488c:	1a98      	subs	r0, r3, r2
 801488e:	6963      	ldr	r3, [r4, #20]
 8014890:	b2f6      	uxtb	r6, r6
 8014892:	4283      	cmp	r3, r0
 8014894:	4637      	mov	r7, r6
 8014896:	dc04      	bgt.n	80148a2 <__swbuf_r+0x3a>
 8014898:	4621      	mov	r1, r4
 801489a:	4628      	mov	r0, r5
 801489c:	f7ff ffaa 	bl	80147f4 <_fflush_r>
 80148a0:	b9e0      	cbnz	r0, 80148dc <__swbuf_r+0x74>
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	3b01      	subs	r3, #1
 80148a6:	60a3      	str	r3, [r4, #8]
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	1c5a      	adds	r2, r3, #1
 80148ac:	6022      	str	r2, [r4, #0]
 80148ae:	701e      	strb	r6, [r3, #0]
 80148b0:	6962      	ldr	r2, [r4, #20]
 80148b2:	1c43      	adds	r3, r0, #1
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d004      	beq.n	80148c2 <__swbuf_r+0x5a>
 80148b8:	89a3      	ldrh	r3, [r4, #12]
 80148ba:	07db      	lsls	r3, r3, #31
 80148bc:	d506      	bpl.n	80148cc <__swbuf_r+0x64>
 80148be:	2e0a      	cmp	r6, #10
 80148c0:	d104      	bne.n	80148cc <__swbuf_r+0x64>
 80148c2:	4621      	mov	r1, r4
 80148c4:	4628      	mov	r0, r5
 80148c6:	f7ff ff95 	bl	80147f4 <_fflush_r>
 80148ca:	b938      	cbnz	r0, 80148dc <__swbuf_r+0x74>
 80148cc:	4638      	mov	r0, r7
 80148ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d0:	4621      	mov	r1, r4
 80148d2:	4628      	mov	r0, r5
 80148d4:	f000 f806 	bl	80148e4 <__swsetup_r>
 80148d8:	2800      	cmp	r0, #0
 80148da:	d0d5      	beq.n	8014888 <__swbuf_r+0x20>
 80148dc:	f04f 37ff 	mov.w	r7, #4294967295
 80148e0:	e7f4      	b.n	80148cc <__swbuf_r+0x64>
	...

080148e4 <__swsetup_r>:
 80148e4:	b538      	push	{r3, r4, r5, lr}
 80148e6:	4b2a      	ldr	r3, [pc, #168]	; (8014990 <__swsetup_r+0xac>)
 80148e8:	4605      	mov	r5, r0
 80148ea:	6818      	ldr	r0, [r3, #0]
 80148ec:	460c      	mov	r4, r1
 80148ee:	b118      	cbz	r0, 80148f8 <__swsetup_r+0x14>
 80148f0:	6a03      	ldr	r3, [r0, #32]
 80148f2:	b90b      	cbnz	r3, 80148f8 <__swsetup_r+0x14>
 80148f4:	f7ff fa8a 	bl	8013e0c <__sinit>
 80148f8:	89a3      	ldrh	r3, [r4, #12]
 80148fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80148fe:	0718      	lsls	r0, r3, #28
 8014900:	d422      	bmi.n	8014948 <__swsetup_r+0x64>
 8014902:	06d9      	lsls	r1, r3, #27
 8014904:	d407      	bmi.n	8014916 <__swsetup_r+0x32>
 8014906:	2309      	movs	r3, #9
 8014908:	602b      	str	r3, [r5, #0]
 801490a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801490e:	81a3      	strh	r3, [r4, #12]
 8014910:	f04f 30ff 	mov.w	r0, #4294967295
 8014914:	e034      	b.n	8014980 <__swsetup_r+0x9c>
 8014916:	0758      	lsls	r0, r3, #29
 8014918:	d512      	bpl.n	8014940 <__swsetup_r+0x5c>
 801491a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801491c:	b141      	cbz	r1, 8014930 <__swsetup_r+0x4c>
 801491e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014922:	4299      	cmp	r1, r3
 8014924:	d002      	beq.n	801492c <__swsetup_r+0x48>
 8014926:	4628      	mov	r0, r5
 8014928:	f7ff fbbe 	bl	80140a8 <_free_r>
 801492c:	2300      	movs	r3, #0
 801492e:	6363      	str	r3, [r4, #52]	; 0x34
 8014930:	89a3      	ldrh	r3, [r4, #12]
 8014932:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014936:	81a3      	strh	r3, [r4, #12]
 8014938:	2300      	movs	r3, #0
 801493a:	6063      	str	r3, [r4, #4]
 801493c:	6923      	ldr	r3, [r4, #16]
 801493e:	6023      	str	r3, [r4, #0]
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	f043 0308 	orr.w	r3, r3, #8
 8014946:	81a3      	strh	r3, [r4, #12]
 8014948:	6923      	ldr	r3, [r4, #16]
 801494a:	b94b      	cbnz	r3, 8014960 <__swsetup_r+0x7c>
 801494c:	89a3      	ldrh	r3, [r4, #12]
 801494e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014956:	d003      	beq.n	8014960 <__swsetup_r+0x7c>
 8014958:	4621      	mov	r1, r4
 801495a:	4628      	mov	r0, r5
 801495c:	f000 f847 	bl	80149ee <__smakebuf_r>
 8014960:	89a0      	ldrh	r0, [r4, #12]
 8014962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014966:	f010 0301 	ands.w	r3, r0, #1
 801496a:	d00a      	beq.n	8014982 <__swsetup_r+0x9e>
 801496c:	2300      	movs	r3, #0
 801496e:	60a3      	str	r3, [r4, #8]
 8014970:	6963      	ldr	r3, [r4, #20]
 8014972:	425b      	negs	r3, r3
 8014974:	61a3      	str	r3, [r4, #24]
 8014976:	6923      	ldr	r3, [r4, #16]
 8014978:	b943      	cbnz	r3, 801498c <__swsetup_r+0xa8>
 801497a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801497e:	d1c4      	bne.n	801490a <__swsetup_r+0x26>
 8014980:	bd38      	pop	{r3, r4, r5, pc}
 8014982:	0781      	lsls	r1, r0, #30
 8014984:	bf58      	it	pl
 8014986:	6963      	ldrpl	r3, [r4, #20]
 8014988:	60a3      	str	r3, [r4, #8]
 801498a:	e7f4      	b.n	8014976 <__swsetup_r+0x92>
 801498c:	2000      	movs	r0, #0
 801498e:	e7f7      	b.n	8014980 <__swsetup_r+0x9c>
 8014990:	2000008c 	.word	0x2000008c

08014994 <abort>:
 8014994:	b508      	push	{r3, lr}
 8014996:	2006      	movs	r0, #6
 8014998:	f000 f88e 	bl	8014ab8 <raise>
 801499c:	2001      	movs	r0, #1
 801499e:	f7ec f8b3 	bl	8000b08 <_exit>

080149a2 <__swhatbuf_r>:
 80149a2:	b570      	push	{r4, r5, r6, lr}
 80149a4:	460c      	mov	r4, r1
 80149a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149aa:	2900      	cmp	r1, #0
 80149ac:	b096      	sub	sp, #88	; 0x58
 80149ae:	4615      	mov	r5, r2
 80149b0:	461e      	mov	r6, r3
 80149b2:	da0d      	bge.n	80149d0 <__swhatbuf_r+0x2e>
 80149b4:	89a3      	ldrh	r3, [r4, #12]
 80149b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80149ba:	f04f 0100 	mov.w	r1, #0
 80149be:	bf0c      	ite	eq
 80149c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80149c4:	2340      	movne	r3, #64	; 0x40
 80149c6:	2000      	movs	r0, #0
 80149c8:	6031      	str	r1, [r6, #0]
 80149ca:	602b      	str	r3, [r5, #0]
 80149cc:	b016      	add	sp, #88	; 0x58
 80149ce:	bd70      	pop	{r4, r5, r6, pc}
 80149d0:	466a      	mov	r2, sp
 80149d2:	f000 f879 	bl	8014ac8 <_fstat_r>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	dbec      	blt.n	80149b4 <__swhatbuf_r+0x12>
 80149da:	9901      	ldr	r1, [sp, #4]
 80149dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80149e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80149e4:	4259      	negs	r1, r3
 80149e6:	4159      	adcs	r1, r3
 80149e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149ec:	e7eb      	b.n	80149c6 <__swhatbuf_r+0x24>

080149ee <__smakebuf_r>:
 80149ee:	898b      	ldrh	r3, [r1, #12]
 80149f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149f2:	079d      	lsls	r5, r3, #30
 80149f4:	4606      	mov	r6, r0
 80149f6:	460c      	mov	r4, r1
 80149f8:	d507      	bpl.n	8014a0a <__smakebuf_r+0x1c>
 80149fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149fe:	6023      	str	r3, [r4, #0]
 8014a00:	6123      	str	r3, [r4, #16]
 8014a02:	2301      	movs	r3, #1
 8014a04:	6163      	str	r3, [r4, #20]
 8014a06:	b002      	add	sp, #8
 8014a08:	bd70      	pop	{r4, r5, r6, pc}
 8014a0a:	ab01      	add	r3, sp, #4
 8014a0c:	466a      	mov	r2, sp
 8014a0e:	f7ff ffc8 	bl	80149a2 <__swhatbuf_r>
 8014a12:	9900      	ldr	r1, [sp, #0]
 8014a14:	4605      	mov	r5, r0
 8014a16:	4630      	mov	r0, r6
 8014a18:	f7ff f8a2 	bl	8013b60 <_malloc_r>
 8014a1c:	b948      	cbnz	r0, 8014a32 <__smakebuf_r+0x44>
 8014a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a22:	059a      	lsls	r2, r3, #22
 8014a24:	d4ef      	bmi.n	8014a06 <__smakebuf_r+0x18>
 8014a26:	f023 0303 	bic.w	r3, r3, #3
 8014a2a:	f043 0302 	orr.w	r3, r3, #2
 8014a2e:	81a3      	strh	r3, [r4, #12]
 8014a30:	e7e3      	b.n	80149fa <__smakebuf_r+0xc>
 8014a32:	89a3      	ldrh	r3, [r4, #12]
 8014a34:	6020      	str	r0, [r4, #0]
 8014a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a3a:	81a3      	strh	r3, [r4, #12]
 8014a3c:	9b00      	ldr	r3, [sp, #0]
 8014a3e:	6163      	str	r3, [r4, #20]
 8014a40:	9b01      	ldr	r3, [sp, #4]
 8014a42:	6120      	str	r0, [r4, #16]
 8014a44:	b15b      	cbz	r3, 8014a5e <__smakebuf_r+0x70>
 8014a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f000 f84e 	bl	8014aec <_isatty_r>
 8014a50:	b128      	cbz	r0, 8014a5e <__smakebuf_r+0x70>
 8014a52:	89a3      	ldrh	r3, [r4, #12]
 8014a54:	f023 0303 	bic.w	r3, r3, #3
 8014a58:	f043 0301 	orr.w	r3, r3, #1
 8014a5c:	81a3      	strh	r3, [r4, #12]
 8014a5e:	89a3      	ldrh	r3, [r4, #12]
 8014a60:	431d      	orrs	r5, r3
 8014a62:	81a5      	strh	r5, [r4, #12]
 8014a64:	e7cf      	b.n	8014a06 <__smakebuf_r+0x18>

08014a66 <_raise_r>:
 8014a66:	291f      	cmp	r1, #31
 8014a68:	b538      	push	{r3, r4, r5, lr}
 8014a6a:	4604      	mov	r4, r0
 8014a6c:	460d      	mov	r5, r1
 8014a6e:	d904      	bls.n	8014a7a <_raise_r+0x14>
 8014a70:	2316      	movs	r3, #22
 8014a72:	6003      	str	r3, [r0, #0]
 8014a74:	f04f 30ff 	mov.w	r0, #4294967295
 8014a78:	bd38      	pop	{r3, r4, r5, pc}
 8014a7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014a7c:	b112      	cbz	r2, 8014a84 <_raise_r+0x1e>
 8014a7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a82:	b94b      	cbnz	r3, 8014a98 <_raise_r+0x32>
 8014a84:	4620      	mov	r0, r4
 8014a86:	f000 f853 	bl	8014b30 <_getpid_r>
 8014a8a:	462a      	mov	r2, r5
 8014a8c:	4601      	mov	r1, r0
 8014a8e:	4620      	mov	r0, r4
 8014a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a94:	f000 b83a 	b.w	8014b0c <_kill_r>
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	d00a      	beq.n	8014ab2 <_raise_r+0x4c>
 8014a9c:	1c59      	adds	r1, r3, #1
 8014a9e:	d103      	bne.n	8014aa8 <_raise_r+0x42>
 8014aa0:	2316      	movs	r3, #22
 8014aa2:	6003      	str	r3, [r0, #0]
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	e7e7      	b.n	8014a78 <_raise_r+0x12>
 8014aa8:	2400      	movs	r4, #0
 8014aaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014aae:	4628      	mov	r0, r5
 8014ab0:	4798      	blx	r3
 8014ab2:	2000      	movs	r0, #0
 8014ab4:	e7e0      	b.n	8014a78 <_raise_r+0x12>
	...

08014ab8 <raise>:
 8014ab8:	4b02      	ldr	r3, [pc, #8]	; (8014ac4 <raise+0xc>)
 8014aba:	4601      	mov	r1, r0
 8014abc:	6818      	ldr	r0, [r3, #0]
 8014abe:	f7ff bfd2 	b.w	8014a66 <_raise_r>
 8014ac2:	bf00      	nop
 8014ac4:	2000008c 	.word	0x2000008c

08014ac8 <_fstat_r>:
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	4d07      	ldr	r5, [pc, #28]	; (8014ae8 <_fstat_r+0x20>)
 8014acc:	2300      	movs	r3, #0
 8014ace:	4604      	mov	r4, r0
 8014ad0:	4608      	mov	r0, r1
 8014ad2:	4611      	mov	r1, r2
 8014ad4:	602b      	str	r3, [r5, #0]
 8014ad6:	f7ec f866 	bl	8000ba6 <_fstat>
 8014ada:	1c43      	adds	r3, r0, #1
 8014adc:	d102      	bne.n	8014ae4 <_fstat_r+0x1c>
 8014ade:	682b      	ldr	r3, [r5, #0]
 8014ae0:	b103      	cbz	r3, 8014ae4 <_fstat_r+0x1c>
 8014ae2:	6023      	str	r3, [r4, #0]
 8014ae4:	bd38      	pop	{r3, r4, r5, pc}
 8014ae6:	bf00      	nop
 8014ae8:	2000c5a8 	.word	0x2000c5a8

08014aec <_isatty_r>:
 8014aec:	b538      	push	{r3, r4, r5, lr}
 8014aee:	4d06      	ldr	r5, [pc, #24]	; (8014b08 <_isatty_r+0x1c>)
 8014af0:	2300      	movs	r3, #0
 8014af2:	4604      	mov	r4, r0
 8014af4:	4608      	mov	r0, r1
 8014af6:	602b      	str	r3, [r5, #0]
 8014af8:	f7ec f865 	bl	8000bc6 <_isatty>
 8014afc:	1c43      	adds	r3, r0, #1
 8014afe:	d102      	bne.n	8014b06 <_isatty_r+0x1a>
 8014b00:	682b      	ldr	r3, [r5, #0]
 8014b02:	b103      	cbz	r3, 8014b06 <_isatty_r+0x1a>
 8014b04:	6023      	str	r3, [r4, #0]
 8014b06:	bd38      	pop	{r3, r4, r5, pc}
 8014b08:	2000c5a8 	.word	0x2000c5a8

08014b0c <_kill_r>:
 8014b0c:	b538      	push	{r3, r4, r5, lr}
 8014b0e:	4d07      	ldr	r5, [pc, #28]	; (8014b2c <_kill_r+0x20>)
 8014b10:	2300      	movs	r3, #0
 8014b12:	4604      	mov	r4, r0
 8014b14:	4608      	mov	r0, r1
 8014b16:	4611      	mov	r1, r2
 8014b18:	602b      	str	r3, [r5, #0]
 8014b1a:	f7eb ffe3 	bl	8000ae4 <_kill>
 8014b1e:	1c43      	adds	r3, r0, #1
 8014b20:	d102      	bne.n	8014b28 <_kill_r+0x1c>
 8014b22:	682b      	ldr	r3, [r5, #0]
 8014b24:	b103      	cbz	r3, 8014b28 <_kill_r+0x1c>
 8014b26:	6023      	str	r3, [r4, #0]
 8014b28:	bd38      	pop	{r3, r4, r5, pc}
 8014b2a:	bf00      	nop
 8014b2c:	2000c5a8 	.word	0x2000c5a8

08014b30 <_getpid_r>:
 8014b30:	f7eb bfd0 	b.w	8000ad4 <_getpid>

08014b34 <_init>:
 8014b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b36:	bf00      	nop
 8014b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b3a:	bc08      	pop	{r3}
 8014b3c:	469e      	mov	lr, r3
 8014b3e:	4770      	bx	lr

08014b40 <_fini>:
 8014b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b42:	bf00      	nop
 8014b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b46:	bc08      	pop	{r3}
 8014b48:	469e      	mov	lr, r3
 8014b4a:	4770      	bx	lr
